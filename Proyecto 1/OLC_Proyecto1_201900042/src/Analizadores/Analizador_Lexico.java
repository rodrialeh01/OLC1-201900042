/* The following code was generated by JFlex 1.4.1 on 14/09/22 14:10 */

/*------------------------- Codigo de Usuario --------------------------------*/
//------------>Paquetes, importaciones
package analizadores;
import java_cup.runtime.*;
import java.util.LinkedList;
import Clases.ErrorLenguaje;

/*------------------------- Opciones y Declaraciones ------------------------*/


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 14/09/22 14:10 from the specification file
 * <tt>A_Lexico.jflex</tt>
 */
public class Analizador_Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\10\2\0\1\1\22\0\1\55\1\0\1\4\1\0"+
    "\1\16\2\0\1\6\1\62\1\63\1\12\1\71\1\61\1\66\1\3"+
    "\1\11\1\24\1\25\1\26\1\2\1\27\1\21\1\20\2\22\1\23"+
    "\1\0\1\60\2\0\1\67\1\70\1\0\1\33\1\52\1\51\1\45"+
    "\1\37\1\46\1\41\1\53\1\40\1\57\1\14\1\43\1\32\1\7"+
    "\1\35\1\54\1\56\1\36\1\44\1\47\1\42\1\50\2\14\1\34"+
    "\1\14\1\64\1\5\1\65\1\0\1\13\1\0\1\33\1\52\1\51"+
    "\1\45\1\37\1\46\1\41\1\53\1\40\1\57\1\14\1\43\1\32"+
    "\1\7\1\35\1\54\1\56\1\36\1\44\1\47\1\42\1\50\2\14"+
    "\1\34\1\14\1\17\1\0\1\30\63\0\1\15\15\0\1\31\2\0"+
    "\1\31\1\15\u1f54\0\1\15\udfe7\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\3\1\1\4\1\5\1\6"+
    "\1\1\1\7\16\1\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\2\0\1\21\5\0\1\22"+
    "\10\0\1\23\7\0\1\24\13\0\1\25\1\26\1\21"+
    "\1\27\1\0\1\30\1\0\1\22\1\0\1\31\5\0"+
    "\1\32\14\0\1\33\21\0\1\34\5\0\1\35\23\0"+
    "\1\36\3\0\1\37\5\0\1\40\1\0\1\41\13\0"+
    "\1\42\1\0\1\43\14\0\1\44\1\45\2\0\1\46"+
    "\1\0\1\47\1\0\1\50\7\0\1\51\6\0\1\52"+
    "\5\0\1\53\6\0\1\54\4\0\1\55\14\0\1\56"+
    "\5\0\1\57\4\0\1\60\1\61\1\62\1\63\1\0"+
    "\1\64\1\65\1\66\5\0\1\67\1\0\1\70\4\0"+
    "\1\71\7\0\1\72\1\0\1\73\1\74\2\0\1\75"+
    "\5\0\1\76\7\0\1\77\2\0\1\100\4\0\1\101"+
    "\1\0\1\102\2\0\1\103\1\104\4\0\1\105\1\0"+
    "\1\106\1\107";

  private static int [] zzUnpackAction() {
    int [] result = new int[319];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\350\0\u0122\0\u015c\0\72"+
    "\0\u0196\0\72\0\u01d0\0\72\0\u020a\0\u0244\0\u027e\0\u02b8"+
    "\0\u02f2\0\u032c\0\u0366\0\u03a0\0\u03da\0\u0414\0\u044e\0\u0488"+
    "\0\u04c2\0\u04fc\0\72\0\72\0\72\0\72\0\72\0\72"+
    "\0\u0536\0\72\0\72\0\u0570\0\350\0\72\0\u05aa\0\u05e4"+
    "\0\u061e\0\u0658\0\u0692\0\u06cc\0\u0706\0\u0740\0\u077a\0\u07b4"+
    "\0\u07ee\0\u0828\0\u0862\0\u089c\0\72\0\u08d6\0\u0910\0\u094a"+
    "\0\u0984\0\u09be\0\u09f8\0\u0a32\0\72\0\u0a6c\0\u0aa6\0\u0ae0"+
    "\0\u0b1a\0\u0b54\0\u0b8e\0\u0bc8\0\u0c02\0\u0c3c\0\u0c76\0\u0cb0"+
    "\0\72\0\u0570\0\350\0\72\0\u0cea\0\72\0\u0d24\0\u0d5e"+
    "\0\u0d98\0\u0740\0\u0dd2\0\u0e0c\0\u0e46\0\u0e80\0\u0eba\0\72"+
    "\0\u0ef4\0\u0f2e\0\u0f68\0\u0fa2\0\u0fdc\0\u1016\0\u1050\0\u108a"+
    "\0\u10c4\0\u10fe\0\u1138\0\u1172\0\u11ac\0\u11e6\0\u1220\0\u125a"+
    "\0\u1294\0\u12ce\0\u1308\0\u1342\0\u137c\0\u13b6\0\u13f0\0\u142a"+
    "\0\u1464\0\u149e\0\u14d8\0\u1512\0\u154c\0\u1586\0\72\0\u15c0"+
    "\0\u15fa\0\u1634\0\u166e\0\u16a8\0\72\0\u16e2\0\u171c\0\u1756"+
    "\0\u1790\0\u17ca\0\u1804\0\u183e\0\u1878\0\u18b2\0\u18ec\0\u1926"+
    "\0\u1960\0\u199a\0\u19d4\0\u1a0e\0\u1a48\0\u1a82\0\u1abc\0\u1af6"+
    "\0\72\0\u1b30\0\u1b6a\0\u1ba4\0\72\0\u1bde\0\u1c18\0\u1c52"+
    "\0\u1c8c\0\u1cc6\0\u1d00\0\u1d3a\0\u1d74\0\u1dae\0\u1de8\0\u1e22"+
    "\0\u1e5c\0\u1e96\0\u1ed0\0\u1f0a\0\u1f44\0\u1f7e\0\u1fb8\0\u1ff2"+
    "\0\72\0\u202c\0\72\0\u2066\0\u20a0\0\u20da\0\u2114\0\u214e"+
    "\0\u2188\0\u21c2\0\u21fc\0\u2236\0\u2270\0\u22aa\0\u22e4\0\u231e"+
    "\0\72\0\u2358\0\u2392\0\72\0\u23cc\0\72\0\u2406\0\72"+
    "\0\u2440\0\u247a\0\u24b4\0\u24ee\0\u2528\0\u2562\0\u259c\0\72"+
    "\0\u25d6\0\u2610\0\u264a\0\u2684\0\u26be\0\u26f8\0\72\0\u2732"+
    "\0\u276c\0\u27a6\0\u27e0\0\u281a\0\72\0\u2854\0\u288e\0\u28c8"+
    "\0\u2902\0\u293c\0\u2976\0\72\0\u29b0\0\u29ea\0\u2a24\0\u2a5e"+
    "\0\72\0\u2a98\0\u2ad2\0\u2b0c\0\u2b46\0\u2b80\0\u2bba\0\u2bf4"+
    "\0\u2c2e\0\u2c68\0\u2ca2\0\u2cdc\0\u2d16\0\72\0\u2d50\0\u2d8a"+
    "\0\u2dc4\0\u2dfe\0\u2e38\0\72\0\u2e72\0\u2eac\0\u2ee6\0\u2f20"+
    "\0\72\0\72\0\72\0\72\0\u2f5a\0\72\0\72\0\u2f94"+
    "\0\u2fce\0\u3008\0\u3042\0\u307c\0\u30b6\0\72\0\u30f0\0\72"+
    "\0\u312a\0\u3164\0\u319e\0\u31d8\0\72\0\u3212\0\u324c\0\u3286"+
    "\0\u32c0\0\u32fa\0\u3334\0\u336e\0\72\0\u33a8\0\72\0\72"+
    "\0\u33e2\0\u341c\0\72\0\u3456\0\u3490\0\u34ca\0\u3504\0\u353e"+
    "\0\72\0\u3578\0\u35b2\0\u35ec\0\u3626\0\u3660\0\u369a\0\u36d4"+
    "\0\72\0\u370e\0\u3748\0\72\0\u3782\0\u37bc\0\u37f6\0\u3830"+
    "\0\72\0\u386a\0\72\0\u38a4\0\u38de\0\72\0\72\0\u3918"+
    "\0\u3952\0\u398c\0\u39c6\0\72\0\u3a00\0\72\0\72";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[319];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\5\1\2\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\4\2\10\4\1\2\1\14"+
    "\1\15\1\16\1\2\1\17\1\20\1\21\1\22\3\2"+
    "\1\23\1\24\1\25\1\2\1\26\1\27\1\30\1\31"+
    "\1\32\1\3\2\2\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\2\1\42\1\43\73\0\1\3\53\0"+
    "\1\3\16\0\1\4\1\44\14\0\10\4\42\0\4\45"+
    "\1\46\1\47\2\45\1\0\61\45\7\0\1\50\4\0"+
    "\2\50\1\51\13\0\23\50\1\0\2\50\47\0\1\52"+
    "\4\0\1\53\40\0\1\54\1\55\61\0\1\56\4\0"+
    "\1\56\3\0\2\56\3\0\10\56\2\0\23\56\1\0"+
    "\2\56\45\0\1\57\1\0\1\60\1\0\1\61\1\62"+
    "\40\0\1\63\75\0\1\64\22\0\1\65\72\0\1\66"+
    "\41\0\1\67\34\0\1\70\12\0\1\71\21\0\1\72"+
    "\22\0\1\73\76\0\1\74\1\75\70\0\1\76\65\0"+
    "\1\77\4\0\1\100\1\0\1\101\66\0\1\102\65\0"+
    "\1\103\1\0\1\104\71\0\1\105\67\0\1\106\71\0"+
    "\1\107\1\0\1\110\123\0\1\111\4\0\1\112\15\0"+
    "\10\112\42\0\4\45\1\113\1\47\2\45\1\0\61\45"+
    "\6\0\1\114\102\0\1\115\121\0\1\116\54\0\1\117"+
    "\37\0\10\54\1\120\61\54\12\55\1\121\57\55\2\0"+
    "\1\56\4\0\1\56\3\0\1\122\1\56\3\0\10\56"+
    "\2\0\23\56\1\0\2\56\46\0\1\123\102\0\1\124"+
    "\33\0\1\125\37\0\1\126\61\0\1\127\77\0\1\130"+
    "\70\0\1\131\74\0\1\132\4\0\1\133\64\0\1\134"+
    "\35\0\1\135\115\0\1\136\72\0\1\137\1\140\104\0"+
    "\1\141\56\0\1\142\43\0\1\143\121\0\1\144\35\0"+
    "\1\145\71\0\1\146\120\0\1\147\71\0\1\150\6\0"+
    "\1\151\33\0\1\152\22\0\1\153\74\0\1\154\100\0"+
    "\1\155\4\0\1\156\56\0\1\157\102\0\1\160\24\0"+
    "\1\161\15\0\1\162\1\0\1\163\1\164\1\0\1\165"+
    "\103\0\1\166\42\0\1\120\61\0\11\55\1\167\1\121"+
    "\57\55\35\0\1\170\76\0\1\171\64\0\1\172\71\0"+
    "\1\173\43\0\1\174\122\0\1\175\66\0\1\176\73\0"+
    "\1\177\67\0\1\200\74\0\1\201\4\0\1\202\75\0"+
    "\1\203\71\0\1\204\56\0\1\205\71\0\1\206\75\0"+
    "\1\207\72\0\1\210\72\0\1\211\40\0\1\212\127\0"+
    "\1\213\65\0\1\214\57\0\1\215\75\0\1\216\45\0"+
    "\1\217\41\0\1\220\51\0\1\221\77\0\1\222\75\0"+
    "\1\223\61\0\1\224\65\0\1\225\75\0\1\226\60\0"+
    "\1\227\63\0\4\227\50\0\1\227\15\0\10\227\64\0"+
    "\3\227\65\0\1\230\3\0\2\163\1\231\101\0\1\232"+
    "\71\0\1\233\76\0\1\234\64\0\1\235\100\0\1\236"+
    "\73\0\1\237\60\0\1\240\102\0\1\241\31\0\1\242"+
    "\123\0\1\243\70\0\1\244\73\0\1\245\67\0\1\246"+
    "\70\0\1\247\72\0\1\250\40\0\1\251\117\0\1\252"+
    "\71\0\1\253\66\0\1\254\11\0\1\255\1\0\1\256"+
    "\5\0\1\257\55\0\1\260\64\0\1\261\107\0\1\262"+
    "\27\0\1\263\132\0\1\264\3\0\1\265\55\0\1\266"+
    "\70\0\1\267\65\0\1\270\74\0\1\271\42\0\1\272"+
    "\112\0\1\273\62\0\1\227\5\0\1\227\66\0\3\227"+
    "\100\0\1\274\47\0\1\275\113\0\1\276\47\0\1\277"+
    "\113\0\1\300\72\0\1\301\42\0\1\302\122\0\1\303"+
    "\102\0\1\304\62\0\1\305\75\0\1\306\72\0\1\307"+
    "\57\0\1\310\100\0\1\311\57\0\1\312\52\0\1\313"+
    "\115\0\1\314\1\315\70\0\1\316\1\317\73\0\1\320"+
    "\62\0\1\321\73\0\1\322\101\0\1\323\73\0\1\324"+
    "\55\0\1\325\71\0\1\326\71\0\1\327\45\0\1\330"+
    "\115\0\1\331\51\0\1\332\127\0\1\333\26\0\1\334"+
    "\120\0\1\335\71\0\1\336\67\0\1\337\71\0\1\340"+
    "\74\0\1\341\72\0\1\342\65\0\1\343\75\0\1\344"+
    "\65\0\1\345\71\0\1\346\76\0\1\347\102\0\1\350"+
    "\67\0\1\351\61\0\1\352\73\0\1\353\37\0\1\354"+
    "\120\0\1\355\42\0\1\356\121\0\1\357\71\0\1\360"+
    "\75\0\1\361\64\0\1\362\104\0\1\363\27\0\1\364"+
    "\140\0\1\365\53\0\1\366\44\0\1\367\71\0\1\370"+
    "\122\0\1\371\63\0\1\372\77\0\1\373\70\0\1\374"+
    "\64\0\1\375\71\0\1\376\71\0\1\377\71\0\1\u0100"+
    "\70\0\1\u0101\71\0\1\u0102\43\0\1\u0103\124\0\1\u0104"+
    "\100\0\1\u0105\53\0\1\u0106\74\0\1\u0107\71\0\1\u0108"+
    "\70\0\1\u0109\67\0\1\u010a\74\0\1\u010b\75\0\1\u010c"+
    "\62\0\1\u010d\76\0\1\u010e\71\0\1\u010f\70\0\1\u0110"+
    "\45\0\1\u0111\65\0\1\u0112\127\0\1\u0113\73\0\1\u0114"+
    "\31\0\1\u0115\122\0\1\u0116\66\0\1\u0117\72\0\1\u0118"+
    "\65\0\1\u0119\76\0\1\u011a\71\0\1\u011b\73\0\1\u011c"+
    "\71\0\1\u011d\37\0\1\u011e\71\0\1\u011f\131\0\1\u0120"+
    "\57\0\1\u0121\72\0\1\u0122\70\0\1\u0123\73\0\1\u0124"+
    "\64\0\1\u0125\101\0\1\u0126\71\0\1\u0127\76\0\1\u0128"+
    "\65\0\1\u0129\64\0\1\u012a\66\0\1\u012b\45\0\1\u012c"+
    "\131\0\1\u012d\61\0\1\u012e\65\0\1\u012f\71\0\1\u0130"+
    "\75\0\1\u0131\65\0\1\u0132\102\0\1\u0133\63\0\1\u0134"+
    "\42\0\1\u0135\125\0\1\u0136\71\0\1\u0137\64\0\1\u0138"+
    "\70\0\1\u0139\103\0\1\u013a\62\0\1\u013b\75\0\1\u013c"+
    "\60\0\1\u013d\73\0\1\u013e\77\0\1\u013f\26\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14906];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\5\1\1\11\1\1\1\11\1\1\1\11"+
    "\16\1\6\11\1\1\2\11\2\0\1\11\5\0\1\1"+
    "\10\0\1\11\7\0\1\11\13\0\1\11\2\1\1\11"+
    "\1\0\1\11\1\0\1\1\1\0\1\1\5\0\1\11"+
    "\14\0\1\1\21\0\1\11\5\0\1\11\23\0\1\11"+
    "\3\0\1\11\5\0\1\1\1\0\1\1\13\0\1\11"+
    "\1\0\1\11\14\0\1\1\1\11\2\0\1\11\1\0"+
    "\1\11\1\0\1\11\7\0\1\11\6\0\1\11\5\0"+
    "\1\11\6\0\1\11\4\0\1\11\14\0\1\11\5\0"+
    "\1\11\4\0\4\11\1\0\2\11\1\1\5\0\1\11"+
    "\1\0\1\11\4\0\1\11\7\0\1\11\1\0\2\11"+
    "\2\0\1\11\5\0\1\11\7\0\1\11\2\0\1\11"+
    "\4\0\1\11\1\0\1\11\2\0\2\11\4\0\1\11"+
    "\1\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[319];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    //CODIGO DE JAVA
    public LinkedList<ErrorLenguaje> ErroresLexicos = new LinkedList<ErrorLenguaje>();


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Analizador_Lexico(java.io.Reader in) {
      yyline = 1;
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Analizador_Lexico(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 210) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 29: 
          { System.out.println("TOKEN: " + yytext());return new Symbol(sym.ROSI,yyline,yychar, yytext());
          }
        case 72: break;
        case 45: 
          { System.out.println("TOKEN: " + yytext());return new Symbol(sym.RREPETIR,yyline,yychar, yytext());
          }
        case 73: break;
        case 69: 
          { System.out.println("TOKEN: " + yytext());return new Symbol(sym.RCONPARAMETROS,yyline,yychar, yytext());
          }
        case 74: break;
        case 67: 
          { System.out.println("TOKEN: " + yytext());return new Symbol(sym.RMAYOROIGUAL,yyline,yychar,yytext());
          }
        case 75: break;
        case 62: 
          { System.out.println("TOKEN: " + yytext());return new Symbol(sym.RFINMETODO,yyline,yychar, yytext());
          }
        case 76: break;
        case 65: 
          { System.out.println("TOKEN: " + yytext());return new Symbol(sym.RESDIFERENTE,yyline,yychar,yytext());
          }
        case 77: break;
        case 57: 
          { System.out.println("TOKEN: " + yytext());return new Symbol(sym.POTENCIA,yyline,yychar, yytext());
          }
        case 78: break;
        case 70: 
          { System.out.println("TOKEN: " + yytext());return new Symbol(sym.RDELOCONTRARIO,yyline,yychar, yytext());
          }
        case 79: break;
        case 15: 
          { System.out.println("TOKEN: " + yytext());return new Symbol(sym.INTCIERRA,yyline,yychar, yytext());
          }
        case 80: break;
        case 12: 
          { System.out.println("TOKEN: " + yytext());return new Symbol(sym.CORIZQ,yyline,yychar, yytext());
          }
        case 81: break;
        case 63: 
          { System.out.println("TOKEN: " + yytext());return new Symbol(sym.RIMPRIMIRNL,yyline,yychar, yytext());
          }
        case 82: break;
        case 11: 
          { System.out.println("TOKEN: " + yytext());return new Symbol(sym.PARDER,yyline,yychar, yytext());
          }
        case 83: break;
        case 34: 
          { System.out.println("TOKEN: " + yytext());return new Symbol(sym.RSEGUN,yyline,yychar, yytext());
          }
        case 84: break;
        case 35: 
          { System.out.println("TOKEN: " + yytext());return new Symbol(sym.RFALSO,yyline,yychar,yytext());
          }
        case 85: break;
        case 66: 
          { System.out.println("TOKEN: " + yytext());return new Symbol(sym.RFINMIENTRAS,yyline,yychar, yytext());
          }
        case 86: break;
        case 52: 
          { System.out.println("TOKEN: " + yytext());return new Symbol(sym.REJECUTAR,yyline,yychar, yytext());
          }
        case 87: break;
        case 8: 
          { System.out.println("TOKEN: " + yytext());return new Symbol(sym.PTCOMA,yyline,yychar, yytext());
          }
        case 88: break;
        case 25: 
          { System.out.println("TOKEN: " + yytext());return new Symbol(sym.IDENTIFICADOR,yyline,yychar, yytext());
          }
        case 89: break;
        case 50: 
          { System.out.println("TOKEN: " + yytext());return new Symbol(sym.RENTONCES,yyline,yychar, yytext());
          }
        case 90: break;
        case 6: 
          { System.out.println("TOKEN: " + yytext());return new Symbol(sym.MULTIPLICACION,yyline,yychar, yytext());
          }
        case 91: break;
        case 60: 
          { System.out.println("TOKEN: " + yytext());return new Symbol(sym.RCONVALOR,yyline,yychar,yytext());
          }
        case 92: break;
        case 41: 
          { System.out.println("TOKEN: " + yytext());return new Symbol(sym.RINICIO,yyline,yychar,yytext());
          }
        case 93: break;
        case 71: 
          { System.out.println("TOKEN: " + yytext());return new Symbol(sym.RCONINCREMENTAL,yyline,yychar, yytext());
          }
        case 94: break;
        case 56: 
          { System.out.println("TOKEN: " + yytext());return new Symbol(sym.RCARACTER,yyline,yychar,yytext());
          }
        case 95: break;
        case 19: 
          { System.out.println("TOKEN: " + yytext());return new Symbol(sym.ROR,yyline,yychar,yytext());
          }
        case 96: break;
        case 59: 
          { System.out.println("TOKEN: " + yytext());return new Symbol(sym.RVERDADERO,yycolumn,yychar,yytext());
          }
        case 97: break;
        case 9: 
          { System.out.println("TOKEN: " + yytext());return new Symbol(sym.COMA,yyline,yychar, yytext());
          }
        case 98: break;
        case 48: 
          { System.out.println("TOKEN: " + yytext());return new Symbol(sym.RMIENTRAS,yyline,yychar, yytext());
          }
        case 99: break;
        case 13: 
          { System.out.println("TOKEN: " + yytext());return new Symbol(sym.CORDER,yyline,yychar, yytext());
          }
        case 100: break;
        case 16: 
          { System.out.println("TOKEN: " + yytext());return new Symbol(sym.SUMA,yyline,yychar, yytext());
          }
        case 101: break;
        case 39: 
          { System.out.println("TOKEN: " + yytext());return new Symbol(sym.MODU,yyline,yychar, yytext());
          }
        case 102: break;
        case 55: 
          { System.out.println("TOKEN: " + yytext());return new Symbol(sym.RFINPARA,yyline,yychar, yytext());
          }
        case 103: break;
        case 46: 
          { System.out.println("TOKEN: " + yytext());return new Symbol(sym.RFUNCION,yyline,yychar, yytext());
          }
        case 104: break;
        case 22: 
          { System.out.println("TOKEN: " + yytext());return new Symbol(sym.DECIMAL,yyline,yychar, yytext());
          }
        case 105: break;
        case 24: 
          { System.out.println("TOKEN: " + yytext());return new Symbol(sym.RNOT,yyline,yychar,yytext());
          }
        case 106: break;
        case 27: 
          { System.out.println("TOKEN: " + yytext());return new Symbol(sym.RFIN,yyline,yychar,yytext());
          }
        case 107: break;
        case 4: 
          { yychar=1;
          }
        case 108: break;
        case 54: 
          { System.out.println("TOKEN: " + yytext());return new Symbol(sym.RIMPRIMIR,yyline,yychar, yytext());
          }
        case 109: break;
        case 51: 
          { System.out.println("TOKEN: " + yytext());return new Symbol(sym.RESIGUAL,yyline,yychar,yytext());
          }
        case 110: break;
        case 68: 
          { System.out.println("TOKEN: " + yytext());return new Symbol(sym.RMENOROIGUAL,yyline,yychar,yytext());
          }
        case 111: break;
        case 42: 
          { System.out.println("TOKEN: " + yytext());return new Symbol(sym.RFINSI,yyline,yychar, yytext());
          }
        case 112: break;
        case 28: 
          { System.out.println("TOKEN: " + yytext());return new Symbol(sym.COMENTARIOML,yyline,yychar, yytext());
          }
        case 113: break;
        case 1: 
          { System.out.println("Este es un error lexico: "+yytext()+
    ", en la linea: "+yyline+", en la columna: "+yychar);
    ErroresLexicos.add(new ErrorLenguaje("Lexico","El caracter " + yytext()+ "no es válido en el lenguaje", yyline,yychar));
          }
        case 114: break;
        case 43: 
          { System.out.println("TOKEN: " + yytext());return new Symbol(sym.RCADENA,yyline,yychar,yytext());
          }
        case 115: break;
        case 31: 
          { System.out.println("TOKEN: " + yytext());return new Symbol(sym.RPARA,yyline,yychar, yytext());
          }
        case 116: break;
        case 64: 
          { System.out.println("TOKEN: " + yytext());return new Symbol(sym.RFINFUNCION,yyline,yychar, yytext());
          }
        case 117: break;
        case 32: 
          { System.out.println("TOKEN: " + yytext());return new Symbol(sym.RMAYOR,yyline,yychar,yytext());
          }
        case 118: break;
        case 40: 
          { System.out.println("TOKEN: " + yytext());return new Symbol(sym.RMETODO,yyline,yychar, yytext());
          }
        case 119: break;
        case 3: 
          { System.out.println("TOKEN: " + yytext());return new Symbol(sym.ENTERO,yyline,yychar, yytext());
          }
        case 120: break;
        case 18: 
          { System.out.println("TOKEN: " + yytext());return new Symbol(sym.COMENTARIOL,yyline,yychar, yytext());
          }
        case 121: break;
        case 53: 
          { System.out.println("TOKEN: " + yytext());return new Symbol(sym.RINGRESAR,yyline,yychar,yytext());
          }
        case 122: break;
        case 58: 
          { System.out.println("TOKEN: " + yytext());return new Symbol(sym.RFINSEGUN,yyline,yychar, yytext());
          }
        case 123: break;
        case 26: 
          { System.out.println("TOKEN: " + yytext());return new Symbol(sym.RAND,yyline,yychar,yytext());
          }
        case 124: break;
        case 23: 
          { System.out.println("TOKEN: " + yytext());return new Symbol(sym.CARACTER,yyline,yychar, yytext());
          }
        case 125: break;
        case 20: 
          { System.out.println("TOKEN: " + yytext());return new Symbol(sym.RSI,yyline,yychar, yytext());
          }
        case 126: break;
        case 37: 
          { System.out.println("TOKEN: " + yytext());return new Symbol(sym.RHACER,yyline,yychar, yytext());
          }
        case 127: break;
        case 36: 
          { System.out.println("TOKEN: " + yytext());return new Symbol(sym.RHASTA,yyline,yychar, yytext());
          }
        case 128: break;
        case 14: 
          { System.out.println("TOKEN: " + yytext());return new Symbol(sym.RESTA,yyline,yychar, yytext());
          }
        case 129: break;
        case 61: 
          { System.out.println("TOKEN: " + yytext());return new Symbol(sym.RHASTAQUE,yyline,yychar, yytext());
          }
        case 130: break;
        case 7: 
          { System.out.println("TOKEN: " + yytext());return new Symbol(sym.INTABRE,yyline,yychar, yytext());
          }
        case 131: break;
        case 49: 
          { System.out.println("TOKEN: " + yytext());return new Symbol(sym.RRETORNAR,yyline,yychar, yytext());
          }
        case 132: break;
        case 44: 
          { System.out.println("TOKEN: " + yytext());return new Symbol(sym.CARASCCI,yyline,yychar, yytext());
          }
        case 133: break;
        case 21: 
          { System.out.println("TOKEN: " + yytext());return new Symbol(sym.FLECHA,yyline,yychar, yytext());
          }
        case 134: break;
        case 10: 
          { System.out.println("TOKEN: " + yytext());return new Symbol(sym.PARIZQ,yyline,yychar, yytext());
          }
        case 135: break;
        case 47: 
          { System.out.println("TOKEN: " + yytext());return new Symbol(sym.RBOOLEAN,yyline,yychar,yytext());
          }
        case 136: break;
        case 33: 
          { System.out.println("TOKEN: " + yytext());return new Symbol(sym.RMENOR,yyline,yychar,yytext());
          }
        case 137: break;
        case 5: 
          { System.out.println("TOKEN: " + yytext());return new Symbol(sym.DIVIDIR,yyline,yychar, yytext());
          }
        case 138: break;
        case 17: 
          { System.out.println("TOKEN: " + yytext());return new Symbol(sym.CADENA,yyline,yychar, yytext());
          }
        case 139: break;
        case 30: 
          { System.out.println("TOKEN: " + yytext());return new Symbol(sym.RCOMO,yyline,yychar,yytext());
          }
        case 140: break;
        case 38: 
          { System.out.println("TOKEN: " + yytext());return new Symbol(sym.RNUMERO,yyline,yychar,yytext());
          }
        case 141: break;
        case 2: 
          { 
          }
        case 142: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
