/* The following code was generated by JFlex 1.4.1 on 29/8/22 4:07 */

/*------------------------- Codigo de Usuario --------------------------------*/
//------------>Paquetes, importaciones
package analizadores;
import java.io.*;
import javax.swing.text.Segment;
import org.fife.ui.rsyntaxtextarea.*;  
import java_cup.runtime.*;
import java.util.LinkedList;
import Clases.ErrorLenguaje;

/*------------------------- Opciones y Declaraciones ------------------------*/


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 29/8/22 4:07 from the specification file
 * <tt>A_Lexico.jflex</tt>
 */
public class Analizador_Lexico extends AbstractJFlexCTokenMaker implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\10\2\0\1\1\22\0\1\54\1\0\1\4\1\0"+
    "\1\16\2\0\1\6\1\61\1\62\1\12\1\72\1\60\1\65\1\3"+
    "\1\11\1\24\1\25\1\26\1\2\1\27\1\21\1\20\2\22\1\23"+
    "\1\0\1\57\2\0\1\66\1\71\1\0\1\32\1\51\1\50\1\44"+
    "\1\36\1\45\1\40\1\52\1\37\1\56\1\14\1\42\1\31\1\7"+
    "\1\34\1\53\1\55\1\35\1\43\1\46\1\41\1\47\2\14\1\33"+
    "\1\14\1\63\1\5\1\64\1\0\1\13\1\0\1\32\1\51\1\50"+
    "\1\44\1\36\1\45\1\40\1\52\1\37\1\56\1\14\1\42\1\31"+
    "\1\7\1\34\1\53\1\55\1\35\1\43\1\46\1\41\1\47\2\14"+
    "\1\33\1\14\1\17\1\0\1\30\63\0\1\15\15\0\1\70\2\0"+
    "\1\67\1\15\36\0\1\67\u1f35\0\1\15\udfe7\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\3\1\1\4\1\5\1\6"+
    "\17\1\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\1\1\16\1\17\2\0\1\20\5\0\1\21\10\0"+
    "\1\22\7\0\1\23\13\0\1\24\1\25\1\26\1\27"+
    "\1\0\1\30\1\0\1\21\1\0\1\31\1\0\1\32"+
    "\3\0\1\33\14\0\1\34\21\0\1\35\4\0\1\36"+
    "\23\0\1\37\3\0\1\40\5\0\1\41\1\42\13\0"+
    "\1\43\1\0\1\44\14\0\1\45\1\46\2\0\1\47"+
    "\2\0\1\50\7\0\1\51\6\0\1\52\5\0\1\53"+
    "\6\0\1\54\4\0\1\55\14\0\1\56\5\0\1\57"+
    "\4\0\1\60\1\61\1\62\1\63\1\0\1\64\1\65"+
    "\1\66\5\0\1\67\1\0\1\70\4\0\1\71\7\0"+
    "\1\72\1\0\1\73\1\74\2\0\1\75\5\0\1\76"+
    "\7\0\1\77\2\0\1\100\4\0\1\101\1\0\1\102"+
    "\2\0\1\103\1\104\4\0\1\105\1\0\1\106\1\107";

  private static int [] zzUnpackAction() {
    int [] result = new int[316];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\u0127\0\u0162\0\73"+
    "\0\u019d\0\73\0\u01d8\0\u0213\0\u024e\0\u0289\0\u02c4\0\u02ff"+
    "\0\u033a\0\u0375\0\u03b0\0\u03eb\0\u0426\0\u0461\0\u049c\0\u04d7"+
    "\0\u0512\0\73\0\73\0\73\0\73\0\73\0\73\0\u054d"+
    "\0\u0588\0\73\0\73\0\u05c3\0\354\0\73\0\u05fe\0\u0639"+
    "\0\u0674\0\u06af\0\u06ea\0\u0725\0\u0760\0\u079b\0\u07d6\0\u0811"+
    "\0\u084c\0\u0887\0\u08c2\0\u08fd\0\73\0\u0938\0\u0973\0\u09ae"+
    "\0\u09e9\0\u0a24\0\u0a5f\0\u0a9a\0\73\0\u0ad5\0\u0b10\0\u0b4b"+
    "\0\u0b86\0\u0bc1\0\u0bfc\0\u0c37\0\u0c72\0\u0cad\0\u0ce8\0\u0d23"+
    "\0\73\0\73\0\u05c3\0\73\0\u0d5e\0\73\0\u0d99\0\u0dd4"+
    "\0\u0e0f\0\73\0\u0e4a\0\73\0\u0e85\0\u0ec0\0\u0efb\0\73"+
    "\0\u0f36\0\u0f71\0\u0fac\0\u0fe7\0\u1022\0\u105d\0\u1098\0\u10d3"+
    "\0\u110e\0\u1149\0\u1184\0\u11bf\0\u11fa\0\u1235\0\u1270\0\u12ab"+
    "\0\u12e6\0\u1321\0\u135c\0\u1397\0\u13d2\0\u140d\0\u1448\0\u1483"+
    "\0\u14be\0\u14f9\0\u1534\0\u156f\0\u15aa\0\u15e5\0\73\0\u1620"+
    "\0\u165b\0\u1696\0\u16d1\0\73\0\u170c\0\u1747\0\u1782\0\u17bd"+
    "\0\u17f8\0\u1833\0\u186e\0\u18a9\0\u18e4\0\u191f\0\u195a\0\u1995"+
    "\0\u19d0\0\u1a0b\0\u1a46\0\u1a81\0\u1abc\0\u1af7\0\u1b32\0\73"+
    "\0\u1b6d\0\u1ba8\0\u1be3\0\73\0\u1c1e\0\u1c59\0\u1c94\0\u1ccf"+
    "\0\u1d0a\0\u1d45\0\u1d80\0\u1dbb\0\u1df6\0\u1e31\0\u1e6c\0\u1ea7"+
    "\0\u1ee2\0\u1f1d\0\u1f58\0\u1f93\0\u1fce\0\u2009\0\73\0\u2044"+
    "\0\73\0\u207f\0\u20ba\0\u20f5\0\u2130\0\u216b\0\u21a6\0\u21e1"+
    "\0\u221c\0\u2257\0\u2292\0\u22cd\0\u2308\0\u2343\0\73\0\u237e"+
    "\0\u23b9\0\73\0\u23f4\0\u242f\0\73\0\u246a\0\u24a5\0\u24e0"+
    "\0\u251b\0\u2556\0\u2591\0\u25cc\0\73\0\u2607\0\u2642\0\u267d"+
    "\0\u26b8\0\u26f3\0\u272e\0\73\0\u2769\0\u27a4\0\u27df\0\u281a"+
    "\0\u2855\0\73\0\u2890\0\u28cb\0\u2906\0\u2941\0\u297c\0\u29b7"+
    "\0\73\0\u29f2\0\u2a2d\0\u2a68\0\u2aa3\0\73\0\u2ade\0\u2b19"+
    "\0\u2b54\0\u2b8f\0\u2bca\0\u2c05\0\u2c40\0\u2c7b\0\u2cb6\0\u2cf1"+
    "\0\u2d2c\0\u2d67\0\73\0\u2da2\0\u2ddd\0\u2e18\0\u2e53\0\u2e8e"+
    "\0\73\0\u2ec9\0\u2f04\0\u2f3f\0\u2f7a\0\73\0\73\0\73"+
    "\0\73\0\u2fb5\0\73\0\73\0\u2ff0\0\u302b\0\u3066\0\u30a1"+
    "\0\u30dc\0\u3117\0\73\0\u3152\0\73\0\u318d\0\u31c8\0\u3203"+
    "\0\u323e\0\73\0\u3279\0\u32b4\0\u32ef\0\u332a\0\u3365\0\u33a0"+
    "\0\u33db\0\73\0\u3416\0\73\0\73\0\u3451\0\u348c\0\73"+
    "\0\u34c7\0\u3502\0\u353d\0\u3578\0\u35b3\0\73\0\u35ee\0\u3629"+
    "\0\u3664\0\u369f\0\u36da\0\u3715\0\u3750\0\73\0\u378b\0\u37c6"+
    "\0\73\0\u3801\0\u383c\0\u3877\0\u38b2\0\73\0\u38ed\0\73"+
    "\0\u3928\0\u3963\0\73\0\73\0\u399e\0\u39d9\0\u3a14\0\u3a4f"+
    "\0\73\0\u3a8a\0\73\0\73";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[316];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\5\1\2\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\4\2\10\4\1\2\1\14"+
    "\1\15\1\2\1\16\1\17\1\20\1\21\3\2\1\22"+
    "\1\23\1\24\1\2\1\25\1\26\1\27\1\30\1\31"+
    "\1\3\2\2\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\2\1\41\1\2\1\42\1\43\74\0\1\3"+
    "\52\0\1\3\20\0\1\4\1\44\14\0\10\4\43\0"+
    "\4\45\1\46\1\47\2\45\1\0\62\45\7\0\1\50"+
    "\4\0\2\50\1\51\12\0\23\50\1\0\2\50\50\0"+
    "\1\52\4\0\1\53\42\0\1\54\1\55\62\0\1\56"+
    "\4\0\1\56\4\0\1\56\3\0\10\56\1\0\23\56"+
    "\1\0\2\56\46\0\1\57\1\0\1\60\1\0\1\61"+
    "\1\62\42\0\1\63\76\0\1\64\21\0\1\65\73\0"+
    "\1\66\43\0\1\67\33\0\1\70\12\0\1\71\23\0"+
    "\1\72\21\0\1\73\77\0\1\74\1\75\71\0\1\76"+
    "\66\0\1\77\4\0\1\100\1\0\1\101\67\0\1\102"+
    "\66\0\1\103\1\0\1\104\72\0\1\105\70\0\1\106"+
    "\72\0\1\107\1\0\1\110\124\0\1\111\74\0\1\112"+
    "\4\0\1\113\15\0\10\113\47\0\1\45\1\0\2\45"+
    "\71\0\1\114\103\0\1\115\121\0\1\116\55\0\1\117"+
    "\41\0\10\54\1\120\62\54\12\55\1\121\60\55\2\0"+
    "\1\56\4\0\1\56\3\0\1\122\1\56\3\0\10\56"+
    "\1\0\23\56\1\0\2\56\47\0\1\123\103\0\1\124"+
    "\35\0\1\125\36\0\1\126\62\0\1\127\100\0\1\130"+
    "\71\0\1\131\75\0\1\132\4\0\1\133\65\0\1\134"+
    "\37\0\1\135\115\0\1\136\73\0\1\137\1\140\105\0"+
    "\1\141\57\0\1\142\45\0\1\143\121\0\1\144\37\0"+
    "\1\145\72\0\1\146\120\0\1\147\72\0\1\150\6\0"+
    "\1\151\35\0\1\152\21\0\1\153\75\0\1\154\101\0"+
    "\1\155\4\0\1\156\57\0\1\157\103\0\1\160\26\0"+
    "\1\161\15\0\1\162\1\0\1\163\1\164\1\0\1\165"+
    "\103\0\1\166\44\0\1\120\73\0\1\167\115\0\1\170"+
    "\72\0\1\171\72\0\1\172\45\0\1\173\122\0\1\174"+
    "\67\0\1\175\74\0\1\176\70\0\1\177\75\0\1\200"+
    "\4\0\1\201\76\0\1\202\72\0\1\203\57\0\1\204"+
    "\72\0\1\205\76\0\1\206\73\0\1\207\73\0\1\210"+
    "\42\0\1\211\127\0\1\212\66\0\1\213\60\0\1\214"+
    "\76\0\1\215\47\0\1\216\40\0\1\217\52\0\1\220"+
    "\100\0\1\221\76\0\1\222\62\0\1\223\66\0\1\224"+
    "\76\0\1\225\62\0\1\226\64\0\4\226\51\0\1\226"+
    "\15\0\10\226\65\0\3\226\66\0\1\227\3\0\2\163"+
    "\1\230\101\0\1\231\72\0\1\232\72\0\1\233\101\0"+
    "\1\234\74\0\1\235\61\0\1\236\103\0\1\237\33\0"+
    "\1\240\123\0\1\241\71\0\1\242\74\0\1\243\70\0"+
    "\1\244\71\0\1\245\73\0\1\246\42\0\1\247\117\0"+
    "\1\250\72\0\1\251\67\0\1\252\11\0\1\253\1\0"+
    "\1\254\5\0\1\255\56\0\1\256\65\0\1\257\110\0"+
    "\1\260\31\0\1\261\132\0\1\262\3\0\1\263\56\0"+
    "\1\264\71\0\1\265\66\0\1\266\75\0\1\267\44\0"+
    "\1\270\113\0\1\271\63\0\1\226\5\0\1\226\67\0"+
    "\3\226\100\0\1\272\51\0\1\273\72\0\1\274\113\0"+
    "\1\275\73\0\1\276\44\0\1\277\122\0\1\300\103\0"+
    "\1\301\63\0\1\302\76\0\1\303\73\0\1\304\60\0"+
    "\1\305\101\0\1\306\60\0\1\307\54\0\1\310\115\0"+
    "\1\311\1\312\71\0\1\313\1\314\74\0\1\315\63\0"+
    "\1\316\74\0\1\317\102\0\1\320\74\0\1\321\56\0"+
    "\1\322\72\0\1\323\72\0\1\324\47\0\1\325\115\0"+
    "\1\326\53\0\1\327\127\0\1\330\30\0\1\331\120\0"+
    "\1\332\72\0\1\333\70\0\1\334\72\0\1\335\75\0"+
    "\1\336\73\0\1\337\66\0\1\340\76\0\1\341\66\0"+
    "\1\342\72\0\1\343\77\0\1\344\103\0\1\345\70\0"+
    "\1\346\62\0\1\347\74\0\1\350\41\0\1\351\120\0"+
    "\1\352\44\0\1\353\121\0\1\354\72\0\1\355\76\0"+
    "\1\356\65\0\1\357\105\0\1\360\31\0\1\361\140\0"+
    "\1\362\54\0\1\363\46\0\1\364\72\0\1\365\122\0"+
    "\1\366\64\0\1\367\100\0\1\370\71\0\1\371\65\0"+
    "\1\372\72\0\1\373\72\0\1\374\72\0\1\375\71\0"+
    "\1\376\72\0\1\377\45\0\1\u0100\124\0\1\u0101\101\0"+
    "\1\u0102\54\0\1\u0103\75\0\1\u0104\72\0\1\u0105\71\0"+
    "\1\u0106\70\0\1\u0107\75\0\1\u0108\76\0\1\u0109\63\0"+
    "\1\u010a\77\0\1\u010b\72\0\1\u010c\71\0\1\u010d\47\0"+
    "\1\u010e\66\0\1\u010f\127\0\1\u0110\74\0\1\u0111\33\0"+
    "\1\u0112\122\0\1\u0113\67\0\1\u0114\73\0\1\u0115\66\0"+
    "\1\u0116\77\0\1\u0117\72\0\1\u0118\74\0\1\u0119\72\0"+
    "\1\u011a\41\0\1\u011b\72\0\1\u011c\131\0\1\u011d\60\0"+
    "\1\u011e\73\0\1\u011f\71\0\1\u0120\74\0\1\u0121\65\0"+
    "\1\u0122\102\0\1\u0123\72\0\1\u0124\77\0\1\u0125\66\0"+
    "\1\u0126\65\0\1\u0127\67\0\1\u0128\47\0\1\u0129\131\0"+
    "\1\u012a\62\0\1\u012b\66\0\1\u012c\72\0\1\u012d\76\0"+
    "\1\u012e\66\0\1\u012f\103\0\1\u0130\64\0\1\u0131\44\0"+
    "\1\u0132\125\0\1\u0133\72\0\1\u0134\65\0\1\u0135\71\0"+
    "\1\u0136\104\0\1\u0137\63\0\1\u0138\76\0\1\u0139\61\0"+
    "\1\u013a\74\0\1\u013b\100\0\1\u013c\30\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15045];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\5\1\1\11\1\1\1\11\17\1\6\11"+
    "\2\1\2\11\2\0\1\11\5\0\1\1\10\0\1\11"+
    "\7\0\1\11\13\0\2\11\1\1\1\11\1\0\1\11"+
    "\1\0\1\1\1\0\1\11\1\0\1\11\3\0\1\11"+
    "\14\0\1\1\21\0\1\11\4\0\1\11\23\0\1\11"+
    "\3\0\1\11\5\0\2\1\13\0\1\11\1\0\1\11"+
    "\14\0\1\1\1\11\2\0\1\11\2\0\1\11\7\0"+
    "\1\11\6\0\1\11\5\0\1\11\6\0\1\11\4\0"+
    "\1\11\14\0\1\11\5\0\1\11\4\0\4\11\1\0"+
    "\2\11\1\1\5\0\1\11\1\0\1\11\4\0\1\11"+
    "\7\0\1\11\1\0\2\11\2\0\1\11\5\0\1\11"+
    "\7\0\1\11\2\0\1\11\4\0\1\11\1\0\1\11"+
    "\2\0\2\11\4\0\1\11\1\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[316];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    //CODIGO DE JAVA
    public LinkedList<ErrorLenguaje> ErroresLexicos = new LinkedList<ErrorLenguaje>();
/**   
    * Constructor.  This must be here because JFlex does not generate a   
    * no-parameter constructor.   
    */   
   public ExampleTokenMaker() {   
   }   
   
   /**   
    * Adds the token specified to the current linked list of tokens.   
    *   
    * @param tokenType The token's type.   
    * @see #addToken(int, int, int)   
    */   
   private void addHyperlinkToken(int start, int end, int tokenType) {   
      int so = start + offsetShift;   
      addToken(zzBuffer, start,end, tokenType, so, true);   
   }   
   
   /**   
    * Adds the token specified to the current linked list of tokens.   
    *   
    * @param tokenType The token's type.   
    */   
   private void addToken(int tokenType) {   
      addToken(zzStartRead, zzMarkedPos-1, tokenType);   
   }   
   
   /**   
    * Adds the token specified to the current linked list of tokens.   
    *   
    * @param tokenType The token's type.   
    * @see #addHyperlinkToken(int, int, int)   
    */   
   private void addToken(int start, int end, int tokenType) {   
      int so = start + offsetShift;   
      addToken(zzBuffer, start,end, tokenType, so, false);   
   }   
   
   /**   
    * Adds the token specified to the current linked list of tokens.   
    *   
    * @param array The character array.   
    * @param start The starting offset in the array.   
    * @param end The ending offset in the array.   
    * @param tokenType The token's type.   
    * @param startOffset The offset in the document at which this token   
    *        occurs.   
    * @param hyperlink Whether this token is a hyperlink.   
    */   
   public void addToken(char[] array, int start, int end, int tokenType,   
                  int startOffset, boolean hyperlink) {   
      super.addToken(array, start,end, tokenType, startOffset, hyperlink);   
      zzStartRead = zzMarkedPos;   
   }   
   
   /**   
    * Returns the text to place at the beginning and end of a   
    * line to "comment" it in a this programming language.   
    *   
    * @return The start and end strings to add to a line to "comment"   
    *         it out.   
    */   
   public String[] getLineCommentStartAndEnd() {   
      return new String[] { "//", null };   
   }   
   
   /**   
    * Returns the first token in the linked list of tokens generated   
    * from <code>text</code>.  This method must be implemented by   
    * subclasses so they can correctly implement syntax highlighting.   
    *   
    * @param text The text from which to get tokens.   
    * @param initialTokenType The token type we should start with.   
    * @param startOffset The offset into the document at which   
    *        <code>text</code> starts.   
    * @return The first <code>Token</code> in a linked list representing   
    *         the syntax highlighted text.   
    */   
   public Token getTokenList(Segment text, int initialTokenType, int startOffset) {   
   
      resetTokenList();   
      this.offsetShift = -text.offset + startOffset;   
   
      // Start off in the proper state.   
      int state = Token.NULL;   
      switch (initialTokenType) {   
                  case Token.COMMENT_MULTILINE:   
            state = MLC;   
            start = text.offset;   
            break;   
   
         /* No documentation comments */   
         default:   
            state = Token.NULL;   
      }   
   
      s = text;   
      try {   
         yyreset(zzReader);   
         yybegin(state);   
         return yylex();   
      } catch (IOException ioe) {   
         ioe.printStackTrace();   
         return new TokenImpl();   
      }   
   
   }   
   
   /**   
    * Refills the input buffer.   
    *   
    * @return      <code>true</code> if EOF was reached, otherwise   
    *              <code>false</code>.   
    */   
   private boolean zzRefill() {   
      return zzCurrentPos>=s.offset+s.count;   
   }   
   
   /**   
    * Resets the scanner to read from a new input stream.   
    * Does not close the old reader.   
    *   
    * All internal variables are reset, the old input stream    
    * <b>cannot</b> be reused (internal buffer is discarded and lost).   
    * Lexical state is set to <tt>YY_INITIAL</tt>.   
    *   
    * @param reader   the new input stream    
    */   
   public final void yyreset(Reader reader) {   
      // 's' has been updated.   
      zzBuffer = s.array;   
      /*   
       * We replaced the line below with the two below it because zzRefill   
       * no longer "refills" the buffer (since the way we do it, it's always   
       * "full" the first time through, since it points to the segment's   
       * array).  So, we assign zzEndRead here.   
       */   
      //zzStartRead = zzEndRead = s.offset;   
      zzStartRead = s.offset;   
      zzEndRead = zzStartRead + s.count - 1;   
      zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;   
      zzLexicalState = YYINITIAL;   
      zzReader = reader;   
      zzAtBOL  = true;   
      zzAtEOF  = false;   
   }   
   


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Analizador_Lexico(java.io.Reader in) {
      yyline = 1;
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Analizador_Lexico(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 214) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 54: 
          { addToken(Token.RESERVED_WORD); System.out.println("TOKEN: " + yytext());return new Symbol(sym.RIMPRIMIR,yyline,yychar, yytext());
          }
        case 72: break;
        case 46: 
          { addToken(Token.FUNCTION); System.out.println("TOKEN: " + yytext());return new Symbol(sym.RFUNCION,yyline,yychar, yytext());
          }
        case 73: break;
        case 17: 
          { addToken(Token.COMENTARIO);System.out.println("COMENTARIOL: " + yytext());
          }
        case 74: break;
        case 21: 
          { addToken(Token.OPERATOR); System.out.println("TOKEN: " + yytext());return new Symbol(sym.INTABRE,yyline,yychar, yytext());
          }
        case 75: break;
        case 36: 
          { addToken(Token.RESERVED_WORD); System.out.println("TOKEN: " + yytext());return new Symbol(sym.RFALSO,yyline,yychar,yytext());
          }
        case 76: break;
        case 26: 
          { addToken(Token.OPERATOR); System.out.println("TOKEN: " + yytext());return new Symbol(sym.MODU,yyline,yychar, yytext());
          }
        case 77: break;
        case 8: 
          { addToken(Token.OPERATOR); System.out.println("TOKEN: " + yytext());return new Symbol(sym.COMA,yyline,yychar, yytext());
          }
        case 78: break;
        case 3: 
          { addToken(Token.DIGITO);System.out.println("TOKEN: " + yytext());return new Symbol(sym.ENTERO,yyline,yychar, yytext());
          }
        case 79: break;
        case 15: 
          { addToken(Token.OPERATOR); System.out.println("TOKEN: " + yytext());return new Symbol(sym.SUMA,yyline,yychar, yytext());
          }
        case 80: break;
        case 66: 
          { addToken(Token.RESERVED_WORD); System.out.println("TOKEN: " + yytext());return new Symbol(sym.RFINMIENTRAS,yyline,yychar, yytext());
          }
        case 81: break;
        case 5: 
          { addToken(Token.OPERATOR); System.out.println("TOKEN: " + yytext());return new Symbol(sym.DIVIDIR,yyline,yychar, yytext());
          }
        case 82: break;
        case 16: 
          { addToken(Token.CADENA);System.out.println("TOKEN: " + yytext());return new Symbol(sym.CADENA,yyline,yychar, yytext());
          }
        case 83: break;
        case 57: 
          { addToken(Token.OPERATOR); System.out.println("TOKEN: " + yytext());return new Symbol(sym.POTENCIA,yyline,yychar, yytext());
          }
        case 84: break;
        case 22: 
          { addToken(Token.DIGITO);System.out.println("TOKEN: " + yytext());return new Symbol(sym.DECIMAL,yyline,yychar, yytext());
          }
        case 85: break;
        case 45: 
          { addToken(Token.RESERVED_WORD); System.out.println("TOKEN: " + yytext());return new Symbol(sym.RREPETIR,yyline,yychar, yytext());
          }
        case 86: break;
        case 23: 
          { addToken(Token.CAR);System.out.println("TOKEN: " + yytext());return new Symbol(sym.CARACTER,yyline,yychar, yytext());
          }
        case 87: break;
        case 47: 
          { addToken(Token.DATA_TYPE); System.out.println("TOKEN: " + yytext());return new Symbol(sym.RBOOLEAN,yyline,yychar,yytext());
          }
        case 88: break;
        case 14: 
          { addToken(Token.OPERATOR); System.out.println("TOKEN: " + yytext());return new Symbol(sym.INTCIERRA,yyline,yychar, yytext());
          }
        case 89: break;
        case 58: 
          { addToken(Token.RESERVED_WORD); System.out.println("TOKEN: " + yytext());return new Symbol(sym.RFINSEGUN,yyline,yychar, yytext());
          }
        case 90: break;
        case 44: 
          { addToken(Token.CAR);System.out.println("TOKEN: " + yytext());return new Symbol(sym.CARASCCI,yyline,yychar, yytext());
          }
        case 91: break;
        case 61: 
          { addToken(Token.RESERVED_WORD); System.out.println("TOKEN: " + yytext());return new Symbol(sym.RHASTAQUE,yyline,yychar, yytext());
          }
        case 92: break;
        case 28: 
          { addToken(Token.RESERVED_WORD); System.out.println("TOKEN: " + yytext());return new Symbol(sym.RFIN,yyline,yychar,yytext());
          }
        case 93: break;
        case 20: 
          { addToken(Token.OPERATOR); System.out.println("TOKEN: " + yytext());return new Symbol(sym.FLECHA,yyline,yychar, yytext());
          }
        case 94: break;
        case 9: 
          { addToken(Token.OPERATOR); System.out.println("TOKEN: " + yytext());return new Symbol(sym.PARIZQ,yyline,yychar, yytext());
          }
        case 95: break;
        case 24: 
          { addToken(Token.RESERVED_WORD); System.out.println("TOKEN: " + yytext());return new Symbol(sym.RNOT,yyline,yychar,yytext());
          }
        case 96: break;
        case 35: 
          { addToken(Token.RESERVED_WORD); System.out.println("TOKEN: " + yytext());return new Symbol(sym.RSEGUN,yyline,yychar, yytext());
          }
        case 97: break;
        case 31: 
          { addToken(Token.RESERVED_WORD); System.out.println("TOKEN: " + yytext());return new Symbol(sym.RCOMO,yyline,yychar,yytext());
          }
        case 98: break;
        case 67: 
          { addToken(Token.RESERVED_WORD); System.out.println("TOKEN: " + yytext());return new Symbol(sym.RMAYOROIGUAL,yyline,yychar,yytext());
          }
        case 99: break;
        case 56: 
          { addToken(Token.DATA_TYPE); System.out.println("TOKEN: " + yytext());return new Symbol(sym.RCARACTER,yyline,yychar,yytext());
          }
        case 100: break;
        case 40: 
          { addToken(Token.FUNCTION); System.out.println("TOKEN: " + yytext());return new Symbol(sym.RMETODO,yyline,yychar, yytext());
          }
        case 101: break;
        case 30: 
          { addToken(Token.RESERVED_WORD); System.out.println("TOKEN: " + yytext());return new Symbol(sym.ROSI,yyline,yychar, yytext());
          }
        case 102: break;
        case 60: 
          { addToken(Token.RESERVED_WORD); System.out.println("TOKEN: " + yytext());return new Symbol(sym.RCONVALOR,yyline,yychar,yytext());
          }
        case 103: break;
        case 18: 
          { addToken(Token.RESERVED_WORD); System.out.println("TOKEN: " + yytext());return new Symbol(sym.ROR,yyline,yychar,yytext());
          }
        case 104: break;
        case 65: 
          { addToken(Token.RESERVED_WORD); System.out.println("TOKEN: " + yytext());return new Symbol(sym.RESDIFERENTE,yyline,yychar,yytext());
          }
        case 105: break;
        case 63: 
          { addToken(Token.RESERVED_WORD); System.out.println("TOKEN: " + yytext());return new Symbol(sym.RIMPRIMIRNL,yyline,yychar, yytext());
          }
        case 106: break;
        case 70: 
          { addToken(Token.RESERVED_WORD); System.out.println("TOKEN: " + yytext());return new Symbol(sym.RDELOCONTRARIO,yyline,yychar, yytext());
          }
        case 107: break;
        case 41: 
          { addToken(Token.RESERVED_WORD); System.out.println("TOKEN: " + yytext());return new Symbol(sym.RINICIO,yyline,yychar,yytext());
          }
        case 108: break;
        case 51: 
          { addToken(Token.RESERVED_WORD); System.out.println("TOKEN: " + yytext());return new Symbol(sym.RESIGUAL,yyline,yychar,yytext());
          }
        case 109: break;
        case 4: 
          { yychar=1;
          }
        case 110: break;
        case 62: 
          { addToken(Token.FUNCTION); System.out.println("TOKEN: " + yytext());return new Symbol(sym.RFINMETODO,yyline,yychar, yytext());
          }
        case 111: break;
        case 71: 
          { addToken(Token.RESERVED_WORD); System.out.println("TOKEN: " + yytext());return new Symbol(sym.RCONINCREMENTAL,yyline,yychar, yytext());
          }
        case 112: break;
        case 43: 
          { addToken(Token.DATA_TYPE); System.out.println("TOKEN: " + yytext());return new Symbol(sym.RCADENA,yyline,yychar,yytext());
          }
        case 113: break;
        case 1: 
          { System.out.println("Este es un error lexico: "+yytext()+
    ", en la linea: "+yyline+", en la columna: "+yychar);
    ErroresLexicos.add(new ErrorLenguaje("Lexico","El caracter " + yytext()+ "no es válido en el lenguaje", yyline,yychar));
          }
        case 114: break;
        case 11: 
          { addToken(Token.OPERATOR); System.out.println("TOKEN: " + yytext());return new Symbol(sym.CORIZQ,yyline,yychar, yytext());
          }
        case 115: break;
        case 6: 
          { addToken(Token.OPERATOR); System.out.println("TOKEN: " + yytext());return new Symbol(sym.MULTIPLICACION,yyline,yychar, yytext());
          }
        case 116: break;
        case 32: 
          { addToken(Token.RESERVED_WORD); System.out.println("TOKEN: " + yytext());return new Symbol(sym.RPARA,yyline,yychar, yytext());
          }
        case 117: break;
        case 33: 
          { addToken(Token.RESERVED_WORD); System.out.println("TOKEN: " + yytext());return new Symbol(sym.RMAYOR,yyline,yychar,yytext());
          }
        case 118: break;
        case 19: 
          { addToken(Token.RESERVED_WORD); System.out.println("TOKEN: " + yytext());return new Symbol(sym.RSI,yyline,yychar, yytext());
          }
        case 119: break;
        case 27: 
          { addToken(Token.RESERVED_WORD); System.out.println("TOKEN: " + yytext());return new Symbol(sym.RAND,yyline,yychar,yytext());
          }
        case 120: break;
        case 10: 
          { addToken(Token.OPERATOR); System.out.println("TOKEN: " + yytext());return new Symbol(sym.PARDER,yyline,yychar, yytext());
          }
        case 121: break;
        case 55: 
          { addToken(Token.RESERVED_WORD); System.out.println("TOKEN: " + yytext());return new Symbol(sym.RFINPARA,yyline,yychar, yytext());
          }
        case 122: break;
        case 7: 
          { addToken(Token.OPERATOR); System.out.println("TOKEN: " + yytext());return new Symbol(sym.PTCOMA,yyline,yychar, yytext());
          }
        case 123: break;
        case 52: 
          { addToken(Token.RESERVED_WORD); System.out.println("TOKEN: " + yytext());return new Symbol(sym.REJECUTAR,yyline,yychar, yytext());
          }
        case 124: break;
        case 59: 
          { addToken(Token.RESERVED_WORD); System.out.println("TOKEN: " + yytext());return new Symbol(sym.RVERDADERO,yycolumn,yychar,yytext());
          }
        case 125: break;
        case 25: 
          { addToken(Token.IDENTIFICADOR);System.out.println("TOKEN: " + yytext());return new Symbol(sym.IDENTIFICADOR,yyline,yychar, yytext());
          }
        case 126: break;
        case 29: 
          { addToken(Token.COMENTARIO);System.out.println("COMENTARIOML: " + yytext());
          }
        case 127: break;
        case 50: 
          { addToken(Token.RESERVED_WORD); System.out.println("TOKEN: " + yytext());return new Symbol(sym.RENTONCES,yyline,yychar, yytext());
          }
        case 128: break;
        case 13: 
          { addToken(Token.OPERATOR); System.out.println("TOKEN: " + yytext());return new Symbol(sym.RESTA,yyline,yychar, yytext());
          }
        case 129: break;
        case 42: 
          { addToken(Token.RESERVED_WORD); System.out.println("TOKEN: " + yytext());return new Symbol(sym.RFINSI,yyline,yychar, yytext());
          }
        case 130: break;
        case 49: 
          { addToken(Token.FUNCTION); System.out.println("TOKEN: " + yytext());return new Symbol(sym.RRETORNAR,yyline,yychar, yytext());
          }
        case 131: break;
        case 69: 
          { addToken(Token.FUNCTION); System.out.println("TOKEN: " + yytext());return new Symbol(sym.RCONPARAMETROS,yyline,yychar, yytext());
          }
        case 132: break;
        case 12: 
          { addToken(Token.OPERATOR); System.out.println("TOKEN: " + yytext());return new Symbol(sym.CORDER,yyline,yychar, yytext());
          }
        case 133: break;
        case 34: 
          { addToken(Token.RESERVED_WORD); System.out.println("TOKEN: " + yytext());return new Symbol(sym.RMENOR,yyline,yychar,yytext());
          }
        case 134: break;
        case 53: 
          { addToken(Token.RESERVED_WORD); System.out.println("TOKEN: " + yytext());return new Symbol(sym.RINGRESAR,yyline,yychar,yytext());
          }
        case 135: break;
        case 48: 
          { addToken(Token.RESERVED_WORD); System.out.println("TOKEN: " + yytext());return new Symbol(sym.RMIENTRAS,yyline,yychar, yytext());
          }
        case 136: break;
        case 39: 
          { addToken(Token.DATA_TYPE); System.out.println("TOKEN: " + yytext());return new Symbol(sym.RNUMERO,yyline,yychar,yytext());
          }
        case 137: break;
        case 68: 
          { addToken(Token.RESERVED_WORD); System.out.println("TOKEN: " + yytext());return new Symbol(sym.RMENOROIGUAL,yyline,yychar,yytext());
          }
        case 138: break;
        case 64: 
          { addToken(Token.FUNCTION); System.out.println("TOKEN: " + yytext());return new Symbol(sym.RFINFUNCION,yyline,yychar, yytext());
          }
        case 139: break;
        case 38: 
          { addToken(Token.RESERVED_WORD); System.out.println("TOKEN: " + yytext());return new Symbol(sym.RHACER,yyline,yychar, yytext());
          }
        case 140: break;
        case 37: 
          { addToken(Token.RESERVED_WORD); System.out.println("TOKEN: " + yytext());return new Symbol(sym.RHASTA,yyline,yychar, yytext());
          }
        case 141: break;
        case 2: 
          { 
          }
        case 142: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
