
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\134\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\013\005\000\002\005\007\000\002\005\007\000\002" +
    "\005\007\000\002\005\007\000\002\005\003\000\002\006" +
    "\005\000\002\006\003\000\002\007\011\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\005\000\002\011\005\000\002\011" +
    "\005\000\002\011\005\000\002\011\005\000\002\011\007" +
    "\000\002\011\005\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\010\006\000\002" +
    "\014\012\000\002\014\011\000\002\014\016\000\002\014" +
    "\015\000\002\015\006\000\002\015\005\000\002\015\012" +
    "\000\002\015\011\000\002\016\006\000\002\016\004\000" +
    "\002\022\004\000\002\022\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\020\007\000" +
    "\002\020\006\000\002\020\010\000\002\020\010\000\002" +
    "\021\003\000\002\021\005\000\002\021\005\000\002\021" +
    "\005\000\002\021\005\000\002\021\005\000\002\021\005" +
    "\000\002\021\004\000\002\021\005\000\002\021\005\000" +
    "\002\023\007\000\002\023\007\000\002\024\007\000\002" +
    "\024\012\000\002\025\010\000\002\025\007\000\002\026" +
    "\013\000\002\026\012\000\002\026\015\000\002\026\014" +
    "\000\002\027\007\000\002\027\006\000\002\030\006\000" +
    "\002\030\005\000\002\031\007\000\002\031\010\000\002" +
    "\032\005\000\002\033\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\337\000\014\003\013\004\012\006\005\010\020\014" +
    "\007\001\002\000\016\002\ufffe\003\013\004\012\006\005" +
    "\010\020\014\007\001\002\000\004\042\326\001\002\000" +
    "\066\002\ufff3\003\ufff3\004\ufff3\005\ufff3\006\ufff3\007\ufff3" +
    "\010\ufff3\013\ufff3\014\ufff3\017\ufff3\021\ufff3\022\ufff3\023" +
    "\ufff3\024\ufff3\026\ufff3\027\ufff3\032\ufff3\033\ufff3\034\ufff3" +
    "\035\ufff3\036\ufff3\037\ufff3\040\ufff3\041\ufff3\042\ufff3\077" +
    "\ufff3\001\002\000\004\042\051\001\002\000\016\002\ufffb" +
    "\003\ufffb\004\ufffb\006\ufffb\010\ufffb\014\ufffb\001\002\000" +
    "\004\002\307\001\002\000\026\014\007\017\030\024\055" +
    "\027\056\033\052\035\032\037\035\040\034\041\042\042" +
    "\051\001\002\000\014\003\013\004\012\006\005\010\020" +
    "\014\007\001\002\000\004\002\000\001\002\000\016\002" +
    "\ufffc\003\ufffc\004\ufffc\006\ufffc\010\ufffc\014\ufffc\001\002" +
    "\000\016\002\ufffa\003\ufffa\004\ufffa\006\ufffa\010\ufffa\014" +
    "\ufffa\001\002\000\016\002\ufff9\003\ufff9\004\ufff9\006\ufff9" +
    "\010\ufff9\014\ufff9\001\002\000\004\042\021\001\002\000" +
    "\012\067\025\070\022\071\026\072\023\001\002\000\036" +
    "\012\uffdd\013\uffdd\014\uffdd\017\uffdd\024\uffdd\027\uffdd\033" +
    "\uffdd\035\uffdd\037\uffdd\040\uffdd\041\uffdd\042\uffdd\076\uffdd" +
    "\103\uffdd\001\002\000\036\012\uffdf\013\uffdf\014\uffdf\017" +
    "\uffdf\024\uffdf\027\uffdf\033\uffdf\035\uffdf\037\uffdf\040\uffdf" +
    "\041\uffdf\042\uffdf\076\uffdf\103\uffdf\001\002\000\032\012" +
    "\046\013\045\014\007\017\030\024\055\027\056\033\052" +
    "\035\032\037\035\040\034\041\042\042\051\001\002\000" +
    "\036\012\uffe0\013\uffe0\014\uffe0\017\uffe0\024\uffe0\027\uffe0" +
    "\033\uffe0\035\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0\076" +
    "\uffe0\103\uffe0\001\002\000\036\012\uffde\013\uffde\014\uffde" +
    "\017\uffde\024\uffde\027\uffde\033\uffde\035\uffde\037\uffde\040" +
    "\uffde\041\uffde\042\uffde\076\uffde\103\uffde\001\002\000\054" +
    "\005\uffca\007\uffca\013\uffca\014\uffca\017\uffca\021\uffca\022" +
    "\uffca\023\uffca\024\uffca\026\uffca\027\uffca\032\uffca\033\uffca" +
    "\034\uffca\035\uffca\036\uffca\037\uffca\040\uffca\041\uffca\042" +
    "\uffca\077\uffca\001\002\000\026\042\072\043\064\044\063" +
    "\045\061\046\071\047\062\066\152\073\065\074\066\075" +
    "\067\001\002\000\052\007\uffd0\013\uffd0\014\uffd0\017\uffd0" +
    "\021\uffd0\022\uffd0\023\uffd0\024\uffd0\026\uffd0\027\uffd0\032" +
    "\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0" +
    "\041\uffd0\042\uffd0\077\uffd0\001\002\000\030\014\007\017" +
    "\030\024\055\027\056\033\052\035\032\036\252\037\035" +
    "\040\034\041\042\042\051\001\002\000\030\013\246\014" +
    "\007\017\030\024\055\027\056\033\052\035\032\037\035" +
    "\040\034\041\042\042\051\001\002\000\024\042\072\043" +
    "\064\044\063\045\061\046\071\047\062\073\065\074\066" +
    "\075\067\001\002\000\004\042\235\001\002\000\054\005" +
    "\uffce\007\uffce\013\uffce\014\uffce\017\uffce\021\uffce\022\uffce" +
    "\023\uffce\024\uffce\026\uffce\027\uffce\032\uffce\033\uffce\034" +
    "\uffce\035\uffce\036\uffce\037\uffce\040\uffce\041\uffce\042\uffce" +
    "\077\uffce\001\002\000\006\101\230\103\231\001\002\000" +
    "\054\005\uffc8\007\uffc8\013\uffc8\014\uffc8\017\uffc8\021\uffc8" +
    "\022\uffc8\023\uffc8\024\uffc8\026\uffc8\027\uffc8\032\uffc8\033" +
    "\uffc8\034\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8" +
    "\042\uffc8\077\uffc8\001\002\000\054\005\uffcc\007\uffcc\013" +
    "\uffcc\014\uffcc\017\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc" +
    "\026\uffcc\027\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036" +
    "\uffcc\037\uffcc\040\uffcc\041\uffcc\042\uffcc\077\uffcc\001\002" +
    "\000\024\042\072\043\064\044\063\045\061\046\071\047" +
    "\062\073\065\074\066\075\067\001\002\000\054\005\uffcf" +
    "\007\uffcf\013\uffcf\014\uffcf\017\uffcf\021\uffcf\022\uffcf\023" +
    "\uffcf\024\uffcf\026\uffcf\027\uffcf\032\uffcf\033\uffcf\034\uffcf" +
    "\035\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf\077" +
    "\uffcf\001\002\000\054\005\uffc9\007\uffc9\013\uffc9\014\uffc9" +
    "\017\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9\026\uffc9\027" +
    "\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9" +
    "\040\uffc9\041\uffc9\042\uffc9\077\uffc9\001\002\000\026\042" +
    "\072\043\064\044\063\045\061\046\071\047\062\066\152" +
    "\073\065\074\066\075\067\001\002\000\004\075\202\001" +
    "\002\000\054\005\uffcb\007\uffcb\013\uffcb\014\uffcb\017\uffcb" +
    "\021\uffcb\022\uffcb\023\uffcb\024\uffcb\026\uffcb\027\uffcb\032" +
    "\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb" +
    "\041\uffcb\042\uffcb\077\uffcb\001\002\000\054\005\uffcd\007" +
    "\uffcd\013\uffcd\014\uffcd\017\uffcd\021\uffcd\022\uffcd\023\uffcd" +
    "\024\uffcd\026\uffcd\027\uffcd\032\uffcd\033\uffcd\034\uffcd\035" +
    "\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd\077\uffcd" +
    "\001\002\000\010\015\ufff1\101\ufff1\103\ufff1\001\002\000" +
    "\026\042\072\043\064\044\063\045\061\046\071\047\062" +
    "\066\152\073\065\074\066\075\067\001\002\000\054\005" +
    "\uffc6\007\uffc6\013\uffc6\014\uffc6\017\uffc6\021\uffc6\022\uffc6" +
    "\023\uffc6\024\uffc6\026\uffc6\027\uffc6\032\uffc6\033\uffc6\034" +
    "\uffc6\035\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6" +
    "\077\uffc6\001\002\000\054\005\uffc7\007\uffc7\013\uffc7\014" +
    "\uffc7\017\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7\026\uffc7" +
    "\027\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7\037" +
    "\uffc7\040\uffc7\041\uffc7\042\uffc7\077\uffc7\001\002\000\024" +
    "\042\072\043\064\044\063\045\061\046\071\047\062\073" +
    "\065\074\066\075\067\001\002\000\004\042\057\001\002" +
    "\000\004\101\060\001\002\000\024\042\072\043\064\044" +
    "\063\045\061\046\071\047\062\073\065\074\066\075\067" +
    "\001\002\000\130\005\uffed\007\uffed\013\uffed\014\uffed\017" +
    "\uffed\020\uffed\021\uffed\022\uffed\023\uffed\024\uffed\025\uffed" +
    "\026\uffed\027\uffed\030\uffed\031\uffed\032\uffed\033\uffed\034" +
    "\uffed\035\uffed\036\uffed\037\uffed\040\uffed\041\uffed\042\uffed" +
    "\050\uffed\051\uffed\052\uffed\053\uffed\054\uffed\055\uffed\056" +
    "\uffed\057\uffed\060\uffed\061\uffed\062\uffed\063\uffed\064\uffed" +
    "\065\uffed\076\uffed\077\uffed\100\uffed\102\uffed\105\uffed\001" +
    "\002\000\130\005\uffee\007\uffee\013\uffee\014\uffee\017\uffee" +
    "\020\uffee\021\uffee\022\uffee\023\uffee\024\uffee\025\uffee\026" +
    "\uffee\027\uffee\030\uffee\031\uffee\032\uffee\033\uffee\034\uffee" +
    "\035\uffee\036\uffee\037\uffee\040\uffee\041\uffee\042\uffee\050" +
    "\uffee\051\uffee\052\uffee\053\uffee\054\uffee\055\uffee\056\uffee" +
    "\057\uffee\060\uffee\061\uffee\062\uffee\063\uffee\064\uffee\065" +
    "\uffee\076\uffee\077\uffee\100\uffee\102\uffee\105\uffee\001\002" +
    "\000\130\005\uffeb\007\uffeb\013\uffeb\014\uffeb\017\uffeb\020" +
    "\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb" +
    "\027\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb\035" +
    "\uffeb\036\uffeb\037\uffeb\040\uffeb\041\uffeb\042\uffeb\050\uffeb" +
    "\051\uffeb\052\uffeb\053\uffeb\054\uffeb\055\uffeb\056\uffeb\057" +
    "\uffeb\060\uffeb\061\uffeb\062\uffeb\063\uffeb\064\uffeb\065\uffeb" +
    "\076\uffeb\077\uffeb\100\uffeb\102\uffeb\105\uffeb\001\002\000" +
    "\130\005\uffef\007\uffef\013\uffef\014\uffef\017\uffef\020\uffef" +
    "\021\uffef\022\uffef\023\uffef\024\uffef\025\uffef\026\uffef\027" +
    "\uffef\030\uffef\031\uffef\032\uffef\033\uffef\034\uffef\035\uffef" +
    "\036\uffef\037\uffef\040\uffef\041\uffef\042\uffef\050\uffef\051" +
    "\uffef\052\uffef\053\uffef\054\uffef\055\uffef\056\uffef\057\uffef" +
    "\060\uffef\061\uffef\062\uffef\063\uffef\064\uffef\065\uffef\076" +
    "\uffef\077\uffef\100\uffef\102\uffef\105\uffef\001\002\000\130" +
    "\005\uffea\007\uffea\013\uffea\014\uffea\017\uffea\020\uffea\021" +
    "\uffea\022\uffea\023\uffea\024\uffea\025\uffea\026\uffea\027\uffea" +
    "\030\uffea\031\uffea\032\uffea\033\uffea\034\uffea\035\uffea\036" +
    "\uffea\037\uffea\040\uffea\041\uffea\042\uffea\050\uffea\051\uffea" +
    "\052\uffea\053\uffea\054\uffea\055\uffea\056\uffea\057\uffea\060" +
    "\uffea\061\uffea\062\uffea\063\uffea\064\uffea\065\uffea\076\uffea" +
    "\077\uffea\100\uffea\102\uffea\105\uffea\001\002\000\130\005" +
    "\uffe9\007\uffe9\013\uffe9\014\uffe9\017\uffe9\020\uffe9\021\uffe9" +
    "\022\uffe9\023\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9\030" +
    "\uffe9\031\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9" +
    "\037\uffe9\040\uffe9\041\uffe9\042\uffe9\050\uffe9\051\uffe9\052" +
    "\uffe9\053\uffe9\054\uffe9\055\uffe9\056\uffe9\057\uffe9\060\uffe9" +
    "\061\uffe9\062\uffe9\063\uffe9\064\uffe9\065\uffe9\076\uffe9\077" +
    "\uffe9\100\uffe9\102\uffe9\105\uffe9\001\002\000\024\042\072" +
    "\043\064\044\063\045\061\046\071\047\062\073\065\074" +
    "\066\075\067\001\002\000\020\030\077\050\100\051\075" +
    "\052\073\053\074\054\101\055\076\001\002\000\130\005" +
    "\uffec\007\uffec\013\uffec\014\uffec\017\uffec\020\uffec\021\uffec" +
    "\022\uffec\023\uffec\024\uffec\025\uffec\026\uffec\027\uffec\030" +
    "\uffec\031\uffec\032\uffec\033\uffec\034\uffec\035\uffec\036\uffec" +
    "\037\uffec\040\uffec\041\uffec\042\uffec\050\uffec\051\uffec\052" +
    "\uffec\053\uffec\054\uffec\055\uffec\056\uffec\057\uffec\060\uffec" +
    "\061\uffec\062\uffec\063\uffec\064\uffec\065\uffec\076\uffec\077" +
    "\uffec\100\uffec\102\uffec\105\uffec\001\002\000\130\005\uffe8" +
    "\007\uffe8\013\uffe8\014\uffe8\017\uffe8\020\uffe8\021\uffe8\022" +
    "\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8" +
    "\031\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8\037" +
    "\uffe8\040\uffe8\041\uffe8\042\uffe8\050\uffe8\051\uffe8\052\uffe8" +
    "\053\uffe8\054\uffe8\055\uffe8\056\uffe8\057\uffe8\060\uffe8\061" +
    "\uffe8\062\uffe8\063\uffe8\064\uffe8\065\uffe8\076\uffe8\077\uffe8" +
    "\100\uffe8\102\uffe8\105\uffe8\001\002\000\024\042\072\043" +
    "\064\044\063\045\061\046\071\047\062\073\065\074\066" +
    "\075\067\001\002\000\024\042\072\043\064\044\063\045" +
    "\061\046\071\047\062\073\065\074\066\075\067\001\002" +
    "\000\024\042\072\043\064\044\063\045\061\046\071\047" +
    "\062\073\065\074\066\075\067\001\002\000\004\104\120" +
    "\001\002\000\024\042\072\043\064\044\063\045\061\046" +
    "\071\047\062\073\065\074\066\075\067\001\002\000\024" +
    "\042\072\043\064\044\063\045\061\046\071\047\062\073" +
    "\065\074\066\075\067\001\002\000\024\042\072\043\064" +
    "\044\063\045\061\046\071\047\062\073\065\074\066\075" +
    "\067\001\002\000\130\005\uffe1\007\uffe1\013\uffe1\014\uffe1" +
    "\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025" +
    "\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1" +
    "\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1\042" +
    "\uffe1\050\uffe1\051\uffe1\052\uffe1\053\uffe1\054\uffe1\055\uffe1" +
    "\056\uffe1\057\uffe1\060\uffe1\061\uffe1\062\uffe1\063\uffe1\064" +
    "\uffe1\065\uffe1\076\uffe1\077\uffe1\100\uffe1\102\uffe1\105\uffe1" +
    "\001\002\000\130\005\uffe6\007\uffe6\013\uffe6\014\uffe6\017" +
    "\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6" +
    "\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6\034" +
    "\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6\041\uffe6\042\uffe6" +
    "\050\uffe6\051\uffe6\052\073\053\074\054\101\055\076\056" +
    "\uffe6\057\uffe6\060\uffe6\061\uffe6\062\uffe6\063\uffe6\064\uffe6" +
    "\065\uffe6\076\uffe6\077\uffe6\100\uffe6\102\uffe6\105\uffe6\001" +
    "\002\000\022\025\106\031\105\050\100\051\075\052\073" +
    "\053\074\054\101\055\076\001\002\000\024\042\072\043" +
    "\064\044\063\045\061\046\071\047\062\073\065\074\066" +
    "\075\067\001\002\000\030\014\007\017\030\024\055\027" +
    "\056\032\110\033\052\035\032\037\035\040\034\041\042" +
    "\042\051\001\002\000\030\014\007\017\030\024\055\027" +
    "\056\032\112\033\052\035\032\037\035\040\034\041\042" +
    "\042\051\001\002\000\054\005\uffb0\007\uffb0\013\uffb0\014" +
    "\uffb0\017\uffb0\021\uffb0\022\uffb0\023\uffb0\024\uffb0\026\uffb0" +
    "\027\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037" +
    "\uffb0\040\uffb0\041\uffb0\042\uffb0\077\uffb0\001\002\000\052" +
    "\007\uffd1\013\uffd1\014\uffd1\017\uffd1\021\uffd1\022\uffd1\023" +
    "\uffd1\024\uffd1\026\uffd1\027\uffd1\032\uffd1\033\uffd1\034\uffd1" +
    "\035\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1\077" +
    "\uffd1\001\002\000\054\005\uffb1\007\uffb1\013\uffb1\014\uffb1" +
    "\017\uffb1\021\uffb1\022\uffb1\023\uffb1\024\uffb1\026\uffb1\027" +
    "\uffb1\032\uffb1\033\uffb1\034\uffb1\035\uffb1\036\uffb1\037\uffb1" +
    "\040\uffb1\041\uffb1\042\uffb1\077\uffb1\001\002\000\020\025" +
    "\114\050\100\051\075\052\073\053\074\054\101\055\076" +
    "\001\002\000\030\014\007\017\030\024\055\027\056\032" +
    "\116\033\052\035\032\037\035\040\034\041\042\042\051" +
    "\001\002\000\030\014\007\017\030\024\055\027\056\032" +
    "\117\033\052\035\032\037\035\040\034\041\042\042\051" +
    "\001\002\000\054\005\uffae\007\uffae\013\uffae\014\uffae\017" +
    "\uffae\021\uffae\022\uffae\023\uffae\024\uffae\026\uffae\027\uffae" +
    "\032\uffae\033\uffae\034\uffae\035\uffae\036\uffae\037\uffae\040" +
    "\uffae\041\uffae\042\uffae\077\uffae\001\002\000\054\005\uffaf" +
    "\007\uffaf\013\uffaf\014\uffaf\017\uffaf\021\uffaf\022\uffaf\023" +
    "\uffaf\024\uffaf\026\uffaf\027\uffaf\032\uffaf\033\uffaf\034\uffaf" +
    "\035\uffaf\036\uffaf\037\uffaf\040\uffaf\041\uffaf\042\uffaf\077" +
    "\uffaf\001\002\000\024\042\072\043\064\044\063\045\061" +
    "\046\071\047\062\073\065\074\066\075\067\001\002\000" +
    "\020\050\100\051\075\052\073\053\074\054\101\055\076" +
    "\105\122\001\002\000\130\005\uffe2\007\uffe2\013\uffe2\014" +
    "\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2" +
    "\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\033" +
    "\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\041\uffe2" +
    "\042\uffe2\050\uffe2\051\uffe2\052\uffe2\053\uffe2\054\uffe2\055" +
    "\uffe2\056\uffe2\057\uffe2\060\uffe2\061\uffe2\062\uffe2\063\uffe2" +
    "\064\uffe2\065\uffe2\076\uffe2\077\uffe2\100\uffe2\102\uffe2\105" +
    "\uffe2\001\002\000\130\005\uffe5\007\uffe5\013\uffe5\014\uffe5" +
    "\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025" +
    "\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5" +
    "\034\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5\042" +
    "\uffe5\050\uffe5\051\uffe5\052\073\053\074\054\101\055\076" +
    "\056\uffe5\057\uffe5\060\uffe5\061\uffe5\062\uffe5\063\uffe5\064" +
    "\uffe5\065\uffe5\076\uffe5\077\uffe5\100\uffe5\102\uffe5\105\uffe5" +
    "\001\002\000\130\005\uffe3\007\uffe3\013\uffe3\014\uffe3\017" +
    "\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3" +
    "\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034" +
    "\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3\042\uffe3" +
    "\050\uffe3\051\uffe3\052\uffe3\053\uffe3\054\101\055\076\056" +
    "\uffe3\057\uffe3\060\uffe3\061\uffe3\062\uffe3\063\uffe3\064\uffe3" +
    "\065\uffe3\076\uffe3\077\uffe3\100\uffe3\102\uffe3\105\uffe3\001" +
    "\002\000\130\005\uffe4\007\uffe4\013\uffe4\014\uffe4\017\uffe4" +
    "\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026" +
    "\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4" +
    "\035\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4\050" +
    "\uffe4\051\uffe4\052\uffe4\053\uffe4\054\101\055\076\056\uffe4" +
    "\057\uffe4\060\uffe4\061\uffe4\062\uffe4\063\uffe4\064\uffe4\065" +
    "\uffe4\076\uffe4\077\uffe4\100\uffe4\102\uffe4\105\uffe4\001\002" +
    "\000\020\050\100\051\075\052\073\053\074\054\101\055" +
    "\076\076\127\001\002\000\130\005\uffe7\007\uffe7\013\uffe7" +
    "\014\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024" +
    "\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7\032\uffe7" +
    "\033\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7\040\uffe7\041" +
    "\uffe7\042\uffe7\050\uffe7\051\uffe7\052\uffe7\053\uffe7\054\uffe7" +
    "\055\uffe7\056\uffe7\057\uffe7\060\uffe7\061\uffe7\062\uffe7\063" +
    "\uffe7\064\uffe7\065\uffe7\076\uffe7\077\uffe7\100\uffe7\102\uffe7" +
    "\105\uffe7\001\002\000\020\025\131\050\100\051\075\052" +
    "\073\053\074\054\101\055\076\001\002\000\004\077\133" +
    "\001\002\000\010\022\142\026\140\077\141\001\002\000" +
    "\024\042\072\043\064\044\063\045\061\046\071\047\062" +
    "\073\065\074\066\075\067\001\002\000\020\050\100\051" +
    "\075\052\073\053\074\054\101\055\076\100\135\001\002" +
    "\000\004\020\136\001\002\000\026\014\007\017\030\024" +
    "\055\027\056\033\052\035\032\037\035\040\034\041\042" +
    "\042\051\001\002\000\034\014\007\017\030\022\uffb2\024" +
    "\055\026\uffb2\027\056\033\052\035\032\037\035\040\034" +
    "\041\042\042\051\077\uffb2\001\002\000\054\005\uffb5\007" +
    "\uffb5\013\uffb5\014\uffb5\017\uffb5\021\uffb5\022\uffb5\023\uffb5" +
    "\024\uffb5\026\uffb5\027\uffb5\032\uffb5\033\uffb5\034\uffb5\035" +
    "\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5\077\uffb5" +
    "\001\002\000\024\042\072\043\064\044\063\045\061\046" +
    "\071\047\062\073\065\074\066\075\067\001\002\000\004" +
    "\020\143\001\002\000\026\014\007\017\030\024\055\027" +
    "\056\033\052\035\032\037\035\040\034\041\042\042\051" +
    "\001\002\000\030\014\007\017\030\024\055\026\145\027" +
    "\056\033\052\035\032\037\035\040\034\041\042\042\051" +
    "\001\002\000\054\005\uffb4\007\uffb4\013\uffb4\014\uffb4\017" +
    "\uffb4\021\uffb4\022\uffb4\023\uffb4\024\uffb4\026\uffb4\027\uffb4" +
    "\032\uffb4\033\uffb4\034\uffb4\035\uffb4\036\uffb4\037\uffb4\040" +
    "\uffb4\041\uffb4\042\uffb4\077\uffb4\001\002\000\020\050\100" +
    "\051\075\052\073\053\074\054\101\055\076\100\147\001" +
    "\002\000\004\020\150\001\002\000\026\014\007\017\030" +
    "\024\055\027\056\033\052\035\032\037\035\040\034\041" +
    "\042\042\051\001\002\000\034\014\007\017\030\022\uffb3" +
    "\024\055\026\uffb3\027\056\033\052\035\032\037\035\040" +
    "\034\041\042\042\051\077\uffb3\001\002\000\024\042\072" +
    "\043\064\044\063\045\061\046\071\047\062\073\065\074" +
    "\066\075\067\001\002\000\116\005\uffc1\007\uffc1\013\uffc1" +
    "\014\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024" +
    "\uffc1\025\uffc1\026\uffc1\027\uffc1\032\uffc1\033\uffc1\034\uffc1" +
    "\035\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1\042\uffc1\050" +
    "\100\051\075\052\073\053\074\054\101\055\076\056\167" +
    "\057\161\060\165\061\164\062\170\063\163\064\166\065" +
    "\162\077\uffc1\102\uffc1\001\002\000\004\025\155\001\002" +
    "\000\030\014\007\017\030\024\055\027\056\033\052\034" +
    "\157\035\032\037\035\040\034\041\042\042\051\001\002" +
    "\000\030\014\007\017\030\024\055\027\056\033\052\034" +
    "\160\035\032\037\035\040\034\041\042\042\051\001\002" +
    "\000\054\005\uffac\007\uffac\013\uffac\014\uffac\017\uffac\021" +
    "\uffac\022\uffac\023\uffac\024\uffac\026\uffac\027\uffac\032\uffac" +
    "\033\uffac\034\uffac\035\uffac\036\uffac\037\uffac\040\uffac\041" +
    "\uffac\042\uffac\077\uffac\001\002\000\054\005\uffad\007\uffad" +
    "\013\uffad\014\uffad\017\uffad\021\uffad\022\uffad\023\uffad\024" +
    "\uffad\026\uffad\027\uffad\032\uffad\033\uffad\034\uffad\035\uffad" +
    "\036\uffad\037\uffad\040\uffad\041\uffad\042\uffad\077\uffad\001" +
    "\002\000\024\042\072\043\064\044\063\045\061\046\071" +
    "\047\062\073\065\074\066\075\067\001\002\000\024\042" +
    "\072\043\064\044\063\045\061\046\071\047\062\073\065" +
    "\074\066\075\067\001\002\000\024\042\072\043\064\044" +
    "\063\045\061\046\071\047\062\073\065\074\066\075\067" +
    "\001\002\000\024\042\072\043\064\044\063\045\061\046" +
    "\071\047\062\073\065\074\066\075\067\001\002\000\024" +
    "\042\072\043\064\044\063\045\061\046\071\047\062\073" +
    "\065\074\066\075\067\001\002\000\024\042\072\043\064" +
    "\044\063\045\061\046\071\047\062\073\065\074\066\075" +
    "\067\001\002\000\024\042\072\043\064\044\063\045\061" +
    "\046\071\047\062\073\065\074\066\075\067\001\002\000" +
    "\024\042\072\043\064\044\063\045\061\046\071\047\062" +
    "\073\065\074\066\075\067\001\002\000\076\005\uffbc\007" +
    "\uffbc\013\uffbc\014\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc" +
    "\023\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc\032\uffbc\033" +
    "\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc" +
    "\042\uffbc\050\100\051\075\052\073\053\074\054\101\055" +
    "\076\077\uffbc\102\uffbc\001\002\000\076\005\uffc0\007\uffc0" +
    "\013\uffc0\014\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0\023" +
    "\uffc0\024\uffc0\025\uffc0\026\uffc0\027\uffc0\032\uffc0\033\uffc0" +
    "\034\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0\042" +
    "\uffc0\050\100\051\075\052\073\053\074\054\101\055\076" +
    "\077\uffc0\102\uffc0\001\002\000\076\005\uffb8\007\uffb8\013" +
    "\uffb8\014\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8\023\uffb8" +
    "\024\uffb8\025\uffb8\026\uffb8\027\uffb8\032\uffb8\033\uffb8\034" +
    "\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8" +
    "\050\100\051\075\052\073\053\074\054\101\055\076\077" +
    "\uffb8\102\uffb8\001\002\000\076\005\uffbe\007\uffbe\013\uffbe" +
    "\014\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024" +
    "\uffbe\025\uffbe\026\uffbe\027\uffbe\032\uffbe\033\uffbe\034\uffbe" +
    "\035\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe\042\uffbe\050" +
    "\100\051\075\052\073\053\074\054\101\055\076\077\uffbe" +
    "\102\uffbe\001\002\000\076\005\uffbd\007\uffbd\013\uffbd\014" +
    "\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd" +
    "\025\uffbd\026\uffbd\027\uffbd\032\uffbd\033\uffbd\034\uffbd\035" +
    "\uffbd\036\uffbd\037\uffbd\040\uffbd\041\uffbd\042\uffbd\050\100" +
    "\051\075\052\073\053\074\054\101\055\076\077\uffbd\102" +
    "\uffbd\001\002\000\076\005\uffbb\007\uffbb\013\uffbb\014\uffbb" +
    "\017\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb\025" +
    "\uffbb\026\uffbb\027\uffbb\032\uffbb\033\uffbb\034\uffbb\035\uffbb" +
    "\036\uffbb\037\uffbb\040\uffbb\041\uffbb\042\uffbb\050\100\051" +
    "\075\052\073\053\074\054\101\055\076\077\uffbb\102\uffbb" +
    "\001\002\000\076\005\uffb9\007\uffb9\013\uffb9\014\uffb9\017" +
    "\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9" +
    "\026\uffb9\027\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9\036" +
    "\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9\050\100\051\075" +
    "\052\073\053\074\054\101\055\076\077\uffb9\102\uffb9\001" +
    "\002\000\076\005\uffbf\007\uffbf\013\uffbf\014\uffbf\017\uffbf" +
    "\020\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf\025\uffbf\026" +
    "\uffbf\027\uffbf\032\uffbf\033\uffbf\034\uffbf\035\uffbf\036\uffbf" +
    "\037\uffbf\040\uffbf\041\uffbf\042\uffbf\050\100\051\075\052" +
    "\073\053\074\054\101\055\076\077\uffbf\102\uffbf\001\002" +
    "\000\076\005\uffba\007\uffba\013\uffba\014\uffba\017\uffba\020" +
    "\uffba\021\uffba\022\uffba\023\uffba\024\uffba\025\uffba\026\uffba" +
    "\027\uffba\032\uffba\033\uffba\034\uffba\035\uffba\036\uffba\037" +
    "\uffba\040\uffba\041\uffba\042\uffba\050\100\051\075\052\073" +
    "\053\074\054\101\055\076\077\uffba\102\uffba\001\002\000" +
    "\004\042\203\001\002\000\012\067\025\070\022\071\026" +
    "\072\023\001\002\000\006\076\206\103\205\001\002\000" +
    "\004\042\220\001\002\000\030\013\210\014\007\017\030" +
    "\024\055\027\056\033\052\035\032\037\035\040\034\041" +
    "\042\042\051\001\002\000\030\013\214\014\007\017\030" +
    "\024\055\027\056\033\052\035\032\037\035\040\034\041" +
    "\042\042\051\001\002\000\026\042\072\043\064\044\063" +
    "\045\061\046\071\047\062\066\152\073\065\074\066\075" +
    "\067\001\002\000\004\102\212\001\002\000\004\011\213" +
    "\001\002\000\016\002\uffd8\003\uffd8\004\uffd8\006\uffd8\010" +
    "\uffd8\014\uffd8\001\002\000\026\042\072\043\064\044\063" +
    "\045\061\046\071\047\062\066\152\073\065\074\066\075" +
    "\067\001\002\000\004\102\216\001\002\000\004\011\217" +
    "\001\002\000\016\002\uffd9\003\uffd9\004\uffd9\006\uffd9\010" +
    "\uffd9\014\uffd9\001\002\000\012\067\025\070\022\071\026" +
    "\072\023\001\002\000\006\076\uffd3\103\uffd3\001\002\000" +
    "\006\076\uffd2\103\uffd2\001\002\000\004\102\224\001\002" +
    "\000\004\011\225\001\002\000\016\002\uffda\003\uffda\004" +
    "\uffda\006\uffda\010\uffda\014\uffda\001\002\000\020\050\100" +
    "\051\075\052\073\053\074\054\101\055\076\102\227\001" +
    "\002\000\054\005\uffa6\007\uffa6\013\uffa6\014\uffa6\017\uffa6" +
    "\021\uffa6\022\uffa6\023\uffa6\024\uffa6\026\uffa6\027\uffa6\032" +
    "\uffa6\033\uffa6\034\uffa6\035\uffa6\036\uffa6\037\uffa6\040\uffa6" +
    "\041\uffa6\042\uffa6\077\uffa6\001\002\000\024\042\072\043" +
    "\064\044\063\045\061\046\071\047\062\073\065\074\066" +
    "\075\067\001\002\000\004\042\232\001\002\000\010\015" +
    "\ufff2\101\ufff2\103\ufff2\001\002\000\020\050\100\051\075" +
    "\052\073\053\074\054\101\055\076\102\234\001\002\000" +
    "\054\005\uffdc\007\uffdc\013\uffdc\014\uffdc\017\uffdc\021\uffdc" +
    "\022\uffdc\023\uffdc\024\uffdc\026\uffdc\027\uffdc\032\uffdc\033" +
    "\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc" +
    "\042\uffdc\077\uffdc\001\002\000\004\075\236\001\002\000" +
    "\006\042\203\076\237\001\002\000\004\102\243\001\002" +
    "\000\006\076\241\103\205\001\002\000\004\102\242\001" +
    "\002\000\054\005\uffa8\007\uffa8\013\uffa8\014\uffa8\017\uffa8" +
    "\021\uffa8\022\uffa8\023\uffa8\024\uffa8\026\uffa8\027\uffa8\032" +
    "\uffa8\033\uffa8\034\uffa8\035\uffa8\036\uffa8\037\uffa8\040\uffa8" +
    "\041\uffa8\042\uffa8\077\uffa8\001\002\000\054\005\uffa9\007" +
    "\uffa9\013\uffa9\014\uffa9\017\uffa9\021\uffa9\022\uffa9\023\uffa9" +
    "\024\uffa9\026\uffa9\027\uffa9\032\uffa9\033\uffa9\034\uffa9\035" +
    "\uffa9\036\uffa9\037\uffa9\040\uffa9\041\uffa9\042\uffa9\077\uffa9" +
    "\001\002\000\020\050\100\051\075\052\073\053\074\054" +
    "\101\055\076\102\245\001\002\000\054\005\uffa7\007\uffa7" +
    "\013\uffa7\014\uffa7\017\uffa7\021\uffa7\022\uffa7\023\uffa7\024" +
    "\uffa7\026\uffa7\027\uffa7\032\uffa7\033\uffa7\034\uffa7\035\uffa7" +
    "\036\uffa7\037\uffa7\040\uffa7\041\uffa7\042\uffa7\077\uffa7\001" +
    "\002\000\026\042\072\043\064\044\063\045\061\046\071" +
    "\047\062\066\152\073\065\074\066\075\067\001\002\000" +
    "\004\102\250\001\002\000\004\011\251\001\002\000\016" +
    "\002\uffdb\003\uffdb\004\uffdb\006\uffdb\010\uffdb\014\uffdb\001" +
    "\002\000\026\042\072\043\064\044\063\045\061\046\071" +
    "\047\062\066\152\073\065\074\066\075\067\001\002\000" +
    "\030\014\007\017\030\024\055\027\056\033\052\035\032" +
    "\036\254\037\035\040\034\041\042\042\051\001\002\000" +
    "\026\042\072\043\064\044\063\045\061\046\071\047\062" +
    "\066\152\073\065\074\066\075\067\001\002\000\054\005" +
    "\uffab\007\uffab\013\uffab\014\uffab\017\uffab\021\uffab\022\uffab" +
    "\023\uffab\024\uffab\026\uffab\027\uffab\032\uffab\033\uffab\034" +
    "\uffab\035\uffab\036\uffab\037\uffab\040\uffab\041\uffab\042\uffab" +
    "\077\uffab\001\002\000\054\005\uffaa\007\uffaa\013\uffaa\014" +
    "\uffaa\017\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa\026\uffaa" +
    "\027\uffaa\032\uffaa\033\uffaa\034\uffaa\035\uffaa\036\uffaa\037" +
    "\uffaa\040\uffaa\041\uffaa\042\uffaa\077\uffaa\001\002\000\030" +
    "\014\007\017\030\020\260\024\055\027\056\033\052\035" +
    "\032\037\035\040\034\041\042\042\051\001\002\000\026" +
    "\014\007\017\030\024\055\027\056\033\052\035\032\037" +
    "\035\040\034\041\042\042\051\001\002\000\032\014\007" +
    "\017\030\021\274\022\273\024\055\027\056\033\052\035" +
    "\032\037\035\040\034\041\042\042\051\001\002\000\010" +
    "\021\264\022\265\023\263\001\002\000\054\005\uffc4\007" +
    "\uffc4\013\uffc4\014\uffc4\017\uffc4\021\uffc4\022\uffc4\023\uffc4" +
    "\024\uffc4\026\uffc4\027\uffc4\032\uffc4\033\uffc4\034\uffc4\035" +
    "\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4\077\uffc4" +
    "\001\002\000\026\042\072\043\064\044\063\045\061\046" +
    "\071\047\062\066\152\073\065\074\066\075\067\001\002" +
    "\000\026\014\007\017\030\024\055\027\056\033\052\035" +
    "\032\037\035\040\034\041\042\042\051\001\002\000\030" +
    "\014\007\017\030\023\267\024\055\027\056\033\052\035" +
    "\032\037\035\040\034\041\042\042\051\001\002\000\054" +
    "\005\uffc3\007\uffc3\013\uffc3\014\uffc3\017\uffc3\021\uffc3\022" +
    "\uffc3\023\uffc3\024\uffc3\026\uffc3\027\uffc3\032\uffc3\033\uffc3" +
    "\034\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3\042" +
    "\uffc3\077\uffc3\001\002\000\004\020\271\001\002\000\026" +
    "\014\007\017\030\024\055\027\056\033\052\035\032\037" +
    "\035\040\034\041\042\042\051\001\002\000\034\014\007" +
    "\017\030\021\uffb7\022\uffb7\023\uffb7\024\055\027\056\033" +
    "\052\035\032\037\035\040\034\041\042\042\051\001\002" +
    "\000\026\014\007\017\030\024\055\027\056\033\052\035" +
    "\032\037\035\040\034\041\042\042\051\001\002\000\026" +
    "\042\072\043\064\044\063\045\061\046\071\047\062\066" +
    "\152\073\065\074\066\075\067\001\002\000\004\020\276" +
    "\001\002\000\026\014\007\017\030\024\055\027\056\033" +
    "\052\035\032\037\035\040\034\041\042\042\051\001\002" +
    "\000\034\014\007\017\030\021\uffb6\022\uffb6\023\uffb6\024" +
    "\055\027\056\033\052\035\032\037\035\040\034\041\042" +
    "\042\051\001\002\000\030\014\007\017\030\023\301\024" +
    "\055\027\056\033\052\035\032\037\035\040\034\041\042" +
    "\042\051\001\002\000\054\005\uffc2\007\uffc2\013\uffc2\014" +
    "\uffc2\017\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2\026\uffc2" +
    "\027\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2\037" +
    "\uffc2\040\uffc2\041\uffc2\042\uffc2\077\uffc2\001\002\000\030" +
    "\014\007\017\030\023\303\024\055\027\056\033\052\035" +
    "\032\037\035\040\034\041\042\042\051\001\002\000\054" +
    "\005\uffc5\007\uffc5\013\uffc5\014\uffc5\017\uffc5\021\uffc5\022" +
    "\uffc5\023\uffc5\024\uffc5\026\uffc5\027\uffc5\032\uffc5\033\uffc5" +
    "\034\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5\041\uffc5\042" +
    "\uffc5\077\uffc5\001\002\000\004\002\ufffd\001\002\000\004" +
    "\005\306\001\002\000\016\002\ufff8\003\ufff8\004\ufff8\006" +
    "\ufff8\010\ufff8\014\ufff8\001\002\000\004\002\001\001\002" +
    "\000\006\015\311\103\231\001\002\000\012\067\316\070" +
    "\312\071\315\072\314\001\002\000\006\016\uffdd\102\325" +
    "\001\002\000\004\016\322\001\002\000\006\016\uffdf\102" +
    "\321\001\002\000\006\016\uffde\102\320\001\002\000\006" +
    "\016\uffe0\102\317\001\002\000\066\002\ufff7\003\ufff7\004" +
    "\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7\013\ufff7\014\ufff7" +
    "\017\ufff7\021\ufff7\022\ufff7\023\ufff7\024\ufff7\026\ufff7\027" +
    "\ufff7\032\ufff7\033\ufff7\034\ufff7\035\ufff7\036\ufff7\037\ufff7" +
    "\040\ufff7\041\ufff7\042\ufff7\077\ufff7\001\002\000\066\002" +
    "\ufff5\003\ufff5\004\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5" +
    "\013\ufff5\014\ufff5\017\ufff5\021\ufff5\022\ufff5\023\ufff5\024" +
    "\ufff5\026\ufff5\027\ufff5\032\ufff5\033\ufff5\034\ufff5\035\ufff5" +
    "\036\ufff5\037\ufff5\040\ufff5\041\ufff5\042\ufff5\077\ufff5\001" +
    "\002\000\066\002\ufff4\003\ufff4\004\ufff4\005\ufff4\006\ufff4" +
    "\007\ufff4\010\ufff4\013\ufff4\014\ufff4\017\ufff4\021\ufff4\022" +
    "\ufff4\023\ufff4\024\ufff4\026\ufff4\027\ufff4\032\ufff4\033\ufff4" +
    "\034\ufff4\035\ufff4\036\ufff4\037\ufff4\040\ufff4\041\ufff4\042" +
    "\ufff4\077\ufff4\001\002\000\024\042\072\043\064\044\063" +
    "\045\061\046\071\047\062\073\065\074\066\075\067\001" +
    "\002\000\020\050\100\051\075\052\073\053\074\054\101" +
    "\055\076\102\324\001\002\000\066\002\ufff0\003\ufff0\004" +
    "\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0\013\ufff0\014\ufff0" +
    "\017\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0\026\ufff0\027" +
    "\ufff0\032\ufff0\033\ufff0\034\ufff0\035\ufff0\036\ufff0\037\ufff0" +
    "\040\ufff0\041\ufff0\042\ufff0\077\ufff0\001\002\000\066\002" +
    "\ufff6\003\ufff6\004\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6" +
    "\013\ufff6\014\ufff6\017\ufff6\021\ufff6\022\ufff6\023\ufff6\024" +
    "\ufff6\026\ufff6\027\ufff6\032\ufff6\033\ufff6\034\ufff6\035\ufff6" +
    "\036\ufff6\037\ufff6\040\ufff6\041\ufff6\042\ufff6\077\ufff6\001" +
    "\002\000\032\007\327\012\331\014\007\017\030\024\055" +
    "\027\056\033\052\035\032\037\035\040\034\041\042\042" +
    "\051\001\002\000\016\002\uffd6\003\uffd6\004\uffd6\006\uffd6" +
    "\010\uffd6\014\uffd6\001\002\000\030\007\340\014\007\017" +
    "\030\024\055\027\056\033\052\035\032\037\035\040\034" +
    "\041\042\042\051\001\002\000\004\075\332\001\002\000" +
    "\004\042\203\001\002\000\006\076\334\103\205\001\002" +
    "\000\030\007\335\014\007\017\030\024\055\027\056\033" +
    "\052\035\032\037\035\040\034\041\042\042\051\001\002" +
    "\000\016\002\uffd4\003\uffd4\004\uffd4\006\uffd4\010\uffd4\014" +
    "\uffd4\001\002\000\030\007\337\014\007\017\030\024\055" +
    "\027\056\033\052\035\032\037\035\040\034\041\042\042" +
    "\051\001\002\000\016\002\uffd5\003\uffd5\004\uffd5\006\uffd5" +
    "\010\uffd5\014\uffd5\001\002\000\016\002\uffd7\003\uffd7\004" +
    "\uffd7\006\uffd7\010\uffd7\014\uffd7\001\002\000\004\002\uffff" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\337\000\022\002\010\003\013\004\003\005\007\007" +
    "\005\013\014\014\015\015\016\001\001\000\020\003\340" +
    "\004\003\005\007\007\005\013\014\014\015\015\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\307" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\005" +
    "\035\006\036\007\005\010\042\017\304\020\047\024\040" +
    "\026\046\027\026\030\043\031\037\032\053\033\052\001" +
    "\001\000\020\003\303\004\003\005\007\007\005\013\014" +
    "\014\015\015\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\005\035\006\036\007\005\010\042\017\030" +
    "\020\047\022\032\024\040\026\046\027\026\030\043\031" +
    "\037\032\053\033\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\011\152\021\256\001" +
    "\001\000\002\001\001\000\036\005\035\006\036\007\005" +
    "\010\042\017\030\020\047\022\252\024\040\026\046\027" +
    "\026\030\043\031\037\032\053\033\052\001\001\000\034" +
    "\005\035\006\036\007\005\010\042\017\110\020\047\024" +
    "\040\026\046\027\026\030\043\031\037\032\053\033\052" +
    "\001\001\000\004\011\243\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\225\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\011\152\021\222\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\011\152\021\153\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\127\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\067\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\125" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\124\001\001\000\004\011\123\001\001" +
    "\000\004\011\122\001\001\000\002\001\001\000\004\011" +
    "\103\001\001\000\004\011\102\001\001\000\004\011\101" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\112\001\001\000\036\005\035\006\036" +
    "\007\005\010\042\017\030\020\047\022\106\024\040\026" +
    "\046\027\026\030\043\031\037\032\053\033\052\001\001" +
    "\000\034\005\035\006\036\007\005\010\042\017\110\020" +
    "\047\024\040\026\046\027\026\030\043\031\037\032\053" +
    "\033\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\005\035\006\036" +
    "\007\005\010\042\017\030\020\047\022\114\024\040\026" +
    "\046\027\026\030\043\031\037\032\053\033\052\001\001" +
    "\000\034\005\035\006\036\007\005\010\042\017\110\020" +
    "\047\024\040\026\046\027\026\030\043\031\037\032\053" +
    "\033\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\120\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\025\131\001\001\000\002\001\001\000\004\011\133\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\005\035" +
    "\006\036\007\005\010\042\017\030\020\047\022\136\024" +
    "\040\026\046\027\026\030\043\031\037\032\053\033\052" +
    "\001\001\000\034\005\035\006\036\007\005\010\042\017" +
    "\110\020\047\024\040\026\046\027\026\030\043\031\037" +
    "\032\053\033\052\001\001\000\002\001\001\000\004\011" +
    "\145\001\001\000\002\001\001\000\036\005\035\006\036" +
    "\007\005\010\042\017\030\020\047\022\143\024\040\026" +
    "\046\027\026\030\043\031\037\032\053\033\052\001\001" +
    "\000\034\005\035\006\036\007\005\010\042\017\110\020" +
    "\047\024\040\026\046\027\026\030\043\031\037\032\053" +
    "\033\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\005\035\006\036\007\005\010\042" +
    "\017\030\020\047\022\150\024\040\026\046\027\026\030" +
    "\043\031\037\032\053\033\052\001\001\000\034\005\035" +
    "\006\036\007\005\010\042\017\110\020\047\024\040\026" +
    "\046\027\026\030\043\031\037\032\053\033\052\001\001" +
    "\000\004\011\200\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\005\035\006\036\007\005\010\042\017\030" +
    "\020\047\022\155\024\040\026\046\027\026\030\043\031" +
    "\037\032\053\033\052\001\001\000\034\005\035\006\036" +
    "\007\005\010\042\017\110\020\047\024\040\026\046\027" +
    "\026\030\043\031\037\032\053\033\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\177\001\001\000" +
    "\004\011\176\001\001\000\004\011\175\001\001\000\004" +
    "\011\174\001\001\000\004\011\173\001\001\000\004\011" +
    "\172\001\001\000\004\011\171\001\001\000\004\011\170" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\203\001\001\000\004\012\221\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\005\035\006\036\007" +
    "\005\010\042\017\030\020\047\022\206\024\040\026\046" +
    "\027\026\030\043\031\037\032\053\033\052\001\001\000" +
    "\034\005\035\006\036\007\005\010\042\017\110\020\047" +
    "\024\040\026\046\027\026\030\043\031\037\032\053\033" +
    "\052\001\001\000\006\011\152\021\210\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\011" +
    "\152\021\214\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\220\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\232\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\237\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\011\152\021\246" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\011\152\021\255\001\001\000\034\005\035" +
    "\006\036\007\005\010\042\017\110\020\047\024\040\026" +
    "\046\027\026\030\043\031\037\032\053\033\052\001\001" +
    "\000\006\011\152\021\254\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\005\035\006\036\007\005\010\042" +
    "\017\030\020\047\022\260\023\261\024\040\026\046\027" +
    "\026\030\043\031\037\032\053\033\052\001\001\000\036" +
    "\005\035\006\036\007\005\010\042\017\030\020\047\022" +
    "\301\024\040\026\046\027\026\030\043\031\037\032\053" +
    "\033\052\001\001\000\034\005\035\006\036\007\005\010" +
    "\042\017\110\020\047\024\040\026\046\027\026\030\043" +
    "\031\037\032\053\033\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\011\152\021\267\001\001\000\036" +
    "\005\035\006\036\007\005\010\042\017\030\020\047\022" +
    "\265\024\040\026\046\027\026\030\043\031\037\032\053" +
    "\033\052\001\001\000\034\005\035\006\036\007\005\010" +
    "\042\017\110\020\047\024\040\026\046\027\026\030\043" +
    "\031\037\032\053\033\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\005\035\006\036\007\005\010\042" +
    "\017\030\020\047\022\271\024\040\026\046\027\026\030" +
    "\043\031\037\032\053\033\052\001\001\000\034\005\035" +
    "\006\036\007\005\010\042\017\110\020\047\024\040\026" +
    "\046\027\026\030\043\031\037\032\053\033\052\001\001" +
    "\000\036\005\035\006\036\007\005\010\042\017\030\020" +
    "\047\022\277\024\040\026\046\027\026\030\043\031\037" +
    "\032\053\033\052\001\001\000\006\011\152\021\274\001" +
    "\001\000\002\001\001\000\036\005\035\006\036\007\005" +
    "\010\042\017\030\020\047\022\276\024\040\026\046\027" +
    "\026\030\043\031\037\032\053\033\052\001\001\000\034" +
    "\005\035\006\036\007\005\010\042\017\110\020\047\024" +
    "\040\026\046\027\026\030\043\031\037\032\053\033\052" +
    "\001\001\000\034\005\035\006\036\007\005\010\042\017" +
    "\110\020\047\024\040\026\046\027\026\030\043\031\037" +
    "\032\053\033\052\001\001\000\002\001\001\000\034\005" +
    "\035\006\036\007\005\010\042\017\110\020\047\024\040" +
    "\026\046\027\026\030\043\031\037\032\053\033\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\312\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\322\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\005\035\006\036\007\005\010\042" +
    "\017\030\020\047\022\327\024\040\026\046\027\026\030" +
    "\043\031\037\032\053\033\052\001\001\000\002\001\001" +
    "\000\034\005\035\006\036\007\005\010\042\017\110\020" +
    "\047\024\040\026\046\027\026\030\043\031\037\032\053" +
    "\033\052\001\001\000\002\001\001\000\004\016\332\001" +
    "\001\000\002\001\001\000\036\005\035\006\036\007\005" +
    "\010\042\017\030\020\047\022\335\024\040\026\046\027" +
    "\026\030\043\031\037\032\053\033\052\001\001\000\002" +
    "\001\001\000\034\005\035\006\036\007\005\010\042\017" +
    "\110\020\047\024\040\026\046\027\026\030\043\031\037" +
    "\032\053\033\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    }  


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {

 
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCION INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCIONES ::= error INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= GLOBAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= FUNCION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= METODO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // GLOBAL ::= RINICIO ENTORNO_LOCAL RFIN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("GLOBAL",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECLARACION ::= RINGRESAR LISTA_IDENTIFICADORES RCOMO RNUMERO PTCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DECLARACION ::= RINGRESAR LISTA_IDENTIFICADORES RCOMO RCADENA PTCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECLARACION ::= RINGRESAR LISTA_IDENTIFICADORES RCOMO RBOOLEAN PTCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECLARACION ::= RINGRESAR LISTA_IDENTIFICADORES RCOMO RCARACTER PTCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECLARACION ::= DECLARACIONyASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // LISTA_IDENTIFICADORES ::= LISTA_IDENTIFICADORES COMA IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_IDENTIFICADORES",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // LISTA_IDENTIFICADORES ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_IDENTIFICADORES",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACIONyASIGNACION ::= RINGRESAR LISTA_IDENTIFICADORES RCOMO TIPODATO RCONVALOR EXPRESION PTCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONyASIGNACION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // EXPRESION ::= ENTERO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // EXPRESION ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // EXPRESION ::= CADENA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // EXPRESION ::= CARACTER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EXPRESION ::= CARASCCI 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EXPRESION ::= RVERDADERO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EXPRESION ::= RFALSO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EXPRESION ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EXPRESION ::= PARIZQ EXPRESION PARDER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXPRESION ::= EXPRESION SUMA EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EXPRESION ::= EXPRESION RESTA EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXPRESION ::= EXPRESION MULTIPLICACION EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXPRESION ::= EXPRESION DIVIDIR EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXPRESION ::= EXPRESION POTENCIA CORIZQ EXPRESION CORDER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXPRESION ::= EXPRESION MODU EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TIPODATO ::= RNUMERO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TIPODATO ::= RCARACTER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TIPODATO ::= RBOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TIPODATO ::= RCADENA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ASIGNACION ::= LISTA_IDENTIFICADORES FLECHA EXPRESION PTCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FUNCION ::= RFUNCION IDENTIFICADOR TIPODATO LOCAL RRETORNAR CONDICION PTCOMA RFINFUNCION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FUNCION ::= RFUNCION IDENTIFICADOR TIPODATO RRETORNAR CONDICION PTCOMA RFINFUNCION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // FUNCION ::= RFUNCION IDENTIFICADOR TIPODATO RCONPARAMETROS PARIZQ LISTA_PARAMETROS PARDER LOCAL RRETORNAR CONDICION PTCOMA RFINFUNCION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // FUNCION ::= RFUNCION IDENTIFICADOR TIPODATO RCONPARAMETROS PARIZQ LISTA_PARAMETROS PARDER RRETORNAR CONDICION PTCOMA RFINFUNCION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // METODO ::= RMETODO IDENTIFICADOR LOCAL RFINMETODO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // METODO ::= RMETODO IDENTIFICADOR RFINMETODO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // METODO ::= RMETODO IDENTIFICADOR RCONPARAMETROS PARIZQ LISTA_PARAMETROS PARDER LOCAL RFINMETODO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // METODO ::= RMETODO IDENTIFICADOR RCONPARAMETROS PARIZQ LISTA_PARAMETROS PARDER RFINMETODO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // LISTA_PARAMETROS ::= LISTA_PARAMETROS COMA IDENTIFICADOR TIPODATO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // LISTA_PARAMETROS ::= IDENTIFICADOR TIPODATO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // LOCAL ::= LOCAL ENTORNO_LOCAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LOCAL",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // LOCAL ::= ENTORNO_LOCAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LOCAL",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ENTORNO_LOCAL ::= ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ENTORNO_LOCAL",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ENTORNO_LOCAL ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ENTORNO_LOCAL",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ENTORNO_LOCAL ::= CONDICIONAL_SI 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ENTORNO_LOCAL",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ENTORNO_LOCAL ::= SELECCION_MULTIPLE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ENTORNO_LOCAL",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ENTORNO_LOCAL ::= CICLO_PARA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ENTORNO_LOCAL",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ENTORNO_LOCAL ::= CICLO_MIENTRAS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ENTORNO_LOCAL",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ENTORNO_LOCAL ::= CICLO_REPETIR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ENTORNO_LOCAL",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ENTORNO_LOCAL ::= EJECUTAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ENTORNO_LOCAL",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ENTORNO_LOCAL ::= IMPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ENTORNO_LOCAL",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ENTORNO_LOCAL ::= IMPRESION_CONSALTO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ENTORNO_LOCAL",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CONDICIONAL_SI ::= RSI CONDICION RENTONCES LOCAL RFINSI 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_SI",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CONDICIONAL_SI ::= RSI CONDICION LISTA_OSI RFINSI 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_SI",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CONDICIONAL_SI ::= RSI CONDICION LISTA_OSI RDELOCONTRARIO LOCAL RFINSI 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_SI",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CONDICIONAL_SI ::= RSI CONDICION LOCAL RDELOCONTRARIO LOCAL RFINSI 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_SI",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CONDICION ::= EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CONDICION ::= EXPRESION RMAYOR EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CONDICION ::= EXPRESION RMENOR EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CONDICION ::= EXPRESION RMAYOROIGUAL EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CONDICION ::= EXPRESION RMENOROIGUAL EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // CONDICION ::= EXPRESION RESIGUAL EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // CONDICION ::= EXPRESION RESDIFERENTE EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // CONDICION ::= RNOT EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CONDICION ::= EXPRESION RAND EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CONDICION ::= EXPRESION ROR EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // LISTA_OSI ::= LISTA_OSI ROSI CONDICION RENTONCES LOCAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_OSI",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // LISTA_OSI ::= LOCAL ROSI CONDICION RENTONCES LOCAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_OSI",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SELECCION_MULTIPLE ::= RSEGUN EXPRESION RHACER LISTA_VALORENTONCES RFINSEGUN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SELECCION_MULTIPLE",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SELECCION_MULTIPLE ::= RSEGUN EXPRESION RHACER LISTA_VALORENTONCES RDELOCONTRARIO RENTONCES LOCAL RFINSEGUN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SELECCION_MULTIPLE",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // LISTA_VALORENTONCES ::= LISTA_VALORENTONCES INTABRE EXPRESION INTCIERRA RENTONCES LOCAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_VALORENTONCES",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // LISTA_VALORENTONCES ::= INTABRE EXPRESION INTCIERRA RENTONCES LOCAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_VALORENTONCES",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CICLO_PARA ::= RPARA IDENTIFICADOR FLECHA EXPRESION RHASTA EXPRESION RHACER LOCAL RFINPARA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_PARA",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CICLO_PARA ::= RPARA IDENTIFICADOR FLECHA EXPRESION RHASTA EXPRESION RHACER RFINPARA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_PARA",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // CICLO_PARA ::= RPARA IDENTIFICADOR FLECHA EXPRESION RHASTA EXPRESION RCONINCREMENTAL EXPRESION RHACER LOCAL RFINPARA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_PARA",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CICLO_PARA ::= RPARA IDENTIFICADOR FLECHA EXPRESION RHASTA EXPRESION RCONINCREMENTAL EXPRESION RHACER RFINPARA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_PARA",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CICLO_MIENTRAS ::= RMIENTRAS CONDICION RHACER LOCAL RFINMIENTRAS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_MIENTRAS",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CICLO_MIENTRAS ::= RMIENTRAS CONDICION RHACER RFINMIENTRAS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_MIENTRAS",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CICLO_REPETIR ::= RREPETIR LOCAL RHASTAQUE CONDICION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_REPETIR",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CICLO_REPETIR ::= RREPETIR RHASTAQUE CONDICION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_REPETIR",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EJECUTAR ::= REJECUTAR IDENTIFICADOR PARIZQ PARDER PTCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EJECUTAR",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EJECUTAR ::= REJECUTAR IDENTIFICADOR PARIZQ LISTA_PARAMETROS PARDER PTCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EJECUTAR",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // IMPRESION ::= RIMPRIMIR EXPRESION PTCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPRESION",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // IMPRESION_CONSALTO ::= RIMPRIMIRNL EXPRESION PTCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPRESION_CONSALTO",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
