
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import Clases.ErrorLenguaje;
import java_cup.runtime.*;
import Structures.Instrucciones.Comentarios;
import Structures.Instrucciones.Declaracion;
import Structures.Instrucciones.Instruccion;
import Structures.Instrucciones.Operacion;
import Structures.Instrucciones.Si;
import Structures.Instrucciones.Main;
import Structures.Instrucciones.Asignacion;
import java.util.LinkedList;
import Structures.Nodo;
import Structures.Arbol;
import Structures.Produccion;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\144\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\033\005" +
    "\000\002\033\004\000\002\034\004\000\002\034\003\000" +
    "\002\035\003\000\002\035\003\000\002\032\004\000\002" +
    "\032\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\004\011\000\002\004\011\000\002\004\011" +
    "\000\002\004\011\000\002\005\005\000\002\005\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\004\000\002\007\005" +
    "\000\002\007\005\000\002\007\005\000\002\007\005\000" +
    "\002\007\005\000\002\007\007\000\002\007\005\000\002" +
    "\006\006\000\002\012\012\000\002\012\011\000\002\012" +
    "\016\000\002\012\015\000\002\013\006\000\002\013\005" +
    "\000\002\013\012\000\002\013\011\000\002\014\006\000" +
    "\002\014\004\000\002\020\004\000\002\020\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\016\007\000\002" +
    "\016\007\000\002\016\011\000\002\016\010\000\002\040" +
    "\003\000\002\040\005\000\002\040\005\000\002\040\005" +
    "\000\002\040\005\000\002\040\005\000\002\040\005\000" +
    "\002\017\005\000\002\017\005\000\002\017\004\000\002" +
    "\017\003\000\002\021\007\000\002\021\006\000\002\022" +
    "\007\000\002\022\012\000\002\023\010\000\002\023\007" +
    "\000\002\024\013\000\002\024\012\000\002\024\015\000" +
    "\002\024\014\000\002\025\007\000\002\025\006\000\002" +
    "\026\006\000\002\026\005\000\002\027\007\000\002\027" +
    "\010\000\002\037\006\000\002\037\007\000\002\036\005" +
    "\000\002\036\003\000\002\030\005\000\002\031\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\353\000\012\003\011\004\007\027\014\030\006\001" +
    "\002\000\004\002\uffff\001\002\000\004\002\355\001\002" +
    "\000\010\002\ufff7\027\ufff7\030\ufff7\001\002\000\040\005" +
    "\022\006\045\010\052\014\020\017\017\024\051\027\042" +
    "\030\033\031\054\035\046\037\023\041\027\042\025\043" +
    "\034\044\044\001\002\000\010\002\ufffe\027\014\030\006" +
    "\001\002\000\004\002\ufffd\001\002\000\004\002\000\001" +
    "\002\000\010\002\ufff9\027\ufff9\030\ufff9\001\002\000\010" +
    "\002\ufff8\027\ufff8\030\ufff8\001\002\000\010\002\ufffa\027" +
    "\ufffa\030\ufffa\001\002\000\064\005\uffc9\006\uffc9\007\uffc9" +
    "\010\uffc9\013\uffc9\014\uffc9\017\uffc9\021\uffc9\022\uffc9\023" +
    "\uffc9\024\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9\034\uffc9" +
    "\035\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9\043" +
    "\uffc9\044\uffc9\101\uffc9\001\002\000\030\044\070\045\063" +
    "\046\061\047\057\050\071\051\060\053\066\070\145\075" +
    "\062\076\064\077\065\001\002\000\004\044\044\001\002" +
    "\000\040\005\ufff2\006\ufff2\010\ufff2\014\ufff2\017\ufff2\024" +
    "\ufff2\027\ufff2\030\ufff2\031\ufff2\035\ufff2\037\ufff2\041\ufff2" +
    "\042\ufff2\043\ufff2\044\ufff2\001\002\000\004\002\ufffb\001" +
    "\002\000\034\014\020\017\017\024\051\027\042\030\033" +
    "\031\054\035\046\037\023\040\301\041\027\042\025\043" +
    "\034\044\044\001\002\000\040\005\277\006\045\010\052" +
    "\014\020\017\017\024\051\027\042\030\033\031\054\035" +
    "\046\037\023\041\027\042\025\043\034\044\044\001\002" +
    "\000\026\044\070\045\063\046\061\047\057\050\071\051" +
    "\060\053\066\075\062\076\064\077\065\001\002\000\064" +
    "\005\uffcd\006\uffcd\007\uffcd\010\uffcd\013\uffcd\014\uffcd\017" +
    "\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd\026\uffcd\027\uffcd" +
    "\030\uffcd\031\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040" +
    "\uffcd\041\uffcd\042\uffcd\043\uffcd\044\uffcd\101\uffcd\001\002" +
    "\000\004\044\263\001\002\000\006\103\257\105\256\001" +
    "\002\000\064\005\uffc7\006\uffc7\007\uffc7\010\uffc7\013\uffc7" +
    "\014\uffc7\017\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7\026" +
    "\uffc7\027\uffc7\030\uffc7\031\uffc7\034\uffc7\035\uffc7\036\uffc7" +
    "\037\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7\044\uffc7\101" +
    "\uffc7\001\002\000\064\005\uffcb\006\uffcb\007\uffcb\010\uffcb" +
    "\013\uffcb\014\uffcb\017\uffcb\021\uffcb\022\uffcb\023\uffcb\024" +
    "\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\034\uffcb\035\uffcb" +
    "\036\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb\044" +
    "\uffcb\101\uffcb\001\002\000\064\005\uffc3\006\uffc3\007\uffc3" +
    "\010\uffc3\013\uffc3\014\uffc3\017\uffc3\021\uffc3\022\uffc3\023" +
    "\uffc3\024\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3\034\uffc3" +
    "\035\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3\042\uffc3\043" +
    "\uffc3\044\uffc3\101\uffc3\001\002\000\026\044\070\045\063" +
    "\046\061\047\057\050\071\051\060\053\066\075\062\076" +
    "\064\077\065\001\002\000\040\005\ufff3\006\ufff3\010\ufff3" +
    "\014\ufff3\017\ufff3\024\ufff3\027\ufff3\030\ufff3\031\ufff3\035" +
    "\ufff3\037\ufff3\041\ufff3\042\ufff3\043\ufff3\044\ufff3\001\002" +
    "\000\064\005\uffce\006\uffce\007\uffce\010\uffce\013\uffce\014" +
    "\uffce\017\uffce\021\uffce\022\uffce\023\uffce\024\uffce\026\uffce" +
    "\027\uffce\030\uffce\031\uffce\034\uffce\035\uffce\036\uffce\037" +
    "\uffce\040\uffce\041\uffce\042\uffce\043\uffce\044\uffce\101\uffce" +
    "\001\002\000\064\005\uffc8\006\uffc8\007\uffc8\010\uffc8\013" +
    "\uffc8\014\uffc8\017\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8" +
    "\026\uffc8\027\uffc8\030\uffc8\031\uffc8\034\uffc8\035\uffc8\036" +
    "\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8" +
    "\101\uffc8\001\002\000\064\005\uffcc\006\uffcc\007\uffcc\010" +
    "\uffcc\013\uffcc\014\uffcc\017\uffcc\021\uffcc\022\uffcc\023\uffcc" +
    "\024\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc\034\uffcc\035" +
    "\uffcc\036\uffcc\037\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc" +
    "\044\uffcc\101\uffcc\001\002\000\064\005\uffca\006\uffca\007" +
    "\uffca\010\uffca\013\uffca\014\uffca\017\uffca\021\uffca\022\uffca" +
    "\023\uffca\024\uffca\026\uffca\027\uffca\030\uffca\031\uffca\034" +
    "\uffca\035\uffca\036\uffca\037\uffca\040\uffca\041\uffca\042\uffca" +
    "\043\uffca\044\uffca\101\uffca\001\002\000\064\005\uffc4\006" +
    "\uffc4\007\uffc4\010\uffc4\013\uffc4\014\uffc4\017\uffc4\021\uffc4" +
    "\022\uffc4\023\uffc4\024\uffc4\026\uffc4\027\uffc4\030\uffc4\031" +
    "\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4" +
    "\042\uffc4\043\uffc4\044\uffc4\101\uffc4\001\002\000\040\005" +
    "\ufff5\006\ufff5\010\ufff5\014\ufff5\017\ufff5\024\ufff5\027\ufff5" +
    "\030\ufff5\031\ufff5\035\ufff5\037\ufff5\041\ufff5\042\ufff5\043" +
    "\ufff5\044\ufff5\001\002\000\010\015\uffec\103\uffec\105\uffec" +
    "\001\002\000\004\044\241\001\002\000\030\044\070\045" +
    "\063\046\061\047\057\050\071\051\060\053\066\070\145" +
    "\075\062\076\064\077\065\001\002\000\064\005\uffc5\006" +
    "\uffc5\007\uffc5\010\uffc5\013\uffc5\014\uffc5\017\uffc5\021\uffc5" +
    "\022\uffc5\023\uffc5\024\uffc5\026\uffc5\027\uffc5\030\uffc5\031" +
    "\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5\041\uffc5" +
    "\042\uffc5\043\uffc5\044\uffc5\101\uffc5\001\002\000\064\005" +
    "\uffc6\006\uffc6\007\uffc6\010\uffc6\013\uffc6\014\uffc6\017\uffc6" +
    "\021\uffc6\022\uffc6\023\uffc6\024\uffc6\026\uffc6\027\uffc6\030" +
    "\uffc6\031\uffc6\034\uffc6\035\uffc6\036\uffc6\037\uffc6\040\uffc6" +
    "\041\uffc6\042\uffc6\043\uffc6\044\uffc6\101\uffc6\001\002\000" +
    "\026\044\070\045\063\046\061\047\057\050\071\051\060" +
    "\053\066\075\062\076\064\077\065\001\002\000\004\044" +
    "\131\001\002\000\040\005\ufff4\006\ufff4\010\ufff4\014\ufff4" +
    "\017\ufff4\024\ufff4\027\ufff4\030\ufff4\031\ufff4\035\ufff4\037" +
    "\ufff4\041\ufff4\042\ufff4\043\ufff4\044\ufff4\001\002\000\004" +
    "\044\055\001\002\000\004\103\056\001\002\000\026\044" +
    "\070\045\063\046\061\047\057\050\071\051\060\053\066" +
    "\075\062\076\064\077\065\001\002\000\142\005\uffe9\006" +
    "\uffe9\007\uffe9\010\uffe9\013\uffe9\014\uffe9\017\uffe9\020\uffe9" +
    "\021\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9\026\uffe9\027" +
    "\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9" +
    "\036\uffe9\037\uffe9\040\uffe9\041\uffe9\042\uffe9\043\uffe9\044" +
    "\uffe9\052\uffe9\053\uffe9\054\uffe9\055\uffe9\056\uffe9\057\uffe9" +
    "\060\uffe9\061\uffe9\062\uffe9\063\uffe9\064\uffe9\065\uffe9\066" +
    "\uffe9\067\uffe9\100\uffe9\101\uffe9\102\uffe9\104\uffe9\105\uffe9" +
    "\107\uffe9\001\002\000\142\005\uffea\006\uffea\007\uffea\010" +
    "\uffea\013\uffea\014\uffea\017\uffea\020\uffea\021\uffea\022\uffea" +
    "\023\uffea\024\uffea\025\uffea\026\uffea\027\uffea\030\uffea\031" +
    "\uffea\032\uffea\033\uffea\034\uffea\035\uffea\036\uffea\037\uffea" +
    "\040\uffea\041\uffea\042\uffea\043\uffea\044\uffea\052\uffea\053" +
    "\uffea\054\uffea\055\uffea\056\uffea\057\uffea\060\uffea\061\uffea" +
    "\062\uffea\063\uffea\064\uffea\065\uffea\066\uffea\067\uffea\100" +
    "\uffea\101\uffea\102\uffea\104\uffea\105\uffea\107\uffea\001\002" +
    "\000\142\005\uffe7\006\uffe7\007\uffe7\010\uffe7\013\uffe7\014" +
    "\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7" +
    "\025\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7\032\uffe7\033" +
    "\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7\040\uffe7\041\uffe7" +
    "\042\uffe7\043\uffe7\044\uffe7\052\uffe7\053\uffe7\054\uffe7\055" +
    "\uffe7\056\uffe7\057\uffe7\060\uffe7\061\uffe7\062\uffe7\063\uffe7" +
    "\064\uffe7\065\uffe7\066\uffe7\067\uffe7\100\uffe7\101\uffe7\102" +
    "\uffe7\104\uffe7\105\uffe7\107\uffe7\001\002\000\142\005\uffe6" +
    "\006\uffe6\007\uffe6\010\uffe6\013\uffe6\014\uffe6\017\uffe6\020" +
    "\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6" +
    "\027\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6\034\uffe6\035" +
    "\uffe6\036\uffe6\037\uffe6\040\uffe6\041\uffe6\042\uffe6\043\uffe6" +
    "\044\uffe6\052\uffe6\053\uffe6\054\uffe6\055\uffe6\056\uffe6\057" +
    "\uffe6\060\uffe6\061\uffe6\062\uffe6\063\uffe6\064\uffe6\065\uffe6" +
    "\066\uffe6\067\uffe6\100\uffe6\101\uffe6\102\uffe6\104\uffe6\105" +
    "\uffe6\107\uffe6\001\002\000\142\005\uffeb\006\uffeb\007\uffeb" +
    "\010\uffeb\013\uffeb\014\uffeb\017\uffeb\020\uffeb\021\uffeb\022" +
    "\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb" +
    "\031\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\037" +
    "\uffeb\040\uffeb\041\uffeb\042\uffeb\043\uffeb\044\uffeb\052\uffeb" +
    "\053\uffeb\054\uffeb\055\uffeb\056\uffeb\057\uffeb\060\uffeb\061" +
    "\uffeb\062\uffeb\063\uffeb\064\uffeb\065\uffeb\066\uffeb\067\uffeb" +
    "\100\uffeb\101\uffeb\102\uffeb\104\uffeb\105\uffeb\107\uffeb\001" +
    "\002\000\142\005\uffe5\006\uffe5\007\uffe5\010\uffe5\013\uffe5" +
    "\014\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024" +
    "\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5" +
    "\033\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5\041" +
    "\uffe5\042\uffe5\043\uffe5\044\uffe5\052\uffe5\053\uffe5\054\uffe5" +
    "\055\uffe5\056\uffe5\057\uffe5\060\uffe5\061\uffe5\062\uffe5\063" +
    "\uffe5\064\uffe5\065\uffe5\066\uffe5\067\uffe5\100\uffe5\101\uffe5" +
    "\102\uffe5\104\uffe5\105\uffe5\107\uffe5\001\002\000\026\044" +
    "\070\045\063\046\061\047\057\050\071\051\060\053\066" +
    "\075\062\076\064\077\065\001\002\000\026\044\070\045" +
    "\063\046\061\047\057\050\071\051\060\053\066\075\062" +
    "\076\064\077\065\001\002\000\020\032\076\052\077\053" +
    "\073\054\074\055\072\056\100\057\075\001\002\000\142" +
    "\005\uffe4\006\uffe4\007\uffe4\010\uffe4\013\uffe4\014\uffe4\017" +
    "\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4" +
    "\026\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4\034" +
    "\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4" +
    "\043\uffe4\044\uffe4\052\uffe4\053\uffe4\054\uffe4\055\uffe4\056" +
    "\uffe4\057\uffe4\060\uffe4\061\uffe4\062\uffe4\063\uffe4\064\uffe4" +
    "\065\uffe4\066\uffe4\067\uffe4\100\uffe4\101\uffe4\102\uffe4\104" +
    "\uffe4\105\uffe4\107\uffe4\001\002\000\142\005\uffe8\006\uffe8" +
    "\007\uffe8\010\uffe8\013\uffe8\014\uffe8\017\uffe8\020\uffe8\021" +
    "\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8" +
    "\030\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8\036" +
    "\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8\044\uffe8" +
    "\052\uffe8\053\uffe8\054\uffe8\055\uffe8\056\uffe8\057\uffe8\060" +
    "\uffe8\061\uffe8\062\uffe8\063\uffe8\064\uffe8\065\uffe8\066\uffe8" +
    "\067\uffe8\100\uffe8\101\uffe8\102\uffe8\104\uffe8\105\uffe8\107" +
    "\uffe8\001\002\000\026\044\070\045\063\046\061\047\057" +
    "\050\071\051\060\053\066\075\062\076\064\077\065\001" +
    "\002\000\026\044\070\045\063\046\061\047\057\050\071" +
    "\051\060\053\066\075\062\076\064\077\065\001\002\000" +
    "\026\044\070\045\063\046\061\047\057\050\071\051\060" +
    "\053\066\075\062\076\064\077\065\001\002\000\004\106" +
    "\120\001\002\000\026\044\070\045\063\046\061\047\057" +
    "\050\071\051\060\053\066\075\062\076\064\077\065\001" +
    "\002\000\026\044\070\045\063\046\061\047\057\050\071" +
    "\051\060\053\066\075\062\076\064\077\065\001\002\000" +
    "\026\044\070\045\063\046\061\047\057\050\071\051\060" +
    "\053\066\075\062\076\064\077\065\001\002\000\142\005" +
    "\uffdc\006\uffdc\007\uffdc\010\uffdc\013\uffdc\014\uffdc\017\uffdc" +
    "\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026" +
    "\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc" +
    "\035\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043" +
    "\uffdc\044\uffdc\052\uffdc\053\uffdc\054\uffdc\055\uffdc\056\uffdc" +
    "\057\uffdc\060\uffdc\061\uffdc\062\uffdc\063\uffdc\064\uffdc\065" +
    "\uffdc\066\uffdc\067\uffdc\100\uffdc\101\uffdc\102\uffdc\104\uffdc" +
    "\105\uffdc\107\uffdc\001\002\000\142\005\uffe1\006\uffe1\007" +
    "\uffe1\010\uffe1\013\uffe1\014\uffe1\017\uffe1\020\uffe1\021\uffe1" +
    "\022\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030" +
    "\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1" +
    "\037\uffe1\040\uffe1\041\uffe1\042\uffe1\043\uffe1\044\uffe1\052" +
    "\uffe1\053\uffe1\054\074\055\072\056\100\057\075\060\uffe1" +
    "\061\uffe1\062\uffe1\063\uffe1\064\uffe1\065\uffe1\066\uffe1\067" +
    "\uffe1\100\uffe1\101\uffe1\102\uffe1\104\uffe1\105\uffe1\107\uffe1" +
    "\001\002\000\022\025\105\033\104\052\077\053\073\054" +
    "\074\055\072\056\100\057\075\001\002\000\026\044\070" +
    "\045\063\046\061\047\057\050\071\051\060\053\066\075" +
    "\062\076\064\077\065\001\002\000\034\014\020\017\017" +
    "\024\051\027\042\030\033\031\054\034\110\035\046\037" +
    "\023\041\027\042\025\043\034\044\044\001\002\000\056" +
    "\007\uffcf\013\uffcf\014\uffcf\017\uffcf\021\uffcf\022\uffcf\023" +
    "\uffcf\024\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\034\uffcf" +
    "\035\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf\043" +
    "\uffcf\044\uffcf\101\uffcf\001\002\000\034\014\020\017\017" +
    "\024\051\027\042\030\033\031\054\034\112\035\046\037" +
    "\023\041\027\042\025\043\034\044\044\001\002\000\064" +
    "\005\uffac\006\uffac\007\uffac\010\uffac\013\uffac\014\uffac\017" +
    "\uffac\021\uffac\022\uffac\023\uffac\024\uffac\026\uffac\027\uffac" +
    "\030\uffac\031\uffac\034\uffac\035\uffac\036\uffac\037\uffac\040" +
    "\uffac\041\uffac\042\uffac\043\uffac\044\uffac\101\uffac\001\002" +
    "\000\056\007\uffd0\013\uffd0\014\uffd0\017\uffd0\021\uffd0\022" +
    "\uffd0\023\uffd0\024\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0" +
    "\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0\042" +
    "\uffd0\043\uffd0\044\uffd0\101\uffd0\001\002\000\064\005\uffad" +
    "\006\uffad\007\uffad\010\uffad\013\uffad\014\uffad\017\uffad\021" +
    "\uffad\022\uffad\023\uffad\024\uffad\026\uffad\027\uffad\030\uffad" +
    "\031\uffad\034\uffad\035\uffad\036\uffad\037\uffad\040\uffad\041" +
    "\uffad\042\uffad\043\uffad\044\uffad\101\uffad\001\002\000\020" +
    "\025\114\052\077\053\073\054\074\055\072\056\100\057" +
    "\075\001\002\000\034\014\020\017\017\024\051\027\042" +
    "\030\033\031\054\034\116\035\046\037\023\041\027\042" +
    "\025\043\034\044\044\001\002\000\034\014\020\017\017" +
    "\024\051\027\042\030\033\031\054\034\117\035\046\037" +
    "\023\041\027\042\025\043\034\044\044\001\002\000\064" +
    "\005\uffaa\006\uffaa\007\uffaa\010\uffaa\013\uffaa\014\uffaa\017" +
    "\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa\026\uffaa\027\uffaa" +
    "\030\uffaa\031\uffaa\034\uffaa\035\uffaa\036\uffaa\037\uffaa\040" +
    "\uffaa\041\uffaa\042\uffaa\043\uffaa\044\uffaa\101\uffaa\001\002" +
    "\000\064\005\uffab\006\uffab\007\uffab\010\uffab\013\uffab\014" +
    "\uffab\017\uffab\021\uffab\022\uffab\023\uffab\024\uffab\026\uffab" +
    "\027\uffab\030\uffab\031\uffab\034\uffab\035\uffab\036\uffab\037" +
    "\uffab\040\uffab\041\uffab\042\uffab\043\uffab\044\uffab\101\uffab" +
    "\001\002\000\026\044\070\045\063\046\061\047\057\050" +
    "\071\051\060\053\066\075\062\076\064\077\065\001\002" +
    "\000\020\052\077\053\073\054\074\055\072\056\100\057" +
    "\075\107\122\001\002\000\142\005\uffdd\006\uffdd\007\uffdd" +
    "\010\uffdd\013\uffdd\014\uffdd\017\uffdd\020\uffdd\021\uffdd\022" +
    "\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd" +
    "\031\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037" +
    "\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd\044\uffdd\052\uffdd" +
    "\053\uffdd\054\uffdd\055\uffdd\056\uffdd\057\uffdd\060\uffdd\061" +
    "\uffdd\062\uffdd\063\uffdd\064\uffdd\065\uffdd\066\uffdd\067\uffdd" +
    "\100\uffdd\101\uffdd\102\uffdd\104\uffdd\105\uffdd\107\uffdd\001" +
    "\002\000\142\005\uffdf\006\uffdf\007\uffdf\010\uffdf\013\uffdf" +
    "\014\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf\024" +
    "\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf" +
    "\033\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf\041" +
    "\uffdf\042\uffdf\043\uffdf\044\uffdf\052\uffdf\053\uffdf\054\uffdf" +
    "\055\uffdf\056\100\057\075\060\uffdf\061\uffdf\062\uffdf\063" +
    "\uffdf\064\uffdf\065\uffdf\066\uffdf\067\uffdf\100\uffdf\101\uffdf" +
    "\102\uffdf\104\uffdf\105\uffdf\107\uffdf\001\002\000\142\005" +
    "\uffe0\006\uffe0\007\uffe0\010\uffe0\013\uffe0\014\uffe0\017\uffe0" +
    "\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026" +
    "\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0" +
    "\035\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0\043" +
    "\uffe0\044\uffe0\052\uffe0\053\uffe0\054\074\055\072\056\100" +
    "\057\075\060\uffe0\061\uffe0\062\uffe0\063\uffe0\064\uffe0\065" +
    "\uffe0\066\uffe0\067\uffe0\100\uffe0\101\uffe0\102\uffe0\104\uffe0" +
    "\105\uffe0\107\uffe0\001\002\000\142\005\uffde\006\uffde\007" +
    "\uffde\010\uffde\013\uffde\014\uffde\017\uffde\020\uffde\021\uffde" +
    "\022\uffde\023\uffde\024\uffde\025\uffde\026\uffde\027\uffde\030" +
    "\uffde\031\uffde\032\uffde\033\uffde\034\uffde\035\uffde\036\uffde" +
    "\037\uffde\040\uffde\041\uffde\042\uffde\043\uffde\044\uffde\052" +
    "\uffde\053\uffde\054\uffde\055\uffde\056\100\057\075\060\uffde" +
    "\061\uffde\062\uffde\063\uffde\064\uffde\065\uffde\066\uffde\067" +
    "\uffde\100\uffde\101\uffde\102\uffde\104\uffde\105\uffde\107\uffde" +
    "\001\002\000\142\005\uffe3\006\uffe3\007\uffe3\010\uffe3\013" +
    "\uffe3\014\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3" +
    "\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032" +
    "\uffe3\033\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3" +
    "\041\uffe3\042\uffe3\043\uffe3\044\uffe3\052\uffe3\053\uffe3\054" +
    "\074\055\072\056\100\057\075\060\uffe3\061\uffe3\062\uffe3" +
    "\063\uffe3\064\uffe3\065\uffe3\066\uffe3\067\uffe3\100\uffe3\101" +
    "\uffe3\102\uffe3\104\uffe3\105\uffe3\107\uffe3\001\002\000\020" +
    "\052\077\053\073\054\074\055\072\056\100\057\075\100" +
    "\130\001\002\000\142\005\uffe2\006\uffe2\007\uffe2\010\uffe2" +
    "\013\uffe2\014\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023" +
    "\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2" +
    "\032\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\040" +
    "\uffe2\041\uffe2\042\uffe2\043\uffe2\044\uffe2\052\uffe2\053\uffe2" +
    "\054\uffe2\055\uffe2\056\uffe2\057\uffe2\060\uffe2\061\uffe2\062" +
    "\uffe2\063\uffe2\064\uffe2\065\uffe2\066\uffe2\067\uffe2\100\uffe2" +
    "\101\uffe2\102\uffe2\104\uffe2\105\uffe2\107\uffe2\001\002\000" +
    "\002\001\002\000\036\012\135\013\134\014\020\017\017" +
    "\024\051\027\042\030\033\031\054\035\046\037\023\041" +
    "\027\042\025\043\034\044\044\001\002\000\034\013\206" +
    "\014\020\017\017\024\051\027\042\030\033\031\054\035" +
    "\046\037\023\041\027\042\025\043\034\044\044\001\002" +
    "\000\030\044\070\045\063\046\061\047\057\050\071\051" +
    "\060\053\066\070\145\075\062\076\064\077\065\001\002" +
    "\000\004\077\136\001\002\000\004\044\137\001\002\000" +
    "\002\001\002\000\006\100\142\105\141\001\002\000\004" +
    "\044\200\001\002\000\034\013\144\014\020\017\017\024" +
    "\051\027\042\030\033\031\054\035\046\037\023\041\027" +
    "\042\025\043\034\044\044\001\002\000\034\013\174\014" +
    "\020\017\017\024\051\027\042\030\033\031\054\035\046" +
    "\037\023\041\027\042\025\043\034\044\044\001\002\000" +
    "\030\044\070\045\063\046\061\047\057\050\071\051\060" +
    "\053\066\070\145\075\062\076\064\077\065\001\002\000" +
    "\026\044\070\045\063\046\061\047\057\050\071\051\060" +
    "\053\066\075\062\076\064\077\065\001\002\000\076\005" +
    "\uffb4\006\uffb4\007\uffb4\010\uffb4\013\uffb4\014\uffb4\017\uffb4" +
    "\020\uffb4\021\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\026" +
    "\uffb4\027\uffb4\030\uffb4\031\uffb4\034\uffb4\035\uffb4\036\uffb4" +
    "\037\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4\066" +
    "\167\067\170\101\uffb4\104\uffb4\001\002\000\126\005\uffbe" +
    "\006\uffbe\007\uffbe\010\uffbe\013\uffbe\014\uffbe\017\uffbe\020" +
    "\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe" +
    "\027\uffbe\030\uffbe\031\uffbe\034\uffbe\035\uffbe\036\uffbe\037" +
    "\uffbe\040\uffbe\041\uffbe\042\uffbe\043\uffbe\044\uffbe\052\077" +
    "\053\073\054\074\055\072\056\100\057\075\060\157\061" +
    "\153\062\156\063\155\064\160\065\154\066\uffbe\067\uffbe" +
    "\101\uffbe\104\uffbe\001\002\000\004\104\151\001\002\000" +
    "\004\011\152\001\002\000\040\005\uffd7\006\uffd7\010\uffd7" +
    "\014\uffd7\017\uffd7\024\uffd7\027\uffd7\030\uffd7\031\uffd7\035" +
    "\uffd7\037\uffd7\041\uffd7\042\uffd7\043\uffd7\044\uffd7\001\002" +
    "\000\026\044\070\045\063\046\061\047\057\050\071\051" +
    "\060\053\066\075\062\076\064\077\065\001\002\000\026" +
    "\044\070\045\063\046\061\047\057\050\071\051\060\053" +
    "\066\075\062\076\064\077\065\001\002\000\026\044\070" +
    "\045\063\046\061\047\057\050\071\051\060\053\066\075" +
    "\062\076\064\077\065\001\002\000\026\044\070\045\063" +
    "\046\061\047\057\050\071\051\060\053\066\075\062\076" +
    "\064\077\065\001\002\000\026\044\070\045\063\046\061" +
    "\047\057\050\071\051\060\053\066\075\062\076\064\077" +
    "\065\001\002\000\026\044\070\045\063\046\061\047\057" +
    "\050\071\051\060\053\066\075\062\076\064\077\065\001" +
    "\002\000\112\005\uffb9\006\uffb9\007\uffb9\010\uffb9\013\uffb9" +
    "\014\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9\024" +
    "\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9\034\uffb9" +
    "\035\uffb9\036\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9\043" +
    "\uffb9\044\uffb9\052\077\053\073\054\074\055\072\056\100" +
    "\057\075\066\uffb9\067\uffb9\101\uffb9\104\uffb9\001\002\000" +
    "\112\005\uffbd\006\uffbd\007\uffbd\010\uffbd\013\uffbd\014\uffbd" +
    "\017\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025" +
    "\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd\034\uffbd\035\uffbd" +
    "\036\uffbd\037\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd\044" +
    "\uffbd\052\077\053\073\054\074\055\072\056\100\057\075" +
    "\066\uffbd\067\uffbd\101\uffbd\104\uffbd\001\002\000\112\005" +
    "\uffbb\006\uffbb\007\uffbb\010\uffbb\013\uffbb\014\uffbb\017\uffbb" +
    "\020\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb\026" +
    "\uffbb\027\uffbb\030\uffbb\031\uffbb\034\uffbb\035\uffbb\036\uffbb" +
    "\037\uffbb\040\uffbb\041\uffbb\042\uffbb\043\uffbb\044\uffbb\052" +
    "\077\053\073\054\074\055\072\056\100\057\075\066\uffbb" +
    "\067\uffbb\101\uffbb\104\uffbb\001\002\000\112\005\uffba\006" +
    "\uffba\007\uffba\010\uffba\013\uffba\014\uffba\017\uffba\020\uffba" +
    "\021\uffba\022\uffba\023\uffba\024\uffba\025\uffba\026\uffba\027" +
    "\uffba\030\uffba\031\uffba\034\uffba\035\uffba\036\uffba\037\uffba" +
    "\040\uffba\041\uffba\042\uffba\043\uffba\044\uffba\052\077\053" +
    "\073\054\074\055\072\056\100\057\075\066\uffba\067\uffba" +
    "\101\uffba\104\uffba\001\002\000\112\005\uffb8\006\uffb8\007" +
    "\uffb8\010\uffb8\013\uffb8\014\uffb8\017\uffb8\020\uffb8\021\uffb8" +
    "\022\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8\027\uffb8\030" +
    "\uffb8\031\uffb8\034\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8" +
    "\041\uffb8\042\uffb8\043\uffb8\044\uffb8\052\077\053\073\054" +
    "\074\055\072\056\100\057\075\066\uffb8\067\uffb8\101\uffb8" +
    "\104\uffb8\001\002\000\112\005\uffbc\006\uffbc\007\uffbc\010" +
    "\uffbc\013\uffbc\014\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc" +
    "\023\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc\031" +
    "\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc" +
    "\042\uffbc\043\uffbc\044\uffbc\052\077\053\073\054\074\055" +
    "\072\056\100\057\075\066\uffbc\067\uffbc\101\uffbc\104\uffbc" +
    "\001\002\000\026\044\070\045\063\046\061\047\057\050" +
    "\071\051\060\053\066\075\062\076\064\077\065\001\002" +
    "\000\026\044\070\045\063\046\061\047\057\050\071\051" +
    "\060\053\066\075\062\076\064\077\065\001\002\000\072" +
    "\005\uffb6\006\uffb6\007\uffb6\010\uffb6\013\uffb6\014\uffb6\017" +
    "\uffb6\020\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6\025\uffb6" +
    "\026\uffb6\027\uffb6\030\uffb6\031\uffb6\034\uffb6\035\uffb6\036" +
    "\uffb6\037\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6" +
    "\101\uffb6\104\uffb6\001\002\000\072\005\uffb7\006\uffb7\007" +
    "\uffb7\010\uffb7\013\uffb7\014\uffb7\017\uffb7\020\uffb7\021\uffb7" +
    "\022\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7\030" +
    "\uffb7\031\uffb7\034\uffb7\035\uffb7\036\uffb7\037\uffb7\040\uffb7" +
    "\041\uffb7\042\uffb7\043\uffb7\044\uffb7\101\uffb7\104\uffb7\001" +
    "\002\000\072\005\uffb5\006\uffb5\007\uffb5\010\uffb5\013\uffb5" +
    "\014\uffb5\017\uffb5\020\uffb5\021\uffb5\022\uffb5\023\uffb5\024" +
    "\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5\031\uffb5\034\uffb5" +
    "\035\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5\043" +
    "\uffb5\044\uffb5\101\uffb5\104\uffb5\001\002\000\030\044\070" +
    "\045\063\046\061\047\057\050\071\051\060\053\066\070" +
    "\145\075\062\076\064\077\065\001\002\000\004\104\176" +
    "\001\002\000\004\011\177\001\002\000\040\005\uffd8\006" +
    "\uffd8\010\uffd8\014\uffd8\017\uffd8\024\uffd8\027\uffd8\030\uffd8" +
    "\031\uffd8\035\uffd8\037\uffd8\041\uffd8\042\uffd8\043\uffd8\044" +
    "\uffd8\001\002\000\002\001\002\000\006\100\uffd2\105\uffd2" +
    "\001\002\000\006\100\uffd1\105\uffd1\001\002\000\004\104" +
    "\204\001\002\000\004\011\205\001\002\000\040\005\uffd9" +
    "\006\uffd9\010\uffd9\014\uffd9\017\uffd9\024\uffd9\027\uffd9\030" +
    "\uffd9\031\uffd9\035\uffd9\037\uffd9\041\uffd9\042\uffd9\043\uffd9" +
    "\044\uffd9\001\002\000\030\044\070\045\063\046\061\047" +
    "\057\050\071\051\060\053\066\070\145\075\062\076\064" +
    "\077\065\001\002\000\004\104\210\001\002\000\004\011" +
    "\211\001\002\000\040\005\uffda\006\uffda\010\uffda\014\uffda" +
    "\017\uffda\024\uffda\027\uffda\030\uffda\031\uffda\035\uffda\037" +
    "\uffda\041\uffda\042\uffda\043\uffda\044\uffda\001\002\000\020" +
    "\025\213\052\077\053\073\054\074\055\072\056\100\057" +
    "\075\001\002\000\004\101\215\001\002\000\010\022\224" +
    "\026\222\101\223\001\002\000\026\044\070\045\063\046" +
    "\061\047\057\050\071\051\060\053\066\075\062\076\064" +
    "\077\065\001\002\000\020\052\077\053\073\054\074\055" +
    "\072\056\100\057\075\102\217\001\002\000\004\020\220" +
    "\001\002\000\032\014\020\017\017\024\051\027\042\030" +
    "\033\031\054\035\046\037\023\041\027\042\025\043\034" +
    "\044\044\001\002\000\040\014\020\017\017\022\uffae\024" +
    "\051\026\uffae\027\042\030\033\031\054\035\046\037\023" +
    "\041\027\042\025\043\034\044\044\101\uffae\001\002\000" +
    "\064\005\uffb1\006\uffb1\007\uffb1\010\uffb1\013\uffb1\014\uffb1" +
    "\017\uffb1\021\uffb1\022\uffb1\023\uffb1\024\uffb1\026\uffb1\027" +
    "\uffb1\030\uffb1\031\uffb1\034\uffb1\035\uffb1\036\uffb1\037\uffb1" +
    "\040\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1\101\uffb1\001" +
    "\002\000\026\044\070\045\063\046\061\047\057\050\071" +
    "\051\060\053\066\075\062\076\064\077\065\001\002\000" +
    "\004\020\225\001\002\000\032\014\020\017\017\024\051" +
    "\027\042\030\033\031\054\035\046\037\023\041\027\042" +
    "\025\043\034\044\044\001\002\000\034\014\020\017\017" +
    "\024\051\026\227\027\042\030\033\031\054\035\046\037" +
    "\023\041\027\042\025\043\034\044\044\001\002\000\064" +
    "\005\uffb0\006\uffb0\007\uffb0\010\uffb0\013\uffb0\014\uffb0\017" +
    "\uffb0\021\uffb0\022\uffb0\023\uffb0\024\uffb0\026\uffb0\027\uffb0" +
    "\030\uffb0\031\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040" +
    "\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\101\uffb0\001\002" +
    "\000\020\052\077\053\073\054\074\055\072\056\100\057" +
    "\075\102\231\001\002\000\004\020\232\001\002\000\032" +
    "\014\020\017\017\024\051\027\042\030\033\031\054\035" +
    "\046\037\023\041\027\042\025\043\034\044\044\001\002" +
    "\000\040\014\020\017\017\022\uffaf\024\051\026\uffaf\027" +
    "\042\030\033\031\054\035\046\037\023\041\027\042\025" +
    "\043\034\044\044\101\uffaf\001\002\000\004\025\235\001" +
    "\002\000\034\014\020\017\017\024\051\027\042\030\033" +
    "\031\054\035\046\036\237\037\023\041\027\042\025\043" +
    "\034\044\044\001\002\000\034\014\020\017\017\024\051" +
    "\027\042\030\033\031\054\035\046\036\240\037\023\041" +
    "\027\042\025\043\034\044\044\001\002\000\064\005\uffa8" +
    "\006\uffa8\007\uffa8\010\uffa8\013\uffa8\014\uffa8\017\uffa8\021" +
    "\uffa8\022\uffa8\023\uffa8\024\uffa8\026\uffa8\027\uffa8\030\uffa8" +
    "\031\uffa8\034\uffa8\035\uffa8\036\uffa8\037\uffa8\040\uffa8\041" +
    "\uffa8\042\uffa8\043\uffa8\044\uffa8\101\uffa8\001\002\000\064" +
    "\005\uffa9\006\uffa9\007\uffa9\010\uffa9\013\uffa9\014\uffa9\017" +
    "\uffa9\021\uffa9\022\uffa9\023\uffa9\024\uffa9\026\uffa9\027\uffa9" +
    "\030\uffa9\031\uffa9\034\uffa9\035\uffa9\036\uffa9\037\uffa9\040" +
    "\uffa9\041\uffa9\042\uffa9\043\uffa9\044\uffa9\101\uffa9\001\002" +
    "\000\036\007\242\012\244\014\020\017\017\024\051\027" +
    "\042\030\033\031\054\035\046\037\023\041\027\042\025" +
    "\043\034\044\044\001\002\000\040\005\uffd5\006\uffd5\010" +
    "\uffd5\014\uffd5\017\uffd5\024\uffd5\027\uffd5\030\uffd5\031\uffd5" +
    "\035\uffd5\037\uffd5\041\uffd5\042\uffd5\043\uffd5\044\uffd5\001" +
    "\002\000\034\007\253\014\020\017\017\024\051\027\042" +
    "\030\033\031\054\035\046\037\023\041\027\042\025\043" +
    "\034\044\044\001\002\000\004\077\245\001\002\000\004" +
    "\044\137\001\002\000\006\100\247\105\141\001\002\000" +
    "\034\007\250\014\020\017\017\024\051\027\042\030\033" +
    "\031\054\035\046\037\023\041\027\042\025\043\034\044" +
    "\044\001\002\000\040\005\uffd3\006\uffd3\010\uffd3\014\uffd3" +
    "\017\uffd3\024\uffd3\027\uffd3\030\uffd3\031\uffd3\035\uffd3\037" +
    "\uffd3\041\uffd3\042\uffd3\043\uffd3\044\uffd3\001\002\000\034" +
    "\007\252\014\020\017\017\024\051\027\042\030\033\031" +
    "\054\035\046\037\023\041\027\042\025\043\034\044\044" +
    "\001\002\000\040\005\uffd4\006\uffd4\010\uffd4\014\uffd4\017" +
    "\uffd4\024\uffd4\027\uffd4\030\uffd4\031\uffd4\035\uffd4\037\uffd4" +
    "\041\uffd4\042\uffd4\043\uffd4\044\uffd4\001\002\000\040\005" +
    "\uffd6\006\uffd6\010\uffd6\014\uffd6\017\uffd6\024\uffd6\027\uffd6" +
    "\030\uffd6\031\uffd6\035\uffd6\037\uffd6\041\uffd6\042\uffd6\043" +
    "\uffd6\044\uffd6\001\002\000\020\052\077\053\073\054\074" +
    "\055\072\056\100\057\075\104\255\001\002\000\064\005" +
    "\uff9e\006\uff9e\007\uff9e\010\uff9e\013\uff9e\014\uff9e\017\uff9e" +
    "\021\uff9e\022\uff9e\023\uff9e\024\uff9e\026\uff9e\027\uff9e\030" +
    "\uff9e\031\uff9e\034\uff9e\035\uff9e\036\uff9e\037\uff9e\040\uff9e" +
    "\041\uff9e\042\uff9e\043\uff9e\044\uff9e\101\uff9e\001\002\000" +
    "\004\044\262\001\002\000\026\044\070\045\063\046\061" +
    "\047\057\050\071\051\060\053\066\075\062\076\064\077" +
    "\065\001\002\000\020\052\077\053\073\054\074\055\072" +
    "\056\100\057\075\104\261\001\002\000\064\005\uffdb\006" +
    "\uffdb\007\uffdb\010\uffdb\013\uffdb\014\uffdb\017\uffdb\021\uffdb" +
    "\022\uffdb\023\uffdb\024\uffdb\026\uffdb\027\uffdb\030\uffdb\031" +
    "\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb" +
    "\042\uffdb\043\uffdb\044\uffdb\101\uffdb\001\002\000\010\015" +
    "\uffed\103\uffed\105\uffed\001\002\000\004\077\264\001\002" +
    "\000\030\044\070\045\063\046\061\047\057\050\071\051" +
    "\060\053\066\075\062\076\064\077\065\100\266\001\002" +
    "\000\006\100\272\105\271\001\002\000\004\104\270\001" +
    "\002\000\022\052\077\053\073\054\074\055\072\056\100" +
    "\057\075\100\uffa0\105\uffa0\001\002\000\064\005\uffa5\006" +
    "\uffa5\007\uffa5\010\uffa5\013\uffa5\014\uffa5\017\uffa5\021\uffa5" +
    "\022\uffa5\023\uffa5\024\uffa5\026\uffa5\027\uffa5\030\uffa5\031" +
    "\uffa5\034\uffa5\035\uffa5\036\uffa5\037\uffa5\040\uffa5\041\uffa5" +
    "\042\uffa5\043\uffa5\044\uffa5\101\uffa5\001\002\000\026\044" +
    "\070\045\063\046\061\047\057\050\071\051\060\053\066" +
    "\075\062\076\064\077\065\001\002\000\004\104\273\001" +
    "\002\000\064\005\uffa4\006\uffa4\007\uffa4\010\uffa4\013\uffa4" +
    "\014\uffa4\017\uffa4\021\uffa4\022\uffa4\023\uffa4\024\uffa4\026" +
    "\uffa4\027\uffa4\030\uffa4\031\uffa4\034\uffa4\035\uffa4\036\uffa4" +
    "\037\uffa4\040\uffa4\041\uffa4\042\uffa4\043\uffa4\044\uffa4\101" +
    "\uffa4\001\002\000\022\052\077\053\073\054\074\055\072" +
    "\056\100\057\075\100\uffa1\105\uffa1\001\002\000\020\052" +
    "\077\053\073\054\074\055\072\056\100\057\075\104\276" +
    "\001\002\000\064\005\uff9f\006\uff9f\007\uff9f\010\uff9f\013" +
    "\uff9f\014\uff9f\017\uff9f\021\uff9f\022\uff9f\023\uff9f\024\uff9f" +
    "\026\uff9f\027\uff9f\030\uff9f\031\uff9f\034\uff9f\035\uff9f\036" +
    "\uff9f\037\uff9f\040\uff9f\041\uff9f\042\uff9f\043\uff9f\044\uff9f" +
    "\101\uff9f\001\002\000\004\002\ufffc\001\002\000\040\005" +
    "\ufff6\006\ufff6\010\ufff6\014\ufff6\017\ufff6\024\ufff6\027\ufff6" +
    "\030\ufff6\031\ufff6\035\ufff6\037\ufff6\041\ufff6\042\ufff6\043" +
    "\ufff6\044\ufff6\001\002\000\030\044\070\045\063\046\061" +
    "\047\057\050\071\051\060\053\066\070\145\075\062\076" +
    "\064\077\065\001\002\000\034\014\020\017\017\024\051" +
    "\027\042\030\033\031\054\035\046\037\023\040\303\041" +
    "\027\042\025\043\034\044\044\001\002\000\030\044\070" +
    "\045\063\046\061\047\057\050\071\051\060\053\066\070" +
    "\145\075\062\076\064\077\065\001\002\000\064\005\uffa7" +
    "\006\uffa7\007\uffa7\010\uffa7\013\uffa7\014\uffa7\017\uffa7\021" +
    "\uffa7\022\uffa7\023\uffa7\024\uffa7\026\uffa7\027\uffa7\030\uffa7" +
    "\031\uffa7\034\uffa7\035\uffa7\036\uffa7\037\uffa7\040\uffa7\041" +
    "\uffa7\042\uffa7\043\uffa7\044\uffa7\101\uffa7\001\002\000\064" +
    "\005\uffa6\006\uffa6\007\uffa6\010\uffa6\013\uffa6\014\uffa6\017" +
    "\uffa6\021\uffa6\022\uffa6\023\uffa6\024\uffa6\026\uffa6\027\uffa6" +
    "\030\uffa6\031\uffa6\034\uffa6\035\uffa6\036\uffa6\037\uffa6\040" +
    "\uffa6\041\uffa6\042\uffa6\043\uffa6\044\uffa6\101\uffa6\001\002" +
    "\000\006\015\307\105\256\001\002\000\012\071\312\072" +
    "\310\073\313\074\311\001\002\000\004\016\325\001\002" +
    "\000\004\016\322\001\002\000\004\016\317\001\002\000" +
    "\004\016\314\001\002\000\026\044\070\045\063\046\061" +
    "\047\057\050\071\051\060\053\066\075\062\076\064\077" +
    "\065\001\002\000\020\052\077\053\073\054\074\055\072" +
    "\056\100\057\075\104\316\001\002\000\064\005\uffef\006" +
    "\uffef\007\uffef\010\uffef\013\uffef\014\uffef\017\uffef\021\uffef" +
    "\022\uffef\023\uffef\024\uffef\026\uffef\027\uffef\030\uffef\031" +
    "\uffef\034\uffef\035\uffef\036\uffef\037\uffef\040\uffef\041\uffef" +
    "\042\uffef\043\uffef\044\uffef\101\uffef\001\002\000\026\044" +
    "\070\045\063\046\061\047\057\050\071\051\060\053\066" +
    "\075\062\076\064\077\065\001\002\000\020\052\077\053" +
    "\073\054\074\055\072\056\100\057\075\104\321\001\002" +
    "\000\064\005\ufff1\006\ufff1\007\ufff1\010\ufff1\013\ufff1\014" +
    "\ufff1\017\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1\026\ufff1" +
    "\027\ufff1\030\ufff1\031\ufff1\034\ufff1\035\ufff1\036\ufff1\037" +
    "\ufff1\040\ufff1\041\ufff1\042\ufff1\043\ufff1\044\ufff1\101\ufff1" +
    "\001\002\000\026\044\070\045\063\046\061\047\057\050" +
    "\071\051\060\053\066\075\062\076\064\077\065\001\002" +
    "\000\020\052\077\053\073\054\074\055\072\056\100\057" +
    "\075\104\324\001\002\000\064\005\uffee\006\uffee\007\uffee" +
    "\010\uffee\013\uffee\014\uffee\017\uffee\021\uffee\022\uffee\023" +
    "\uffee\024\uffee\026\uffee\027\uffee\030\uffee\031\uffee\034\uffee" +
    "\035\uffee\036\uffee\037\uffee\040\uffee\041\uffee\042\uffee\043" +
    "\uffee\044\uffee\101\uffee\001\002\000\026\044\070\045\063" +
    "\046\061\047\057\050\071\051\060\053\066\075\062\076" +
    "\064\077\065\001\002\000\020\052\077\053\073\054\074" +
    "\055\072\056\100\057\075\104\327\001\002\000\064\005" +
    "\ufff0\006\ufff0\007\ufff0\010\ufff0\013\ufff0\014\ufff0\017\ufff0" +
    "\021\ufff0\022\ufff0\023\ufff0\024\ufff0\026\ufff0\027\ufff0\030" +
    "\ufff0\031\ufff0\034\ufff0\035\ufff0\036\ufff0\037\ufff0\040\ufff0" +
    "\041\ufff0\042\ufff0\043\ufff0\044\ufff0\101\ufff0\001\002\000" +
    "\034\014\020\017\017\020\331\024\051\027\042\030\033" +
    "\031\054\035\046\037\023\041\027\042\025\043\034\044" +
    "\044\001\002\000\032\014\020\017\017\024\051\027\042" +
    "\030\033\031\054\035\046\037\023\041\027\042\025\043" +
    "\034\044\044\001\002\000\036\014\020\017\017\021\334" +
    "\022\335\024\051\027\042\030\033\031\054\035\046\037" +
    "\023\041\027\042\025\043\034\044\044\001\002\000\010" +
    "\021\344\022\345\023\343\001\002\000\030\044\070\045" +
    "\063\046\061\047\057\050\071\051\060\053\066\070\145" +
    "\075\062\076\064\077\065\001\002\000\032\014\020\017" +
    "\017\024\051\027\042\030\033\031\054\035\046\037\023" +
    "\041\027\042\025\043\034\044\044\001\002\000\034\014" +
    "\020\017\017\023\337\024\051\027\042\030\033\031\054" +
    "\035\046\037\023\041\027\042\025\043\034\044\044\001" +
    "\002\000\064\005\uffbf\006\uffbf\007\uffbf\010\uffbf\013\uffbf" +
    "\014\uffbf\017\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf\026" +
    "\uffbf\027\uffbf\030\uffbf\031\uffbf\034\uffbf\035\uffbf\036\uffbf" +
    "\037\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf\044\uffbf\101" +
    "\uffbf\001\002\000\004\020\341\001\002\000\032\014\020" +
    "\017\017\024\051\027\042\030\033\031\054\035\046\037" +
    "\023\041\027\042\025\043\034\044\044\001\002\000\040" +
    "\014\020\017\017\021\uffb2\022\uffb2\023\uffb2\024\051\027" +
    "\042\030\033\031\054\035\046\037\023\041\027\042\025" +
    "\043\034\044\044\001\002\000\064\005\uffc1\006\uffc1\007" +
    "\uffc1\010\uffc1\013\uffc1\014\uffc1\017\uffc1\021\uffc1\022\uffc1" +
    "\023\uffc1\024\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1\034" +
    "\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1\042\uffc1" +
    "\043\uffc1\044\uffc1\101\uffc1\001\002\000\030\044\070\045" +
    "\063\046\061\047\057\050\071\051\060\053\066\070\145" +
    "\075\062\076\064\077\065\001\002\000\032\014\020\017" +
    "\017\024\051\027\042\030\033\031\054\035\046\037\023" +
    "\041\027\042\025\043\034\044\044\001\002\000\034\014" +
    "\020\017\017\023\347\024\051\027\042\030\033\031\054" +
    "\035\046\037\023\041\027\042\025\043\034\044\044\001" +
    "\002\000\064\005\uffc0\006\uffc0\007\uffc0\010\uffc0\013\uffc0" +
    "\014\uffc0\017\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0\026" +
    "\uffc0\027\uffc0\030\uffc0\031\uffc0\034\uffc0\035\uffc0\036\uffc0" +
    "\037\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0\044\uffc0\101" +
    "\uffc0\001\002\000\004\020\351\001\002\000\032\014\020" +
    "\017\017\024\051\027\042\030\033\031\054\035\046\037" +
    "\023\041\027\042\025\043\034\044\044\001\002\000\040" +
    "\014\020\017\017\021\uffb3\022\uffb3\023\uffb3\024\051\027" +
    "\042\030\033\031\054\035\046\037\023\041\027\042\025" +
    "\043\034\044\044\001\002\000\034\014\020\017\017\023" +
    "\354\024\051\027\042\030\033\031\054\035\046\037\023" +
    "\041\027\042\025\043\034\044\044\001\002\000\064\005" +
    "\uffc2\006\uffc2\007\uffc2\010\uffc2\013\uffc2\014\uffc2\017\uffc2" +
    "\021\uffc2\022\uffc2\023\uffc2\024\uffc2\026\uffc2\027\uffc2\030" +
    "\uffc2\031\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2" +
    "\041\uffc2\042\uffc2\043\uffc2\044\uffc2\101\uffc2\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\353\000\014\002\004\003\011\033\003\034\007\035" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\004\025\005\027\006\035\011\042\012" +
    "\052\013\034\015\020\016\037\022\031\024\040\025\015" +
    "\026\036\027\030\030\047\031\046\032\023\001\001\000" +
    "\004\035\014\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\007\146\017\327\040\145\001\001" +
    "\000\004\005\305\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\004\025\005\027\006\035\015\105\016\037" +
    "\020\301\022\031\024\040\025\015\026\036\027\030\030" +
    "\047\031\046\001\001\000\040\004\025\005\027\006\035" +
    "\011\277\012\052\013\034\015\020\016\037\022\031\024" +
    "\040\025\015\026\036\027\030\030\047\031\046\001\001" +
    "\000\004\007\274\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\253\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\007\146\017\233" +
    "\040\145\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\211\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\066\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\126\001\001\000\004\007\125\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\124\001\001\000\004\007\123\001\001\000\004\007\122" +
    "\001\001\000\002\001\001\000\004\007\102\001\001\000" +
    "\004\007\101\001\001\000\004\007\100\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\112\001\001\000\034\004\025\005\027\006\035\015\105" +
    "\016\037\020\106\022\031\024\040\025\015\026\036\027" +
    "\030\030\047\031\046\001\001\000\002\001\001\000\032" +
    "\004\025\005\027\006\035\015\110\016\037\022\031\024" +
    "\040\025\015\026\036\027\030\030\047\031\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\004\025\005\027\006\035\015\105" +
    "\016\037\020\114\022\031\024\040\025\015\026\036\027" +
    "\030\030\047\031\046\001\001\000\032\004\025\005\027" +
    "\006\035\015\110\016\037\022\031\024\040\025\015\026" +
    "\036\027\030\030\047\031\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\120\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\131\001\001\000\034\004\025" +
    "\005\027\006\035\015\105\016\037\020\132\022\031\024" +
    "\040\025\015\026\036\027\030\030\047\031\046\001\001" +
    "\000\032\004\025\005\027\006\035\015\110\016\037\022" +
    "\031\024\040\025\015\026\036\027\030\030\047\031\046" +
    "\001\001\000\010\007\146\017\202\040\145\001\001\000" +
    "\002\001\001\000\004\014\137\001\001\000\004\010\201" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\004" +
    "\025\005\027\006\035\015\105\016\037\020\142\022\031" +
    "\024\040\025\015\026\036\027\030\030\047\031\046\001" +
    "\001\000\032\004\025\005\027\006\035\015\110\016\037" +
    "\022\031\024\040\025\015\026\036\027\030\030\047\031" +
    "\046\001\001\000\010\007\146\017\147\040\145\001\001" +
    "\000\006\007\146\040\172\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\165\001\001\000\004\007\164\001" +
    "\001\000\004\007\163\001\001\000\004\007\162\001\001" +
    "\000\004\007\161\001\001\000\004\007\160\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\146\040\171\001\001\000\006\007\146\040\170\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\007\146\017\174\040\145\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\200\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\007\146\017" +
    "\206\040\145\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\213\001" +
    "\001\000\002\001\001\000\004\007\215\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\004\025\005\027\006" +
    "\035\015\105\016\037\020\220\022\031\024\040\025\015" +
    "\026\036\027\030\030\047\031\046\001\001\000\032\004" +
    "\025\005\027\006\035\015\110\016\037\022\031\024\040" +
    "\025\015\026\036\027\030\030\047\031\046\001\001\000" +
    "\002\001\001\000\004\007\227\001\001\000\002\001\001" +
    "\000\034\004\025\005\027\006\035\015\105\016\037\020" +
    "\225\022\031\024\040\025\015\026\036\027\030\030\047" +
    "\031\046\001\001\000\032\004\025\005\027\006\035\015" +
    "\110\016\037\022\031\024\040\025\015\026\036\027\030" +
    "\030\047\031\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\004\025\005\027\006\035" +
    "\015\105\016\037\020\232\022\031\024\040\025\015\026" +
    "\036\027\030\030\047\031\046\001\001\000\032\004\025" +
    "\005\027\006\035\015\110\016\037\022\031\024\040\025" +
    "\015\026\036\027\030\030\047\031\046\001\001\000\002" +
    "\001\001\000\034\004\025\005\027\006\035\015\105\016" +
    "\037\020\235\022\031\024\040\025\015\026\036\027\030" +
    "\030\047\031\046\001\001\000\032\004\025\005\027\006" +
    "\035\015\110\016\037\022\031\024\040\025\015\026\036" +
    "\027\030\030\047\031\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\004\025\005\027\006\035\015\105" +
    "\016\037\020\242\022\031\024\040\025\015\026\036\027" +
    "\030\030\047\031\046\001\001\000\002\001\001\000\032" +
    "\004\025\005\027\006\035\015\110\016\037\022\031\024" +
    "\040\025\015\026\036\027\030\030\047\031\046\001\001" +
    "\000\002\001\001\000\004\014\245\001\001\000\002\001" +
    "\001\000\034\004\025\005\027\006\035\015\105\016\037" +
    "\020\250\022\031\024\040\025\015\026\036\027\030\030" +
    "\047\031\046\001\001\000\002\001\001\000\032\004\025" +
    "\005\027\006\035\015\110\016\037\022\031\024\040\025" +
    "\015\026\036\027\030\030\047\031\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\257\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\007\266\036\264\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\273\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\007\146\017\304" +
    "\040\145\001\001\000\032\004\025\005\027\006\035\015" +
    "\110\016\037\022\031\024\040\025\015\026\036\027\030" +
    "\030\047\031\046\001\001\000\010\007\146\017\303\040" +
    "\145\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\314" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\317\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\322\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\325\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\004\025\005\027\006\035\015\105\016\037\020" +
    "\331\022\031\024\040\025\015\026\036\027\030\030\047" +
    "\031\046\001\001\000\034\004\025\005\027\006\035\015" +
    "\105\016\037\020\352\022\031\024\040\025\015\026\036" +
    "\027\030\030\047\031\046\001\001\000\034\004\025\005" +
    "\027\006\035\015\110\016\037\021\332\022\031\024\040" +
    "\025\015\026\036\027\030\030\047\031\046\001\001\000" +
    "\002\001\001\000\010\007\146\017\337\040\145\001\001" +
    "\000\034\004\025\005\027\006\035\015\105\016\037\020" +
    "\335\022\031\024\040\025\015\026\036\027\030\030\047" +
    "\031\046\001\001\000\032\004\025\005\027\006\035\015" +
    "\110\016\037\022\031\024\040\025\015\026\036\027\030" +
    "\030\047\031\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\004\025\005\027\006\035\015\105\016\037" +
    "\020\341\022\031\024\040\025\015\026\036\027\030\030" +
    "\047\031\046\001\001\000\032\004\025\005\027\006\035" +
    "\015\110\016\037\022\031\024\040\025\015\026\036\027" +
    "\030\030\047\031\046\001\001\000\002\001\001\000\010" +
    "\007\146\017\347\040\145\001\001\000\034\004\025\005" +
    "\027\006\035\015\105\016\037\020\345\022\031\024\040" +
    "\025\015\026\036\027\030\030\047\031\046\001\001\000" +
    "\032\004\025\005\027\006\035\015\110\016\037\022\031" +
    "\024\040\025\015\026\036\027\030\030\047\031\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\004\025" +
    "\005\027\006\035\015\105\016\037\020\351\022\031\024" +
    "\040\025\015\026\036\027\030\030\047\031\046\001\001" +
    "\000\032\004\025\005\027\006\035\015\110\016\037\022" +
    "\031\024\040\025\015\026\036\027\030\030\047\031\046" +
    "\001\001\000\032\004\025\005\027\006\035\015\110\016" +
    "\037\022\031\024\040\025\015\026\036\027\030\030\047" +
    "\031\046\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /**
    *Listas
    **/
    public LinkedList<ErrorLenguaje> ErroresSintacticos = new LinkedList<ErrorLenguaje>();
    public LinkedList<Instruccion> Golang = new LinkedList<Instruccion>();
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){
        
        ErroresSintacticos.add(new ErrorLenguaje("Sintáctico","Carácter no esperado: "+s.value.toString(),s.right,s.left));

        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        ErroresSintacticos.add(new ErrorLenguaje("Sintáctico","Carácter no esperado: "+s.value.toString(),s.right,s.left));
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= MAIN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= COMENTARIOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCIONES ::= error 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // MAIN ::= RINICIO ALGORITMO RFIN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // MAIN ::= RINICIO RFIN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // COMENTARIOS ::= COMENTARIOS COMENTARIO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COMENTARIOS",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // COMENTARIOS ::= COMENTARIO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COMENTARIOS",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // COMENTARIO ::= COMENTARIOL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT=new Comentarios(Comentarios.Tipo_Comentario.COMENTARIO_UNILINEA, a);
                                                                                                            Golang.add((Comentarios) RESULT);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COMENTARIO",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // COMENTARIO ::= COMENTARIOML 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT=new Comentarios(Comentarios.Tipo_Comentario.COMENTARIO_MILTILINEA, a);
                                                                                                            Golang.add((Comentarios) RESULT);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COMENTARIO",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ALGORITMO ::= ALGORITMO GLOBAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ALGORITMO",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ALGORITMO ::= GLOBAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ALGORITMO",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // GLOBAL ::= FUNCION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("GLOBAL",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // GLOBAL ::= METODO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("GLOBAL",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // GLOBAL ::= ENTORNO_LOCAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("GLOBAL",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARACION ::= RINGRESAR LISTA_IDENTIFICADORES RCOMO RNUMERO RCONVALOR EXPRESION PTCOMA 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		LinkedList<Instruccion> l = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		  
                                                                                                            RESULT=new Declaracion(Declaracion.Tipo_Variable.RNUMERO,(Operacion)e,(LinkedList)l);
                                                                                                            Golang.add((Declaracion) RESULT);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACION ::= RINGRESAR LISTA_IDENTIFICADORES RCOMO RCADENA RCONVALOR EXPRESION PTCOMA 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		LinkedList<Instruccion> l = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		  
                                                                                                            RESULT=new Declaracion(Declaracion.Tipo_Variable.RCADENA,(Operacion)e,(LinkedList)l);
                                                                                                            Golang.add((Declaracion) RESULT);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION ::= RINGRESAR LISTA_IDENTIFICADORES RCOMO RBOOLEAN RCONVALOR EXPRESION PTCOMA 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		LinkedList<Instruccion> l = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		  
                                                                                                            RESULT=new Declaracion(Declaracion.Tipo_Variable.RBOOLEAN,(Operacion)e,(LinkedList)l);
                                                                                                            Golang.add((Declaracion) RESULT);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACION ::= RINGRESAR LISTA_IDENTIFICADORES RCOMO RCARACTER RCONVALOR EXPRESION PTCOMA 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		LinkedList<Instruccion> l = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		  
                                                                                                            RESULT=new Declaracion(Declaracion.Tipo_Variable.RCARACTER,(Operacion)e,(LinkedList)l);
                                                                                                            Golang.add((Declaracion) RESULT);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LISTA_IDENTIFICADORES ::= LISTA_IDENTIFICADORES COMA IDENTIFICADOR 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT = new LinkedList<>();
                                                                                                            for (int i = 0; i < a.size(); i++) {
                                                                                                                RESULT.add(a.get(i));
                                                                                                            }
                                                                                                            RESULT.add(new Operacion(b,Operacion.Tipo_operacion.IDENTIFICADOR));
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_IDENTIFICADORES",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LISTA_IDENTIFICADORES ::= IDENTIFICADOR 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT= new LinkedList<Instruccion>();
                                                                                                            RESULT.add(new Operacion(a,Operacion.Tipo_operacion.IDENTIFICADOR));
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_IDENTIFICADORES",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EXPRESION ::= ENTERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT=new Operacion(a,Operacion.Tipo_operacion.NUMERO);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EXPRESION ::= DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT=new Operacion(a,Operacion.Tipo_operacion.DECIMAL);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EXPRESION ::= CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT=new Operacion(a,Operacion.Tipo_operacion.CADENA);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EXPRESION ::= CARACTER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT=new Operacion(a,Operacion.Tipo_operacion.CARACTER);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EXPRESION ::= CARASCCI 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT=new Operacion(a,Operacion.Tipo_operacion.ASCCI);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXPRESION ::= RVERDADERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT=new Operacion(a,Operacion.Tipo_operacion.VERDADERO);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EXPRESION ::= RFALSO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT=new Operacion(a,Operacion.Tipo_operacion.FALSO);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXPRESION ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT=new Operacion(a,Operacion.Tipo_operacion.IDENTIFICADOR);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXPRESION ::= RESTA EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT=new Operacion((Operacion)a,Operacion.Tipo_operacion.NEGATIVO);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXPRESION ::= PARIZQ EXPRESION PARDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		  
                                                                                                            RESULT=new Operacion((Operacion)a,Operacion.Tipo_operacion.AGRUPACION);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXPRESION ::= EXPRESION SUMA EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT=new Operacion((Operacion)a,(Operacion)b,Operacion.Tipo_operacion.SUMA);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXPRESION ::= EXPRESION RESTA EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT=new Operacion((Operacion)a,(Operacion)b,Operacion.Tipo_operacion.RESTA);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXPRESION ::= EXPRESION MULTIPLICACION EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT=new Operacion((Operacion)a,(Operacion)b,Operacion.Tipo_operacion.MULTIPLICACION);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXPRESION ::= EXPRESION DIVIDIR EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT=new Operacion((Operacion)a,(Operacion)b,Operacion.Tipo_operacion.DIVISION);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXPRESION ::= EXPRESION POTENCIA CORIZQ EXPRESION CORDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		  
                                                                                                            RESULT=new Operacion((Operacion)a,(Operacion)b,Operacion.Tipo_operacion.POTENCIA);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXPRESION ::= EXPRESION MODU EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT=new Operacion((Operacion)a,(Operacion)b,Operacion.Tipo_operacion.MODULAR);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ASIGNACION ::= LISTA_IDENTIFICADORES FLECHA EXPRESION PTCOMA 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<Instruccion> l = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		  
                                                                                                            RESULT=new Asignacion((Operacion)e,(LinkedList)l);
                                                                                                            Golang.add((Asignacion) RESULT);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FUNCION ::= RFUNCION IDENTIFICADOR TIPODATO LOCAL RRETORNAR CONDICION PTCOMA RFINFUNCION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // FUNCION ::= RFUNCION IDENTIFICADOR TIPODATO RRETORNAR CONDICION PTCOMA RFINFUNCION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // FUNCION ::= RFUNCION IDENTIFICADOR TIPODATO RCONPARAMETROS PARIZQ LISTA_PARAMETROS PARDER LOCAL RRETORNAR CONDICION PTCOMA RFINFUNCION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // FUNCION ::= RFUNCION IDENTIFICADOR TIPODATO RCONPARAMETROS PARIZQ LISTA_PARAMETROS PARDER RRETORNAR CONDICION PTCOMA RFINFUNCION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // METODO ::= RMETODO IDENTIFICADOR LOCAL RFINMETODO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // METODO ::= RMETODO IDENTIFICADOR RFINMETODO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // METODO ::= RMETODO IDENTIFICADOR RCONPARAMETROS PARIZQ LISTA_PARAMETROS PARDER LOCAL RFINMETODO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // METODO ::= RMETODO IDENTIFICADOR RCONPARAMETROS PARIZQ LISTA_PARAMETROS PARDER RFINMETODO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // LISTA_PARAMETROS ::= LISTA_PARAMETROS COMA IDENTIFICADOR TIPODATO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // LISTA_PARAMETROS ::= IDENTIFICADOR TIPODATO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // LOCAL ::= LOCAL ENTORNO_LOCAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LOCAL",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // LOCAL ::= ENTORNO_LOCAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LOCAL",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ENTORNO_LOCAL ::= ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ENTORNO_LOCAL",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ENTORNO_LOCAL ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ENTORNO_LOCAL",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ENTORNO_LOCAL ::= CONDICIONAL_SI 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ENTORNO_LOCAL",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ENTORNO_LOCAL ::= SELECCION_MULTIPLE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ENTORNO_LOCAL",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ENTORNO_LOCAL ::= CICLO_PARA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ENTORNO_LOCAL",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ENTORNO_LOCAL ::= CICLO_MIENTRAS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ENTORNO_LOCAL",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ENTORNO_LOCAL ::= CICLO_REPETIR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ENTORNO_LOCAL",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ENTORNO_LOCAL ::= EJECUTAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ENTORNO_LOCAL",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ENTORNO_LOCAL ::= IMPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ENTORNO_LOCAL",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ENTORNO_LOCAL ::= IMPRESION_CONSALTO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ENTORNO_LOCAL",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ENTORNO_LOCAL ::= COMENTARIOL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ENTORNO_LOCAL",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ENTORNO_LOCAL ::= COMENTARIOML 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ENTORNO_LOCAL",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CONDICIONAL_SI ::= RSI CONDICION RENTONCES LOCAL RFINSI 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_SI",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CONDICIONAL_SI ::= RSI CONDICION LOCAL LISTA_OSI RFINSI 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_SI",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CONDICIONAL_SI ::= RSI CONDICION LOCAL LISTA_OSI RDELOCONTRARIO LOCAL RFINSI 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_SI",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CONDICIONAL_SI ::= RSI CONDICION LOCAL RDELOCONTRARIO LOCAL RFINSI 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_SI",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // RELACIONAL ::= EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RELACIONAL",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // RELACIONAL ::= EXPRESION RMAYOR EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RELACIONAL",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // RELACIONAL ::= EXPRESION RMENOR EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RELACIONAL",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // RELACIONAL ::= EXPRESION RMAYOROIGUAL EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RELACIONAL",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // RELACIONAL ::= EXPRESION RMENOROIGUAL EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RELACIONAL",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // RELACIONAL ::= EXPRESION RESIGUAL EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RELACIONAL",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // RELACIONAL ::= EXPRESION RESDIFERENTE EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RELACIONAL",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CONDICION ::= RELACIONAL ROR RELACIONAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // CONDICION ::= RELACIONAL RAND RELACIONAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // CONDICION ::= RNOT RELACIONAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CONDICION ::= RELACIONAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // LISTA_OSI ::= LISTA_OSI ROSI CONDICION RENTONCES LOCAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_OSI",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // LISTA_OSI ::= ROSI CONDICION RENTONCES LOCAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_OSI",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SELECCION_MULTIPLE ::= RSEGUN EXPRESION RHACER LISTA_VALORENTONCES RFINSEGUN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SELECCION_MULTIPLE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SELECCION_MULTIPLE ::= RSEGUN EXPRESION RHACER LISTA_VALORENTONCES RDELOCONTRARIO RENTONCES LOCAL RFINSEGUN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SELECCION_MULTIPLE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // LISTA_VALORENTONCES ::= LISTA_VALORENTONCES INTABRE EXPRESION INTCIERRA RENTONCES LOCAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_VALORENTONCES",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // LISTA_VALORENTONCES ::= INTABRE EXPRESION INTCIERRA RENTONCES LOCAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_VALORENTONCES",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CICLO_PARA ::= RPARA IDENTIFICADOR FLECHA EXPRESION RHASTA EXPRESION RHACER LOCAL RFINPARA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_PARA",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CICLO_PARA ::= RPARA IDENTIFICADOR FLECHA EXPRESION RHASTA EXPRESION RHACER RFINPARA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_PARA",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CICLO_PARA ::= RPARA IDENTIFICADOR FLECHA EXPRESION RHASTA EXPRESION RCONINCREMENTAL EXPRESION RHACER LOCAL RFINPARA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_PARA",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CICLO_PARA ::= RPARA IDENTIFICADOR FLECHA EXPRESION RHASTA EXPRESION RCONINCREMENTAL EXPRESION RHACER RFINPARA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_PARA",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CICLO_MIENTRAS ::= RMIENTRAS CONDICION RHACER LOCAL RFINMIENTRAS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_MIENTRAS",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CICLO_MIENTRAS ::= RMIENTRAS CONDICION RHACER RFINMIENTRAS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_MIENTRAS",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CICLO_REPETIR ::= RREPETIR LOCAL RHASTAQUE CONDICION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_REPETIR",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CICLO_REPETIR ::= RREPETIR RHASTAQUE CONDICION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_REPETIR",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EJECUTAR ::= REJECUTAR IDENTIFICADOR PARIZQ PARDER PTCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EJECUTAR",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EJECUTAR ::= REJECUTAR IDENTIFICADOR PARIZQ INSERCION_PARAMETROS PARDER PTCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EJECUTAR",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EJECUTAR_2 ::= REJECUTAR IDENTIFICADOR PARIZQ PARDER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EJECUTAR_2",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EJECUTAR_2 ::= REJECUTAR IDENTIFICADOR PARIZQ INSERCION_PARAMETROS PARDER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EJECUTAR_2",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // INSERCION_PARAMETROS ::= INSERCION_PARAMETROS COMA EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSERCION_PARAMETROS",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // INSERCION_PARAMETROS ::= EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSERCION_PARAMETROS",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // IMPRESION ::= RIMPRIMIR EXPRESION PTCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPRESION",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // IMPRESION_CONSALTO ::= RIMPRIMIRNL EXPRESION PTCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPRESION_CONSALTO",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
