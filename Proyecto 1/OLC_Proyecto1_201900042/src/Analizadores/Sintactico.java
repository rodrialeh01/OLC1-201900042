
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import Clases.ErrorLenguaje;
import java_cup.runtime.*;
import Structures.Instrucciones.Comentarios;
import Structures.Instrucciones.Declaracion;
import Structures.Instrucciones.Instruccion;
import Structures.Instrucciones.Operacion;
import Structures.Instrucciones.Si;
import Structures.Instrucciones.Main;
import Structures.Instrucciones.Asignacion;
import Structures.Instrucciones.Case;
import Structures.Instrucciones.SeleccionMultiple;
import Structures.Instrucciones.Para;
import Structures.Instrucciones.Mientras;
import Structures.Instrucciones.Repetir;
import Structures.Instrucciones.Impresion;
import Structures.Instrucciones.Ejecutar;
import java.util.LinkedList;
import Structures.Nodo;
import Structures.Arbol;
import Structures.Produccion;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\152\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\032\005" +
    "\000\002\032\004\000\002\033\004\000\002\033\003\000" +
    "\002\034\003\000\002\034\003\000\002\031\003\000\002" +
    "\031\003\000\002\040\004\000\002\040\003\000\002\041" +
    "\003\000\002\041\003\000\002\004\011\000\002\004\011" +
    "\000\002\004\011\000\002\004\011\000\002\005\005\000" +
    "\002\005\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\004" +
    "\000\002\007\005\000\002\007\005\000\002\007\005\000" +
    "\002\007\005\000\002\007\005\000\002\007\007\000\002" +
    "\007\005\000\002\007\003\000\002\037\003\000\002\037" +
    "\005\000\002\037\005\000\002\037\005\000\002\037\005" +
    "\000\002\037\005\000\002\037\005\000\002\016\005\000" +
    "\002\016\005\000\002\016\004\000\002\016\003\000\002" +
    "\006\006\000\002\011\012\000\002\011\011\000\002\011" +
    "\016\000\002\011\015\000\002\012\006\000\002\012\005" +
    "\000\002\012\012\000\002\012\011\000\002\013\006\000" +
    "\002\013\004\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\017\004\000\002\017" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\015" +
    "\007\000\002\015\007\000\002\015\011\000\002\015\010" +
    "\000\002\020\007\000\002\020\006\000\002\021\007\000" +
    "\002\021\012\000\002\022\010\000\002\022\007\000\002" +
    "\023\013\000\002\023\012\000\002\023\015\000\002\023" +
    "\014\000\002\024\007\000\002\024\006\000\002\025\006" +
    "\000\002\025\005\000\002\026\007\000\002\026\010\000" +
    "\002\036\006\000\002\036\007\000\002\035\005\000\002" +
    "\035\003\000\002\027\005\000\002\030\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\367\000\012\003\011\004\007\027\014\030\006\001" +
    "\002\000\004\002\uffff\001\002\000\004\002\371\001\002" +
    "\000\010\002\ufff7\027\ufff7\030\ufff7\001\002\000\040\005" +
    "\022\006\047\010\054\014\020\017\017\024\053\027\044" +
    "\030\035\031\056\035\050\037\023\041\027\042\026\043" +
    "\037\044\045\001\002\000\010\002\ufffe\027\014\030\006" +
    "\001\002\000\004\002\ufffd\001\002\000\004\002\000\001" +
    "\002\000\010\002\ufff9\027\ufff9\030\ufff9\001\002\000\010" +
    "\002\ufff8\027\ufff8\030\ufff8\001\002\000\010\002\ufffa\027" +
    "\ufffa\030\ufffa\001\002\000\060\005\uffb8\007\uffb8\013\uffb8" +
    "\014\uffb8\017\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8\026" +
    "\uffb8\027\uffb8\030\uffb8\031\uffb8\034\uffb8\035\uffb8\036\uffb8" +
    "\037\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8\044\uffb8\101" +
    "\uffb8\001\002\000\032\041\067\044\075\045\064\046\063" +
    "\047\061\050\074\051\062\053\072\070\164\075\065\076" +
    "\066\077\070\001\002\000\004\044\045\001\002\000\060" +
    "\005\uffbe\007\uffbe\013\uffbe\014\uffbe\017\uffbe\021\uffbe\022" +
    "\uffbe\023\uffbe\024\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe" +
    "\034\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe\042" +
    "\uffbe\043\uffbe\044\uffbe\101\uffbe\001\002\000\004\002\ufffb" +
    "\001\002\000\034\014\020\017\017\024\053\027\044\030" +
    "\035\031\056\035\050\037\023\040\315\041\027\042\026" +
    "\043\037\044\045\001\002\000\004\005\314\001\002\000" +
    "\034\005\ufff5\014\020\017\017\024\053\027\044\030\035" +
    "\031\056\035\050\037\023\041\027\042\026\043\037\044" +
    "\045\001\002\000\030\041\067\044\075\045\064\046\063" +
    "\047\061\050\074\051\062\053\072\075\065\076\066\077" +
    "\070\001\002\000\004\044\303\001\002\000\060\005\uffbc" +
    "\007\uffbc\013\uffbc\014\uffbc\017\uffbc\021\uffbc\022\uffbc\023" +
    "\uffbc\024\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc\034\uffbc" +
    "\035\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc\042\uffbc\043" +
    "\uffbc\044\uffbc\101\uffbc\001\002\000\006\103\276\105\277" +
    "\001\002\000\060\005\uffb6\007\uffb6\013\uffb6\014\uffb6\017" +
    "\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6\026\uffb6\027\uffb6" +
    "\030\uffb6\031\uffb6\034\uffb6\035\uffb6\036\uffb6\037\uffb6\040" +
    "\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6\101\uffb6\001\002" +
    "\000\010\005\ufff3\006\ufff3\010\ufff3\001\002\000\060\005" +
    "\uffba\007\uffba\013\uffba\014\uffba\017\uffba\021\uffba\022\uffba" +
    "\023\uffba\024\uffba\026\uffba\027\uffba\030\uffba\031\uffba\034" +
    "\uffba\035\uffba\036\uffba\037\uffba\040\uffba\041\uffba\042\uffba" +
    "\043\uffba\044\uffba\101\uffba\001\002\000\060\005\uffb2\007" +
    "\uffb2\013\uffb2\014\uffb2\017\uffb2\021\uffb2\022\uffb2\023\uffb2" +
    "\024\uffb2\026\uffb2\027\uffb2\030\uffb2\031\uffb2\034\uffb2\035" +
    "\uffb2\036\uffb2\037\uffb2\040\uffb2\041\uffb2\042\uffb2\043\uffb2" +
    "\044\uffb2\101\uffb2\001\002\000\010\005\ufff1\006\ufff1\010" +
    "\ufff1\001\002\000\030\041\067\044\075\045\064\046\063" +
    "\047\061\050\074\051\062\053\072\075\065\076\066\077" +
    "\070\001\002\000\060\005\uffbd\007\uffbd\013\uffbd\014\uffbd" +
    "\017\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\026\uffbd\027" +
    "\uffbd\030\uffbd\031\uffbd\034\uffbd\035\uffbd\036\uffbd\037\uffbd" +
    "\040\uffbd\041\uffbd\042\uffbd\043\uffbd\044\uffbd\101\uffbd\001" +
    "\002\000\060\005\uffb7\007\uffb7\013\uffb7\014\uffb7\017\uffb7" +
    "\021\uffb7\022\uffb7\023\uffb7\024\uffb7\026\uffb7\027\uffb7\030" +
    "\uffb7\031\uffb7\034\uffb7\035\uffb7\036\uffb7\037\uffb7\040\uffb7" +
    "\041\uffb7\042\uffb7\043\uffb7\044\uffb7\101\uffb7\001\002\000" +
    "\060\005\uffb9\007\uffb9\013\uffb9\014\uffb9\017\uffb9\021\uffb9" +
    "\022\uffb9\023\uffb9\024\uffb9\026\uffb9\027\uffb9\030\uffb9\031" +
    "\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9\040\uffb9\041\uffb9" +
    "\042\uffb9\043\uffb9\044\uffb9\101\uffb9\001\002\000\060\005" +
    "\uffbb\007\uffbb\013\uffbb\014\uffbb\017\uffbb\021\uffbb\022\uffbb" +
    "\023\uffbb\024\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb\034" +
    "\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb\041\uffbb\042\uffbb" +
    "\043\uffbb\044\uffbb\101\uffbb\001\002\000\060\005\uffb3\007" +
    "\uffb3\013\uffb3\014\uffb3\017\uffb3\021\uffb3\022\uffb3\023\uffb3" +
    "\024\uffb3\026\uffb3\027\uffb3\030\uffb3\031\uffb3\034\uffb3\035" +
    "\uffb3\036\uffb3\037\uffb3\040\uffb3\041\uffb3\042\uffb3\043\uffb3" +
    "\044\uffb3\101\uffb3\001\002\000\010\015\uffeb\103\uffeb\105" +
    "\uffeb\001\002\000\010\005\ufff6\006\047\010\054\001\002" +
    "\000\004\044\260\001\002\000\032\041\067\044\075\045" +
    "\064\046\063\047\061\050\074\051\062\053\072\070\164" +
    "\075\065\076\066\077\070\001\002\000\060\005\uffb4\007" +
    "\uffb4\013\uffb4\014\uffb4\017\uffb4\021\uffb4\022\uffb4\023\uffb4" +
    "\024\uffb4\026\uffb4\027\uffb4\030\uffb4\031\uffb4\034\uffb4\035" +
    "\uffb4\036\uffb4\037\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4" +
    "\044\uffb4\101\uffb4\001\002\000\060\005\uffb5\007\uffb5\013" +
    "\uffb5\014\uffb5\017\uffb5\021\uffb5\022\uffb5\023\uffb5\024\uffb5" +
    "\026\uffb5\027\uffb5\030\uffb5\031\uffb5\034\uffb5\035\uffb5\036" +
    "\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5\044\uffb5" +
    "\101\uffb5\001\002\000\030\041\067\044\075\045\064\046" +
    "\063\047\061\050\074\051\062\053\072\075\065\076\066" +
    "\077\070\001\002\000\004\044\144\001\002\000\010\005" +
    "\ufff2\006\ufff2\010\ufff2\001\002\000\004\044\057\001\002" +
    "\000\004\103\060\001\002\000\030\041\067\044\075\045" +
    "\064\046\063\047\061\050\074\051\062\053\072\075\065" +
    "\076\066\077\070\001\002\000\136\005\uffe8\007\uffe8\013" +
    "\uffe8\014\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8" +
    "\024\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8\032" +
    "\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8\037\uffe8\040\uffe8" +
    "\041\uffe8\042\uffe8\043\uffe8\044\uffe8\052\uffe8\053\uffe8\054" +
    "\uffe8\055\uffe8\056\uffe8\057\uffe8\060\uffe8\061\uffe8\062\uffe8" +
    "\063\uffe8\064\uffe8\065\uffe8\066\uffe8\067\uffe8\100\uffe8\101" +
    "\uffe8\102\uffe8\104\uffe8\105\uffe8\107\uffe8\001\002\000\136" +
    "\005\uffe9\007\uffe9\013\uffe9\014\uffe9\017\uffe9\020\uffe9\021" +
    "\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9" +
    "\030\uffe9\031\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9\036" +
    "\uffe9\037\uffe9\040\uffe9\041\uffe9\042\uffe9\043\uffe9\044\uffe9" +
    "\052\uffe9\053\uffe9\054\uffe9\055\uffe9\056\uffe9\057\uffe9\060" +
    "\uffe9\061\uffe9\062\uffe9\063\uffe9\064\uffe9\065\uffe9\066\uffe9" +
    "\067\uffe9\100\uffe9\101\uffe9\102\uffe9\104\uffe9\105\uffe9\107" +
    "\uffe9\001\002\000\136\005\uffe6\007\uffe6\013\uffe6\014\uffe6" +
    "\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025" +
    "\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6" +
    "\034\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6\041\uffe6\042" +
    "\uffe6\043\uffe6\044\uffe6\052\uffe6\053\uffe6\054\uffe6\055\uffe6" +
    "\056\uffe6\057\uffe6\060\uffe6\061\uffe6\062\uffe6\063\uffe6\064" +
    "\uffe6\065\uffe6\066\uffe6\067\uffe6\100\uffe6\101\uffe6\102\uffe6" +
    "\104\uffe6\105\uffe6\107\uffe6\001\002\000\136\005\uffea\007" +
    "\uffea\013\uffea\014\uffea\017\uffea\020\uffea\021\uffea\022\uffea" +
    "\023\uffea\024\uffea\025\uffea\026\uffea\027\uffea\030\uffea\031" +
    "\uffea\032\uffea\033\uffea\034\uffea\035\uffea\036\uffea\037\uffea" +
    "\040\uffea\041\uffea\042\uffea\043\uffea\044\uffea\052\uffea\053" +
    "\uffea\054\uffea\055\uffea\056\uffea\057\uffea\060\uffea\061\uffea" +
    "\062\uffea\063\uffea\064\uffea\065\uffea\066\uffea\067\uffea\100" +
    "\uffea\101\uffea\102\uffea\104\uffea\105\uffea\107\uffea\001\002" +
    "\000\136\005\uffe5\007\uffe5\013\uffe5\014\uffe5\017\uffe5\020" +
    "\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5" +
    "\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5\035" +
    "\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5\042\uffe5\043\uffe5" +
    "\044\uffe5\052\uffe5\053\uffe5\054\uffe5\055\uffe5\056\uffe5\057" +
    "\uffe5\060\uffe5\061\uffe5\062\uffe5\063\uffe5\064\uffe5\065\uffe5" +
    "\066\uffe5\067\uffe5\100\uffe5\101\uffe5\102\uffe5\104\uffe5\105" +
    "\uffe5\107\uffe5\001\002\000\136\005\uffe4\007\uffe4\013\uffe4" +
    "\014\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024" +
    "\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4" +
    "\033\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\041" +
    "\uffe4\042\uffe4\043\uffe4\044\uffe4\052\uffe4\053\uffe4\054\uffe4" +
    "\055\uffe4\056\uffe4\057\uffe4\060\uffe4\061\uffe4\062\uffe4\063" +
    "\uffe4\064\uffe4\065\uffe4\066\uffe4\067\uffe4\100\uffe4\101\uffe4" +
    "\102\uffe4\104\uffe4\105\uffe4\107\uffe4\001\002\000\004\044" +
    "\134\001\002\000\030\041\067\044\075\045\064\046\063" +
    "\047\061\050\074\051\062\053\072\075\065\076\066\077" +
    "\070\001\002\000\136\005\uffda\007\uffda\013\uffda\014\uffda" +
    "\017\uffda\020\uffda\021\uffda\022\uffda\023\uffda\024\uffda\025" +
    "\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032\uffda\033\uffda" +
    "\034\uffda\035\uffda\036\uffda\037\uffda\040\uffda\041\uffda\042" +
    "\uffda\043\uffda\044\uffda\052\uffda\053\uffda\054\uffda\055\uffda" +
    "\056\uffda\057\uffda\060\uffda\061\uffda\062\uffda\063\uffda\064" +
    "\uffda\065\uffda\066\uffda\067\uffda\100\uffda\101\uffda\102\uffda" +
    "\104\uffda\105\uffda\107\uffda\001\002\000\030\041\067\044" +
    "\075\045\064\046\063\047\061\050\074\051\062\053\072" +
    "\075\065\076\066\077\070\001\002\000\020\032\102\052" +
    "\103\053\100\054\076\055\077\056\104\057\101\001\002" +
    "\000\136\005\uffe7\007\uffe7\013\uffe7\014\uffe7\017\uffe7\020" +
    "\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7" +
    "\027\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7\035" +
    "\uffe7\036\uffe7\037\uffe7\040\uffe7\041\uffe7\042\uffe7\043\uffe7" +
    "\044\uffe7\052\uffe7\053\uffe7\054\uffe7\055\uffe7\056\uffe7\057" +
    "\uffe7\060\uffe7\061\uffe7\062\uffe7\063\uffe7\064\uffe7\065\uffe7" +
    "\066\uffe7\067\uffe7\100\uffe7\101\uffe7\102\uffe7\104\uffe7\105" +
    "\uffe7\107\uffe7\001\002\000\136\005\uffe3\007\uffe3\013\uffe3" +
    "\014\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024" +
    "\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3" +
    "\033\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\041" +
    "\uffe3\042\uffe3\043\uffe3\044\uffe3\052\uffe3\053\uffe3\054\uffe3" +
    "\055\uffe3\056\uffe3\057\uffe3\060\uffe3\061\uffe3\062\uffe3\063" +
    "\uffe3\064\uffe3\065\uffe3\066\uffe3\067\uffe3\100\uffe3\101\uffe3" +
    "\102\uffe3\104\uffe3\105\uffe3\107\uffe3\001\002\000\030\041" +
    "\067\044\075\045\064\046\063\047\061\050\074\051\062" +
    "\053\072\075\065\076\066\077\070\001\002\000\030\041" +
    "\067\044\075\045\064\046\063\047\061\050\074\051\062" +
    "\053\072\075\065\076\066\077\070\001\002\000\030\041" +
    "\067\044\075\045\064\046\063\047\061\050\074\051\062" +
    "\053\072\075\065\076\066\077\070\001\002\000\004\106" +
    "\123\001\002\000\030\041\067\044\075\045\064\046\063" +
    "\047\061\050\074\051\062\053\072\075\065\076\066\077" +
    "\070\001\002\000\030\041\067\044\075\045\064\046\063" +
    "\047\061\050\074\051\062\053\072\075\065\076\066\077" +
    "\070\001\002\000\030\041\067\044\075\045\064\046\063" +
    "\047\061\050\074\051\062\053\072\075\065\076\066\077" +
    "\070\001\002\000\136\005\uffdb\007\uffdb\013\uffdb\014\uffdb" +
    "\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025" +
    "\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb" +
    "\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\042" +
    "\uffdb\043\uffdb\044\uffdb\052\uffdb\053\uffdb\054\uffdb\055\uffdb" +
    "\056\uffdb\057\uffdb\060\uffdb\061\uffdb\062\uffdb\063\uffdb\064" +
    "\uffdb\065\uffdb\066\uffdb\067\uffdb\100\uffdb\101\uffdb\102\uffdb" +
    "\104\uffdb\105\uffdb\107\uffdb\001\002\000\136\005\uffe0\007" +
    "\uffe0\013\uffe0\014\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0" +
    "\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0\031" +
    "\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0" +
    "\040\uffe0\041\uffe0\042\uffe0\043\uffe0\044\uffe0\052\uffe0\053" +
    "\uffe0\054\076\055\077\056\104\057\101\060\uffe0\061\uffe0" +
    "\062\uffe0\063\uffe0\064\uffe0\065\uffe0\066\uffe0\067\uffe0\100" +
    "\uffe0\101\uffe0\102\uffe0\104\uffe0\105\uffe0\107\uffe0\001\002" +
    "\000\022\025\111\033\110\052\103\053\100\054\076\055" +
    "\077\056\104\057\101\001\002\000\030\041\067\044\075" +
    "\045\064\046\063\047\061\050\074\051\062\053\072\075" +
    "\065\076\066\077\070\001\002\000\034\014\020\017\017" +
    "\024\053\027\044\030\035\031\056\034\113\035\050\037" +
    "\023\041\027\042\026\043\037\044\045\001\002\000\034" +
    "\014\020\017\017\024\053\027\044\030\035\031\056\034" +
    "\115\035\050\037\023\041\027\042\026\043\037\044\045" +
    "\001\002\000\060\005\uffa6\007\uffa6\013\uffa6\014\uffa6\017" +
    "\uffa6\021\uffa6\022\uffa6\023\uffa6\024\uffa6\026\uffa6\027\uffa6" +
    "\030\uffa6\031\uffa6\034\uffa6\035\uffa6\036\uffa6\037\uffa6\040" +
    "\uffa6\041\uffa6\042\uffa6\043\uffa6\044\uffa6\101\uffa6\001\002" +
    "\000\060\005\uffbf\007\uffbf\013\uffbf\014\uffbf\017\uffbf\021" +
    "\uffbf\022\uffbf\023\uffbf\024\uffbf\026\uffbf\027\uffbf\030\uffbf" +
    "\031\uffbf\034\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf\041" +
    "\uffbf\042\uffbf\043\uffbf\044\uffbf\101\uffbf\001\002\000\060" +
    "\005\uffa7\007\uffa7\013\uffa7\014\uffa7\017\uffa7\021\uffa7\022" +
    "\uffa7\023\uffa7\024\uffa7\026\uffa7\027\uffa7\030\uffa7\031\uffa7" +
    "\034\uffa7\035\uffa7\036\uffa7\037\uffa7\040\uffa7\041\uffa7\042" +
    "\uffa7\043\uffa7\044\uffa7\101\uffa7\001\002\000\020\025\117" +
    "\052\103\053\100\054\076\055\077\056\104\057\101\001" +
    "\002\000\034\014\020\017\017\024\053\027\044\030\035" +
    "\031\056\034\121\035\050\037\023\041\027\042\026\043" +
    "\037\044\045\001\002\000\034\014\020\017\017\024\053" +
    "\027\044\030\035\031\056\034\122\035\050\037\023\041" +
    "\027\042\026\043\037\044\045\001\002\000\060\005\uffa4" +
    "\007\uffa4\013\uffa4\014\uffa4\017\uffa4\021\uffa4\022\uffa4\023" +
    "\uffa4\024\uffa4\026\uffa4\027\uffa4\030\uffa4\031\uffa4\034\uffa4" +
    "\035\uffa4\036\uffa4\037\uffa4\040\uffa4\041\uffa4\042\uffa4\043" +
    "\uffa4\044\uffa4\101\uffa4\001\002\000\060\005\uffa5\007\uffa5" +
    "\013\uffa5\014\uffa5\017\uffa5\021\uffa5\022\uffa5\023\uffa5\024" +
    "\uffa5\026\uffa5\027\uffa5\030\uffa5\031\uffa5\034\uffa5\035\uffa5" +
    "\036\uffa5\037\uffa5\040\uffa5\041\uffa5\042\uffa5\043\uffa5\044" +
    "\uffa5\101\uffa5\001\002\000\030\041\067\044\075\045\064" +
    "\046\063\047\061\050\074\051\062\053\072\075\065\076" +
    "\066\077\070\001\002\000\020\052\103\053\100\054\076" +
    "\055\077\056\104\057\101\107\125\001\002\000\136\005" +
    "\uffdc\007\uffdc\013\uffdc\014\uffdc\017\uffdc\020\uffdc\021\uffdc" +
    "\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc\030" +
    "\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc" +
    "\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc\044\uffdc\052" +
    "\uffdc\053\uffdc\054\uffdc\055\uffdc\056\uffdc\057\uffdc\060\uffdc" +
    "\061\uffdc\062\uffdc\063\uffdc\064\uffdc\065\uffdc\066\uffdc\067" +
    "\uffdc\100\uffdc\101\uffdc\102\uffdc\104\uffdc\105\uffdc\107\uffdc" +
    "\001\002\000\136\005\uffdf\007\uffdf\013\uffdf\014\uffdf\017" +
    "\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf" +
    "\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034" +
    "\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf" +
    "\043\uffdf\044\uffdf\052\uffdf\053\uffdf\054\076\055\077\056" +
    "\104\057\101\060\uffdf\061\uffdf\062\uffdf\063\uffdf\064\uffdf" +
    "\065\uffdf\066\uffdf\067\uffdf\100\uffdf\101\uffdf\102\uffdf\104" +
    "\uffdf\105\uffdf\107\uffdf\001\002\000\136\005\uffdd\007\uffdd" +
    "\013\uffdd\014\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023" +
    "\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd" +
    "\032\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040" +
    "\uffdd\041\uffdd\042\uffdd\043\uffdd\044\uffdd\052\uffdd\053\uffdd" +
    "\054\uffdd\055\uffdd\056\104\057\101\060\uffdd\061\uffdd\062" +
    "\uffdd\063\uffdd\064\uffdd\065\uffdd\066\uffdd\067\uffdd\100\uffdd" +
    "\101\uffdd\102\uffdd\104\uffdd\105\uffdd\107\uffdd\001\002\000" +
    "\136\005\uffde\007\uffde\013\uffde\014\uffde\017\uffde\020\uffde" +
    "\021\uffde\022\uffde\023\uffde\024\uffde\025\uffde\026\uffde\027" +
    "\uffde\030\uffde\031\uffde\032\uffde\033\uffde\034\uffde\035\uffde" +
    "\036\uffde\037\uffde\040\uffde\041\uffde\042\uffde\043\uffde\044" +
    "\uffde\052\uffde\053\uffde\054\uffde\055\uffde\056\104\057\101" +
    "\060\uffde\061\uffde\062\uffde\063\uffde\064\uffde\065\uffde\066" +
    "\uffde\067\uffde\100\uffde\101\uffde\102\uffde\104\uffde\105\uffde" +
    "\107\uffde\001\002\000\136\005\uffe2\007\uffe2\013\uffe2\014" +
    "\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2" +
    "\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\033" +
    "\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\041\uffe2" +
    "\042\uffe2\043\uffe2\044\uffe2\052\uffe2\053\uffe2\054\076\055" +
    "\077\056\104\057\101\060\uffe2\061\uffe2\062\uffe2\063\uffe2" +
    "\064\uffe2\065\uffe2\066\uffe2\067\uffe2\100\uffe2\101\uffe2\102" +
    "\uffe2\104\uffe2\105\uffe2\107\uffe2\001\002\000\020\052\103" +
    "\053\100\054\076\055\077\056\104\057\101\100\133\001" +
    "\002\000\136\005\uffe1\007\uffe1\013\uffe1\014\uffe1\017\uffe1" +
    "\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1\026" +
    "\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1" +
    "\035\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1\042\uffe1\043" +
    "\uffe1\044\uffe1\052\uffe1\053\uffe1\054\uffe1\055\uffe1\056\uffe1" +
    "\057\uffe1\060\uffe1\061\uffe1\062\uffe1\063\uffe1\064\uffe1\065" +
    "\uffe1\066\uffe1\067\uffe1\100\uffe1\101\uffe1\102\uffe1\104\uffe1" +
    "\105\uffe1\107\uffe1\001\002\000\004\077\135\001\002\000" +
    "\032\041\067\044\075\045\064\046\063\047\061\050\074" +
    "\051\062\053\072\075\065\076\066\077\070\100\137\001" +
    "\002\000\006\100\142\105\141\001\002\000\136\005\uff9d" +
    "\007\uff9d\013\uff9d\014\uff9d\017\uff9d\020\uff9d\021\uff9d\022" +
    "\uff9d\023\uff9d\024\uff9d\025\uff9d\026\uff9d\027\uff9d\030\uff9d" +
    "\031\uff9d\032\uff9d\033\uff9d\034\uff9d\035\uff9d\036\uff9d\037" +
    "\uff9d\040\uff9d\041\uff9d\042\uff9d\043\uff9d\044\uff9d\052\uff9d" +
    "\053\uff9d\054\uff9d\055\uff9d\056\uff9d\057\uff9d\060\uff9d\061" +
    "\uff9d\062\uff9d\063\uff9d\064\uff9d\065\uff9d\066\uff9d\067\uff9d" +
    "\100\uff9d\101\uff9d\102\uff9d\104\uff9d\105\uff9d\107\uff9d\001" +
    "\002\000\022\052\103\053\100\054\076\055\077\056\104" +
    "\057\101\100\uff9a\105\uff9a\001\002\000\030\041\067\044" +
    "\075\045\064\046\063\047\061\050\074\051\062\053\072" +
    "\075\065\076\066\077\070\001\002\000\136\005\uff9c\007" +
    "\uff9c\013\uff9c\014\uff9c\017\uff9c\020\uff9c\021\uff9c\022\uff9c" +
    "\023\uff9c\024\uff9c\025\uff9c\026\uff9c\027\uff9c\030\uff9c\031" +
    "\uff9c\032\uff9c\033\uff9c\034\uff9c\035\uff9c\036\uff9c\037\uff9c" +
    "\040\uff9c\041\uff9c\042\uff9c\043\uff9c\044\uff9c\052\uff9c\053" +
    "\uff9c\054\uff9c\055\uff9c\056\uff9c\057\uff9c\060\uff9c\061\uff9c" +
    "\062\uff9c\063\uff9c\064\uff9c\065\uff9c\066\uff9c\067\uff9c\100" +
    "\uff9c\101\uff9c\102\uff9c\104\uff9c\105\uff9c\107\uff9c\001\002" +
    "\000\022\052\103\053\100\054\076\055\077\056\104\057" +
    "\101\100\uff9b\105\uff9b\001\002\000\012\071\151\072\145" +
    "\073\150\074\146\001\002\000\042\012\uffc2\013\uffc2\014" +
    "\uffc2\017\uffc2\024\uffc2\027\uffc2\030\uffc2\031\uffc2\035\uffc2" +
    "\037\uffc2\041\uffc2\042\uffc2\043\uffc2\044\uffc2\100\uffc2\105" +
    "\uffc2\001\002\000\042\012\uffc0\013\uffc0\014\uffc0\017\uffc0" +
    "\024\uffc0\027\uffc0\030\uffc0\031\uffc0\035\uffc0\037\uffc0\041" +
    "\uffc0\042\uffc0\043\uffc0\044\uffc0\100\uffc0\105\uffc0\001\002" +
    "\000\036\012\154\013\153\014\020\017\017\024\053\027" +
    "\044\030\035\031\056\035\050\037\023\041\027\042\026" +
    "\043\037\044\045\001\002\000\042\012\uffc1\013\uffc1\014" +
    "\uffc1\017\uffc1\024\uffc1\027\uffc1\030\uffc1\031\uffc1\035\uffc1" +
    "\037\uffc1\041\uffc1\042\uffc1\043\uffc1\044\uffc1\100\uffc1\105" +
    "\uffc1\001\002\000\042\012\uffc3\013\uffc3\014\uffc3\017\uffc3" +
    "\024\uffc3\027\uffc3\030\uffc3\031\uffc3\035\uffc3\037\uffc3\041" +
    "\uffc3\042\uffc3\043\uffc3\044\uffc3\100\uffc3\105\uffc3\001\002" +
    "\000\034\013\225\014\020\017\017\024\053\027\044\030" +
    "\035\031\056\035\050\037\023\041\027\042\026\043\037" +
    "\044\045\001\002\000\032\041\067\044\075\045\064\046" +
    "\063\047\061\050\074\051\062\053\072\070\164\075\065" +
    "\076\066\077\070\001\002\000\004\077\155\001\002\000" +
    "\004\044\156\001\002\000\012\071\151\072\145\073\150" +
    "\074\146\001\002\000\006\100\161\105\160\001\002\000" +
    "\004\044\217\001\002\000\034\013\163\014\020\017\017" +
    "\024\053\027\044\030\035\031\056\035\050\037\023\041" +
    "\027\042\026\043\037\044\045\001\002\000\034\013\213" +
    "\014\020\017\017\024\053\027\044\030\035\031\056\035" +
    "\050\037\023\041\027\042\026\043\037\044\045\001\002" +
    "\000\032\041\067\044\075\045\064\046\063\047\061\050" +
    "\074\051\062\053\072\070\164\075\065\076\066\077\070" +
    "\001\002\000\030\041\067\044\075\045\064\046\063\047" +
    "\061\050\074\051\062\053\072\075\065\076\066\077\070" +
    "\001\002\000\072\005\uffcf\007\uffcf\013\uffcf\014\uffcf\017" +
    "\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf" +
    "\026\uffcf\027\uffcf\030\uffcf\031\uffcf\034\uffcf\035\uffcf\036" +
    "\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf" +
    "\066\206\067\207\101\uffcf\104\uffcf\001\002\000\122\005" +
    "\uffd9\007\uffd9\013\uffd9\014\uffd9\017\uffd9\020\uffd9\021\uffd9" +
    "\022\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030" +
    "\uffd9\031\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9" +
    "\041\uffd9\042\uffd9\043\uffd9\044\uffd9\052\103\053\100\054" +
    "\076\055\077\056\104\057\101\060\176\061\172\062\175" +
    "\063\174\064\177\065\173\066\uffd9\067\uffd9\101\uffd9\104" +
    "\uffd9\001\002\000\004\104\170\001\002\000\004\011\171" +
    "\001\002\000\010\005\uffca\006\uffca\010\uffca\001\002\000" +
    "\030\041\067\044\075\045\064\046\063\047\061\050\074" +
    "\051\062\053\072\075\065\076\066\077\070\001\002\000" +
    "\030\041\067\044\075\045\064\046\063\047\061\050\074" +
    "\051\062\053\072\075\065\076\066\077\070\001\002\000" +
    "\030\041\067\044\075\045\064\046\063\047\061\050\074" +
    "\051\062\053\072\075\065\076\066\077\070\001\002\000" +
    "\030\041\067\044\075\045\064\046\063\047\061\050\074" +
    "\051\062\053\072\075\065\076\066\077\070\001\002\000" +
    "\030\041\067\044\075\045\064\046\063\047\061\050\074" +
    "\051\062\053\072\075\065\076\066\077\070\001\002\000" +
    "\030\041\067\044\075\045\064\046\063\047\061\050\074" +
    "\051\062\053\072\075\065\076\066\077\070\001\002\000" +
    "\106\005\uffd4\007\uffd4\013\uffd4\014\uffd4\017\uffd4\020\uffd4" +
    "\021\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027" +
    "\uffd4\030\uffd4\031\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4" +
    "\040\uffd4\041\uffd4\042\uffd4\043\uffd4\044\uffd4\052\103\053" +
    "\100\054\076\055\077\056\104\057\101\066\uffd4\067\uffd4" +
    "\101\uffd4\104\uffd4\001\002\000\106\005\uffd8\007\uffd8\013" +
    "\uffd8\014\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8" +
    "\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\034" +
    "\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8" +
    "\043\uffd8\044\uffd8\052\103\053\100\054\076\055\077\056" +
    "\104\057\101\066\uffd8\067\uffd8\101\uffd8\104\uffd8\001\002" +
    "\000\106\005\uffd6\007\uffd6\013\uffd6\014\uffd6\017\uffd6\020" +
    "\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6" +
    "\027\uffd6\030\uffd6\031\uffd6\034\uffd6\035\uffd6\036\uffd6\037" +
    "\uffd6\040\uffd6\041\uffd6\042\uffd6\043\uffd6\044\uffd6\052\103" +
    "\053\100\054\076\055\077\056\104\057\101\066\uffd6\067" +
    "\uffd6\101\uffd6\104\uffd6\001\002\000\106\005\uffd5\007\uffd5" +
    "\013\uffd5\014\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023" +
    "\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5" +
    "\034\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5\042" +
    "\uffd5\043\uffd5\044\uffd5\052\103\053\100\054\076\055\077" +
    "\056\104\057\101\066\uffd5\067\uffd5\101\uffd5\104\uffd5\001" +
    "\002\000\106\005\uffd3\007\uffd3\013\uffd3\014\uffd3\017\uffd3" +
    "\020\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3\026" +
    "\uffd3\027\uffd3\030\uffd3\031\uffd3\034\uffd3\035\uffd3\036\uffd3" +
    "\037\uffd3\040\uffd3\041\uffd3\042\uffd3\043\uffd3\044\uffd3\052" +
    "\103\053\100\054\076\055\077\056\104\057\101\066\uffd3" +
    "\067\uffd3\101\uffd3\104\uffd3\001\002\000\106\005\uffd7\007" +
    "\uffd7\013\uffd7\014\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7" +
    "\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031" +
    "\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7" +
    "\042\uffd7\043\uffd7\044\uffd7\052\103\053\100\054\076\055" +
    "\077\056\104\057\101\066\uffd7\067\uffd7\101\uffd7\104\uffd7" +
    "\001\002\000\030\041\067\044\075\045\064\046\063\047" +
    "\061\050\074\051\062\053\072\075\065\076\066\077\070" +
    "\001\002\000\030\041\067\044\075\045\064\046\063\047" +
    "\061\050\074\051\062\053\072\075\065\076\066\077\070" +
    "\001\002\000\066\005\uffd1\007\uffd1\013\uffd1\014\uffd1\017" +
    "\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1" +
    "\026\uffd1\027\uffd1\030\uffd1\031\uffd1\034\uffd1\035\uffd1\036" +
    "\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1\043\uffd1\044\uffd1" +
    "\101\uffd1\104\uffd1\001\002\000\066\005\uffd2\007\uffd2\013" +
    "\uffd2\014\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2" +
    "\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\034" +
    "\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2\041\uffd2\042\uffd2" +
    "\043\uffd2\044\uffd2\101\uffd2\104\uffd2\001\002\000\066\005" +
    "\uffd0\007\uffd0\013\uffd0\014\uffd0\017\uffd0\020\uffd0\021\uffd0" +
    "\022\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030" +
    "\uffd0\031\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0" +
    "\041\uffd0\042\uffd0\043\uffd0\044\uffd0\101\uffd0\104\uffd0\001" +
    "\002\000\032\041\067\044\075\045\064\046\063\047\061" +
    "\050\074\051\062\053\072\070\164\075\065\076\066\077" +
    "\070\001\002\000\004\104\215\001\002\000\004\011\216" +
    "\001\002\000\010\005\uffcb\006\uffcb\010\uffcb\001\002\000" +
    "\012\071\151\072\145\073\150\074\146\001\002\000\006" +
    "\100\uffc5\105\uffc5\001\002\000\006\100\uffc4\105\uffc4\001" +
    "\002\000\004\104\223\001\002\000\004\011\224\001\002" +
    "\000\010\005\uffcc\006\uffcc\010\uffcc\001\002\000\032\041" +
    "\067\044\075\045\064\046\063\047\061\050\074\051\062" +
    "\053\072\070\164\075\065\076\066\077\070\001\002\000" +
    "\004\104\227\001\002\000\004\011\230\001\002\000\010" +
    "\005\uffcd\006\uffcd\010\uffcd\001\002\000\020\025\232\052" +
    "\103\053\100\054\076\055\077\056\104\057\101\001\002" +
    "\000\004\101\234\001\002\000\010\022\243\026\241\101" +
    "\242\001\002\000\030\041\067\044\075\045\064\046\063" +
    "\047\061\050\074\051\062\053\072\075\065\076\066\077" +
    "\070\001\002\000\020\052\103\053\100\054\076\055\077" +
    "\056\104\057\101\102\236\001\002\000\004\020\237\001" +
    "\002\000\032\014\020\017\017\024\053\027\044\030\035" +
    "\031\056\035\050\037\023\041\027\042\026\043\037\044" +
    "\045\001\002\000\040\014\020\017\017\022\uffa8\024\053" +
    "\026\uffa8\027\044\030\035\031\056\035\050\037\023\041" +
    "\027\042\026\043\037\044\045\101\uffa8\001\002\000\060" +
    "\005\uffab\007\uffab\013\uffab\014\uffab\017\uffab\021\uffab\022" +
    "\uffab\023\uffab\024\uffab\026\uffab\027\uffab\030\uffab\031\uffab" +
    "\034\uffab\035\uffab\036\uffab\037\uffab\040\uffab\041\uffab\042" +
    "\uffab\043\uffab\044\uffab\101\uffab\001\002\000\030\041\067" +
    "\044\075\045\064\046\063\047\061\050\074\051\062\053" +
    "\072\075\065\076\066\077\070\001\002\000\004\020\244" +
    "\001\002\000\032\014\020\017\017\024\053\027\044\030" +
    "\035\031\056\035\050\037\023\041\027\042\026\043\037" +
    "\044\045\001\002\000\034\014\020\017\017\024\053\026" +
    "\246\027\044\030\035\031\056\035\050\037\023\041\027" +
    "\042\026\043\037\044\045\001\002\000\060\005\uffaa\007" +
    "\uffaa\013\uffaa\014\uffaa\017\uffaa\021\uffaa\022\uffaa\023\uffaa" +
    "\024\uffaa\026\uffaa\027\uffaa\030\uffaa\031\uffaa\034\uffaa\035" +
    "\uffaa\036\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa\043\uffaa" +
    "\044\uffaa\101\uffaa\001\002\000\020\052\103\053\100\054" +
    "\076\055\077\056\104\057\101\102\250\001\002\000\004" +
    "\020\251\001\002\000\032\014\020\017\017\024\053\027" +
    "\044\030\035\031\056\035\050\037\023\041\027\042\026" +
    "\043\037\044\045\001\002\000\040\014\020\017\017\022" +
    "\uffa9\024\053\026\uffa9\027\044\030\035\031\056\035\050" +
    "\037\023\041\027\042\026\043\037\044\045\101\uffa9\001" +
    "\002\000\004\025\254\001\002\000\034\014\020\017\017" +
    "\024\053\027\044\030\035\031\056\035\050\036\256\037" +
    "\023\041\027\042\026\043\037\044\045\001\002\000\034" +
    "\014\020\017\017\024\053\027\044\030\035\031\056\035" +
    "\050\036\257\037\023\041\027\042\026\043\037\044\045" +
    "\001\002\000\060\005\uffa2\007\uffa2\013\uffa2\014\uffa2\017" +
    "\uffa2\021\uffa2\022\uffa2\023\uffa2\024\uffa2\026\uffa2\027\uffa2" +
    "\030\uffa2\031\uffa2\034\uffa2\035\uffa2\036\uffa2\037\uffa2\040" +
    "\uffa2\041\uffa2\042\uffa2\043\uffa2\044\uffa2\101\uffa2\001\002" +
    "\000\060\005\uffa3\007\uffa3\013\uffa3\014\uffa3\017\uffa3\021" +
    "\uffa3\022\uffa3\023\uffa3\024\uffa3\026\uffa3\027\uffa3\030\uffa3" +
    "\031\uffa3\034\uffa3\035\uffa3\036\uffa3\037\uffa3\040\uffa3\041" +
    "\uffa3\042\uffa3\043\uffa3\044\uffa3\101\uffa3\001\002\000\036" +
    "\007\261\012\263\014\020\017\017\024\053\027\044\030" +
    "\035\031\056\035\050\037\023\041\027\042\026\043\037" +
    "\044\045\001\002\000\010\005\uffc8\006\uffc8\010\uffc8\001" +
    "\002\000\034\007\272\014\020\017\017\024\053\027\044" +
    "\030\035\031\056\035\050\037\023\041\027\042\026\043" +
    "\037\044\045\001\002\000\004\077\264\001\002\000\004" +
    "\044\156\001\002\000\006\100\266\105\160\001\002\000" +
    "\034\007\267\014\020\017\017\024\053\027\044\030\035" +
    "\031\056\035\050\037\023\041\027\042\026\043\037\044" +
    "\045\001\002\000\010\005\uffc6\006\uffc6\010\uffc6\001\002" +
    "\000\034\007\271\014\020\017\017\024\053\027\044\030" +
    "\035\031\056\035\050\037\023\041\027\042\026\043\037" +
    "\044\045\001\002\000\010\005\uffc7\006\uffc7\010\uffc7\001" +
    "\002\000\010\005\uffc9\006\uffc9\010\uffc9\001\002\000\010" +
    "\005\ufff4\006\ufff4\010\ufff4\001\002\000\020\052\103\053" +
    "\100\054\076\055\077\056\104\057\101\104\275\001\002" +
    "\000\060\005\uff98\007\uff98\013\uff98\014\uff98\017\uff98\021" +
    "\uff98\022\uff98\023\uff98\024\uff98\026\uff98\027\uff98\030\uff98" +
    "\031\uff98\034\uff98\035\uff98\036\uff98\037\uff98\040\uff98\041" +
    "\uff98\042\uff98\043\uff98\044\uff98\101\uff98\001\002\000\030" +
    "\041\067\044\075\045\064\046\063\047\061\050\074\051" +
    "\062\053\072\075\065\076\066\077\070\001\002\000\004" +
    "\044\300\001\002\000\010\015\uffec\103\uffec\105\uffec\001" +
    "\002\000\020\052\103\053\100\054\076\055\077\056\104" +
    "\057\101\104\302\001\002\000\060\005\uffce\007\uffce\013" +
    "\uffce\014\uffce\017\uffce\021\uffce\022\uffce\023\uffce\024\uffce" +
    "\026\uffce\027\uffce\030\uffce\031\uffce\034\uffce\035\uffce\036" +
    "\uffce\037\uffce\040\uffce\041\uffce\042\uffce\043\uffce\044\uffce" +
    "\101\uffce\001\002\000\004\077\304\001\002\000\032\041" +
    "\067\044\075\045\064\046\063\047\061\050\074\051\062" +
    "\053\072\075\065\076\066\077\070\100\306\001\002\000" +
    "\006\100\310\105\141\001\002\000\004\104\307\001\002" +
    "\000\060\005\uff9f\007\uff9f\013\uff9f\014\uff9f\017\uff9f\021" +
    "\uff9f\022\uff9f\023\uff9f\024\uff9f\026\uff9f\027\uff9f\030\uff9f" +
    "\031\uff9f\034\uff9f\035\uff9f\036\uff9f\037\uff9f\040\uff9f\041" +
    "\uff9f\042\uff9f\043\uff9f\044\uff9f\101\uff9f\001\002\000\004" +
    "\104\311\001\002\000\060\005\uff9e\007\uff9e\013\uff9e\014" +
    "\uff9e\017\uff9e\021\uff9e\022\uff9e\023\uff9e\024\uff9e\026\uff9e" +
    "\027\uff9e\030\uff9e\031\uff9e\034\uff9e\035\uff9e\036\uff9e\037" +
    "\uff9e\040\uff9e\041\uff9e\042\uff9e\043\uff9e\044\uff9e\101\uff9e" +
    "\001\002\000\020\052\103\053\100\054\076\055\077\056" +
    "\104\057\101\104\313\001\002\000\060\005\uff99\007\uff99" +
    "\013\uff99\014\uff99\017\uff99\021\uff99\022\uff99\023\uff99\024" +
    "\uff99\026\uff99\027\uff99\030\uff99\031\uff99\034\uff99\035\uff99" +
    "\036\uff99\037\uff99\040\uff99\041\uff99\042\uff99\043\uff99\044" +
    "\uff99\101\uff99\001\002\000\004\002\ufffc\001\002\000\032" +
    "\041\067\044\075\045\064\046\063\047\061\050\074\051" +
    "\062\053\072\070\164\075\065\076\066\077\070\001\002" +
    "\000\034\014\020\017\017\024\053\027\044\030\035\031" +
    "\056\035\050\037\023\040\317\041\027\042\026\043\037" +
    "\044\045\001\002\000\032\041\067\044\075\045\064\046" +
    "\063\047\061\050\074\051\062\053\072\070\164\075\065" +
    "\076\066\077\070\001\002\000\060\005\uffa1\007\uffa1\013" +
    "\uffa1\014\uffa1\017\uffa1\021\uffa1\022\uffa1\023\uffa1\024\uffa1" +
    "\026\uffa1\027\uffa1\030\uffa1\031\uffa1\034\uffa1\035\uffa1\036" +
    "\uffa1\037\uffa1\040\uffa1\041\uffa1\042\uffa1\043\uffa1\044\uffa1" +
    "\101\uffa1\001\002\000\060\005\uffa0\007\uffa0\013\uffa0\014" +
    "\uffa0\017\uffa0\021\uffa0\022\uffa0\023\uffa0\024\uffa0\026\uffa0" +
    "\027\uffa0\030\uffa0\031\uffa0\034\uffa0\035\uffa0\036\uffa0\037" +
    "\uffa0\040\uffa0\041\uffa0\042\uffa0\043\uffa0\044\uffa0\101\uffa0" +
    "\001\002\000\006\015\323\105\277\001\002\000\012\071" +
    "\327\072\324\073\326\074\325\001\002\000\004\016\341" +
    "\001\002\000\004\016\336\001\002\000\004\016\333\001" +
    "\002\000\004\016\330\001\002\000\030\041\067\044\075" +
    "\045\064\046\063\047\061\050\074\051\062\053\072\075" +
    "\065\076\066\077\070\001\002\000\020\052\103\053\100" +
    "\054\076\055\077\056\104\057\101\104\332\001\002\000" +
    "\060\005\ufff0\007\ufff0\013\ufff0\014\ufff0\017\ufff0\021\ufff0" +
    "\022\ufff0\023\ufff0\024\ufff0\026\ufff0\027\ufff0\030\ufff0\031" +
    "\ufff0\034\ufff0\035\ufff0\036\ufff0\037\ufff0\040\ufff0\041\ufff0" +
    "\042\ufff0\043\ufff0\044\ufff0\101\ufff0\001\002\000\030\041" +
    "\067\044\075\045\064\046\063\047\061\050\074\051\062" +
    "\053\072\075\065\076\066\077\070\001\002\000\020\052" +
    "\103\053\100\054\076\055\077\056\104\057\101\104\335" +
    "\001\002\000\060\005\uffee\007\uffee\013\uffee\014\uffee\017" +
    "\uffee\021\uffee\022\uffee\023\uffee\024\uffee\026\uffee\027\uffee" +
    "\030\uffee\031\uffee\034\uffee\035\uffee\036\uffee\037\uffee\040" +
    "\uffee\041\uffee\042\uffee\043\uffee\044\uffee\101\uffee\001\002" +
    "\000\030\041\067\044\075\045\064\046\063\047\061\050" +
    "\074\051\062\053\072\075\065\076\066\077\070\001\002" +
    "\000\020\052\103\053\100\054\076\055\077\056\104\057" +
    "\101\104\340\001\002\000\060\005\uffed\007\uffed\013\uffed" +
    "\014\uffed\017\uffed\021\uffed\022\uffed\023\uffed\024\uffed\026" +
    "\uffed\027\uffed\030\uffed\031\uffed\034\uffed\035\uffed\036\uffed" +
    "\037\uffed\040\uffed\041\uffed\042\uffed\043\uffed\044\uffed\101" +
    "\uffed\001\002\000\030\041\067\044\075\045\064\046\063" +
    "\047\061\050\074\051\062\053\072\075\065\076\066\077" +
    "\070\001\002\000\020\052\103\053\100\054\076\055\077" +
    "\056\104\057\101\104\343\001\002\000\060\005\uffef\007" +
    "\uffef\013\uffef\014\uffef\017\uffef\021\uffef\022\uffef\023\uffef" +
    "\024\uffef\026\uffef\027\uffef\030\uffef\031\uffef\034\uffef\035" +
    "\uffef\036\uffef\037\uffef\040\uffef\041\uffef\042\uffef\043\uffef" +
    "\044\uffef\101\uffef\001\002\000\034\014\020\017\017\020" +
    "\345\024\053\027\044\030\035\031\056\035\050\037\023" +
    "\041\027\042\026\043\037\044\045\001\002\000\032\014" +
    "\020\017\017\024\053\027\044\030\035\031\056\035\050" +
    "\037\023\041\027\042\026\043\037\044\045\001\002\000" +
    "\036\014\020\017\017\021\350\022\351\024\053\027\044" +
    "\030\035\031\056\035\050\037\023\041\027\042\026\043" +
    "\037\044\045\001\002\000\010\021\360\022\361\023\357" +
    "\001\002\000\032\041\067\044\075\045\064\046\063\047" +
    "\061\050\074\051\062\053\072\070\164\075\065\076\066" +
    "\077\070\001\002\000\032\014\020\017\017\024\053\027" +
    "\044\030\035\031\056\035\050\037\023\041\027\042\026" +
    "\043\037\044\045\001\002\000\034\014\020\017\017\023" +
    "\353\024\053\027\044\030\035\031\056\035\050\037\023" +
    "\041\027\042\026\043\037\044\045\001\002\000\060\005" +
    "\uffae\007\uffae\013\uffae\014\uffae\017\uffae\021\uffae\022\uffae" +
    "\023\uffae\024\uffae\026\uffae\027\uffae\030\uffae\031\uffae\034" +
    "\uffae\035\uffae\036\uffae\037\uffae\040\uffae\041\uffae\042\uffae" +
    "\043\uffae\044\uffae\101\uffae\001\002\000\004\020\355\001" +
    "\002\000\032\014\020\017\017\024\053\027\044\030\035" +
    "\031\056\035\050\037\023\041\027\042\026\043\037\044" +
    "\045\001\002\000\040\014\020\017\017\021\uffac\022\uffac" +
    "\023\uffac\024\053\027\044\030\035\031\056\035\050\037" +
    "\023\041\027\042\026\043\037\044\045\001\002\000\060" +
    "\005\uffb0\007\uffb0\013\uffb0\014\uffb0\017\uffb0\021\uffb0\022" +
    "\uffb0\023\uffb0\024\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0" +
    "\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042" +
    "\uffb0\043\uffb0\044\uffb0\101\uffb0\001\002\000\032\041\067" +
    "\044\075\045\064\046\063\047\061\050\074\051\062\053" +
    "\072\070\164\075\065\076\066\077\070\001\002\000\032" +
    "\014\020\017\017\024\053\027\044\030\035\031\056\035" +
    "\050\037\023\041\027\042\026\043\037\044\045\001\002" +
    "\000\034\014\020\017\017\023\363\024\053\027\044\030" +
    "\035\031\056\035\050\037\023\041\027\042\026\043\037" +
    "\044\045\001\002\000\060\005\uffaf\007\uffaf\013\uffaf\014" +
    "\uffaf\017\uffaf\021\uffaf\022\uffaf\023\uffaf\024\uffaf\026\uffaf" +
    "\027\uffaf\030\uffaf\031\uffaf\034\uffaf\035\uffaf\036\uffaf\037" +
    "\uffaf\040\uffaf\041\uffaf\042\uffaf\043\uffaf\044\uffaf\101\uffaf" +
    "\001\002\000\004\020\365\001\002\000\032\014\020\017" +
    "\017\024\053\027\044\030\035\031\056\035\050\037\023" +
    "\041\027\042\026\043\037\044\045\001\002\000\040\014" +
    "\020\017\017\021\uffad\022\uffad\023\uffad\024\053\027\044" +
    "\030\035\031\056\035\050\037\023\041\027\042\026\043" +
    "\037\044\045\001\002\000\034\014\020\017\017\023\370" +
    "\024\053\027\044\030\035\031\056\035\050\037\023\041" +
    "\027\042\026\043\037\044\045\001\002\000\060\005\uffb1" +
    "\007\uffb1\013\uffb1\014\uffb1\017\uffb1\021\uffb1\022\uffb1\023" +
    "\uffb1\024\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1\034\uffb1" +
    "\035\uffb1\036\uffb1\037\uffb1\040\uffb1\041\uffb1\042\uffb1\043" +
    "\uffb1\044\uffb1\101\uffb1\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\367\000\014\002\004\003\011\032\003\033\007\034" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\046\004\027\005\030\006\037\011\054\012" +
    "\035\014\020\015\042\017\024\021\033\023\041\024\015" +
    "\025\040\026\031\027\051\030\050\031\023\040\045\041" +
    "\032\001\001\000\004\034\014\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\007\165\016\343" +
    "\036\070\037\164\001\001\000\004\005\321\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\004\027\005\030" +
    "\006\037\014\020\015\042\017\315\021\033\023\041\024" +
    "\015\025\040\026\031\027\051\030\050\001\001\000\002" +
    "\001\001\000\032\004\027\005\030\006\037\014\113\015" +
    "\042\021\033\023\041\024\015\025\040\026\031\027\051" +
    "\030\050\001\001\000\006\007\311\036\070\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\273\036\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\011\054\012\035\041\272\001\001\000\002\001\001\000" +
    "\012\007\165\016\252\036\070\037\164\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\007\230\036\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\072\036\070\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\007\131\036\070\001\001\000\002\001\001" +
    "\000\006\007\130\036\070\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\127\036\070" +
    "\001\001\000\006\007\126\036\070\001\001\000\006\007" +
    "\125\036\070\001\001\000\002\001\001\000\006\007\106" +
    "\036\070\001\001\000\006\007\105\036\070\001\001\000" +
    "\006\007\104\036\070\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\007\115\036\070\001" +
    "\001\000\034\004\027\005\030\006\037\014\020\015\042" +
    "\017\111\021\033\023\041\024\015\025\040\026\031\027" +
    "\051\030\050\001\001\000\032\004\027\005\030\006\037" +
    "\014\113\015\042\021\033\023\041\024\015\025\040\026" +
    "\031\027\051\030\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\004" +
    "\027\005\030\006\037\014\020\015\042\017\117\021\033" +
    "\023\041\024\015\025\040\026\031\027\051\030\050\001" +
    "\001\000\032\004\027\005\030\006\037\014\113\015\042" +
    "\021\033\023\041\024\015\025\040\026\031\027\051\030" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\123\036\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\007\137\035\135\036\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\007\142\036\070\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\146\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\004\027\005\030\006\037\014\020" +
    "\015\042\017\151\021\033\023\041\024\015\025\040\026" +
    "\031\027\051\030\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\004\027\005\030\006\037\014\113\015" +
    "\042\021\033\023\041\024\015\025\040\026\031\027\051" +
    "\030\050\001\001\000\012\007\165\016\221\036\070\037" +
    "\164\001\001\000\002\001\001\000\004\013\156\001\001" +
    "\000\004\010\220\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\004\027\005\030\006\037\014\020\015\042" +
    "\017\161\021\033\023\041\024\015\025\040\026\031\027" +
    "\051\030\050\001\001\000\032\004\027\005\030\006\037" +
    "\014\113\015\042\021\033\023\041\024\015\025\040\026" +
    "\031\027\051\030\050\001\001\000\012\007\165\016\166" +
    "\036\070\037\164\001\001\000\010\007\165\036\070\037" +
    "\211\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\204\036\070\001\001\000\006\007\203\036\070\001\001" +
    "\000\006\007\202\036\070\001\001\000\006\007\201\036" +
    "\070\001\001\000\006\007\200\036\070\001\001\000\006" +
    "\007\177\036\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\007\165\036\070\037\210\001" +
    "\001\000\010\007\165\036\070\037\207\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\007" +
    "\165\016\213\036\070\037\164\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\217\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\007\165\016" +
    "\225\036\070\037\164\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\232\001\001\000\002\001\001\000\006\007\234\036\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\004" +
    "\027\005\030\006\037\014\020\015\042\017\237\021\033" +
    "\023\041\024\015\025\040\026\031\027\051\030\050\001" +
    "\001\000\032\004\027\005\030\006\037\014\113\015\042" +
    "\021\033\023\041\024\015\025\040\026\031\027\051\030" +
    "\050\001\001\000\002\001\001\000\006\007\246\036\070" +
    "\001\001\000\002\001\001\000\034\004\027\005\030\006" +
    "\037\014\020\015\042\017\244\021\033\023\041\024\015" +
    "\025\040\026\031\027\051\030\050\001\001\000\032\004" +
    "\027\005\030\006\037\014\113\015\042\021\033\023\041" +
    "\024\015\025\040\026\031\027\051\030\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\004\027\005\030\006\037\014\020\015\042\017\251\021" +
    "\033\023\041\024\015\025\040\026\031\027\051\030\050" +
    "\001\001\000\032\004\027\005\030\006\037\014\113\015" +
    "\042\021\033\023\041\024\015\025\040\026\031\027\051" +
    "\030\050\001\001\000\002\001\001\000\034\004\027\005" +
    "\030\006\037\014\020\015\042\017\254\021\033\023\041" +
    "\024\015\025\040\026\031\027\051\030\050\001\001\000" +
    "\032\004\027\005\030\006\037\014\113\015\042\021\033" +
    "\023\041\024\015\025\040\026\031\027\051\030\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\004\027" +
    "\005\030\006\037\014\020\015\042\017\261\021\033\023" +
    "\041\024\015\025\040\026\031\027\051\030\050\001\001" +
    "\000\002\001\001\000\032\004\027\005\030\006\037\014" +
    "\113\015\042\021\033\023\041\024\015\025\040\026\031" +
    "\027\051\030\050\001\001\000\002\001\001\000\004\013" +
    "\264\001\001\000\002\001\001\000\034\004\027\005\030" +
    "\006\037\014\020\015\042\017\267\021\033\023\041\024" +
    "\015\025\040\026\031\027\051\030\050\001\001\000\002" +
    "\001\001\000\032\004\027\005\030\006\037\014\113\015" +
    "\042\021\033\023\041\024\015\025\040\026\031\027\051" +
    "\030\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\300\036\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\007\137\035\304\036\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\007\165\016\320\036\070\037\164" +
    "\001\001\000\032\004\027\005\030\006\037\014\113\015" +
    "\042\021\033\023\041\024\015\025\040\026\031\027\051" +
    "\030\050\001\001\000\012\007\165\016\317\036\070\037" +
    "\164\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\330" +
    "\036\070\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\007\333\036\070\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\007\336\036\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\341\036\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\004\027\005" +
    "\030\006\037\014\020\015\042\017\345\021\033\023\041" +
    "\024\015\025\040\026\031\027\051\030\050\001\001\000" +
    "\034\004\027\005\030\006\037\014\020\015\042\017\366" +
    "\021\033\023\041\024\015\025\040\026\031\027\051\030" +
    "\050\001\001\000\034\004\027\005\030\006\037\014\113" +
    "\015\042\020\346\021\033\023\041\024\015\025\040\026" +
    "\031\027\051\030\050\001\001\000\002\001\001\000\012" +
    "\007\165\016\353\036\070\037\164\001\001\000\034\004" +
    "\027\005\030\006\037\014\020\015\042\017\351\021\033" +
    "\023\041\024\015\025\040\026\031\027\051\030\050\001" +
    "\001\000\032\004\027\005\030\006\037\014\113\015\042" +
    "\021\033\023\041\024\015\025\040\026\031\027\051\030" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\004\027\005\030\006\037\014\020\015\042\017\355\021" +
    "\033\023\041\024\015\025\040\026\031\027\051\030\050" +
    "\001\001\000\032\004\027\005\030\006\037\014\113\015" +
    "\042\021\033\023\041\024\015\025\040\026\031\027\051" +
    "\030\050\001\001\000\002\001\001\000\012\007\165\016" +
    "\363\036\070\037\164\001\001\000\034\004\027\005\030" +
    "\006\037\014\020\015\042\017\361\021\033\023\041\024" +
    "\015\025\040\026\031\027\051\030\050\001\001\000\032" +
    "\004\027\005\030\006\037\014\113\015\042\021\033\023" +
    "\041\024\015\025\040\026\031\027\051\030\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\004\027\005" +
    "\030\006\037\014\020\015\042\017\365\021\033\023\041" +
    "\024\015\025\040\026\031\027\051\030\050\001\001\000" +
    "\032\004\027\005\030\006\037\014\113\015\042\021\033" +
    "\023\041\024\015\025\040\026\031\027\051\030\050\001" +
    "\001\000\032\004\027\005\030\006\037\014\113\015\042" +
    "\021\033\023\041\024\015\025\040\026\031\027\051\030" +
    "\050\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /**
    *Listas
    **/
    public LinkedList<ErrorLenguaje> ErroresSintacticos = new LinkedList<ErrorLenguaje>();
    public LinkedList<Instruccion> Golang = new LinkedList<Instruccion>();
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){
        
        ErroresSintacticos.add(new ErrorLenguaje("Sintáctico","Carácter no esperado: "+s.value.toString(),s.right,s.left));

        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        ErroresSintacticos.add(new ErrorLenguaje("Sintáctico","Carácter no esperado: "+s.value.toString(),s.right,s.left));
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= MAIN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= COMENTARIOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCIONES ::= error 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // MAIN ::= RINICIO ALGORITMO RFIN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MAIN",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // MAIN ::= RINICIO RFIN 
            {
              Object RESULT =null;
		
                                                                                                            Main.importacion_print = false;
                                                                                                            Main.importacion_potencia = false;
                                                                                                            RESULT=new Main();
                                                                                                            Golang.add((Main) RESULT);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MAIN",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // COMENTARIOS ::= COMENTARIOS COMENTARIO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COMENTARIOS",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // COMENTARIOS ::= COMENTARIO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COMENTARIOS",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // COMENTARIO ::= COMENTARIOL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT=new Comentarios(Comentarios.Tipo_Comentario.COMENTARIO_UNILINEA, a);
                                                                                                            Golang.add((Comentarios) RESULT);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COMENTARIO",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // COMENTARIO ::= COMENTARIOML 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT=new Comentarios(Comentarios.Tipo_Comentario.COMENTARIO_MILTILINEA, a);
                                                                                                            Golang.add((Comentarios) RESULT);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COMENTARIO",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ALGORITMO ::= FUNCYMET 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ALGORITMO",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ALGORITMO ::= LOCAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT=new Main((LinkedList) a);
                                                                                                            Golang.add((Main) RESULT);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ALGORITMO",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FUNCYMET ::= FUNCYMET FYM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCYMET",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FUNCYMET ::= FYM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCYMET",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // FYM ::= FUNCION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FYM",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // FYM ::= METODO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FYM",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACION ::= RINGRESAR LISTA_IDENTIFICADORES RCOMO RNUMERO RCONVALOR EXPRESION PTCOMA 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		LinkedList<Instruccion> l = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		  
                                                                                                            RESULT=new Declaracion(Declaracion.Tipo_Variable.RNUMERO,(Operacion)e,(LinkedList)l);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION ::= RINGRESAR LISTA_IDENTIFICADORES RCOMO RCADENA RCONVALOR EXPRESION PTCOMA 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		LinkedList<Instruccion> l = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		  
                                                                                                            RESULT=new Declaracion(Declaracion.Tipo_Variable.RCADENA,(Operacion)e,(LinkedList)l);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACION ::= RINGRESAR LISTA_IDENTIFICADORES RCOMO RBOOLEAN RCONVALOR EXPRESION PTCOMA 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		LinkedList<Instruccion> l = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		  
                                                                                                            RESULT=new Declaracion(Declaracion.Tipo_Variable.RBOOLEAN,(Operacion)e,(LinkedList)l);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION ::= RINGRESAR LISTA_IDENTIFICADORES RCOMO RCARACTER RCONVALOR EXPRESION PTCOMA 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		LinkedList<Instruccion> l = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		  
                                                                                                            RESULT=new Declaracion(Declaracion.Tipo_Variable.RCARACTER,(Operacion)e,(LinkedList)l);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LISTA_IDENTIFICADORES ::= LISTA_IDENTIFICADORES COMA IDENTIFICADOR 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT = new LinkedList<>();
                                                                                                            for (int i = 0; i < a.size(); i++) {
                                                                                                                RESULT.add(a.get(i));
                                                                                                            }
                                                                                                            RESULT.add(new Operacion(b,Operacion.Tipo_operacion.IDENTIFICADOR));
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_IDENTIFICADORES",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LISTA_IDENTIFICADORES ::= IDENTIFICADOR 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT= new LinkedList<Instruccion>();
                                                                                                            RESULT.add(new Operacion(a,Operacion.Tipo_operacion.IDENTIFICADOR));
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_IDENTIFICADORES",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EXPRESION ::= ENTERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT=new Operacion(a,Operacion.Tipo_operacion.NUMERO);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EXPRESION ::= DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT=new Operacion(a,Operacion.Tipo_operacion.DECIMAL);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EXPRESION ::= CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT=new Operacion(a,Operacion.Tipo_operacion.CADENA);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EXPRESION ::= CARACTER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT=new Operacion(a,Operacion.Tipo_operacion.CARACTER);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXPRESION ::= CARASCCI 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT=new Operacion(a,Operacion.Tipo_operacion.ASCCI);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EXPRESION ::= RVERDADERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT=new Operacion(a,Operacion.Tipo_operacion.VERDADERO);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXPRESION ::= RFALSO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT=new Operacion(a,Operacion.Tipo_operacion.FALSO);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXPRESION ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT=new Operacion(a,Operacion.Tipo_operacion.IDENTIFICADOR);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXPRESION ::= RESTA EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT=new Operacion((Instruccion)a,Operacion.Tipo_operacion.NEGATIVO);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXPRESION ::= PARIZQ EXPRESION PARDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		  
                                                                                                            RESULT=new Operacion((Instruccion)a,Operacion.Tipo_operacion.AGRUPACION);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXPRESION ::= EXPRESION SUMA EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT=new Operacion((Instruccion)a,(Operacion)b,Operacion.Tipo_operacion.SUMA);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXPRESION ::= EXPRESION RESTA EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT=new Operacion((Instruccion)a,(Operacion)b,Operacion.Tipo_operacion.RESTA);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXPRESION ::= EXPRESION MULTIPLICACION EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT=new Operacion((Instruccion)a,(Operacion)b,Operacion.Tipo_operacion.MULTIPLICACION);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXPRESION ::= EXPRESION DIVIDIR EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT=new Operacion((Instruccion)a,(Operacion)b,Operacion.Tipo_operacion.DIVISION);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXPRESION ::= EXPRESION POTENCIA CORIZQ EXPRESION CORDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		  
                                                                                                            Main.importacion_potencia = true;
                                                                                                            RESULT=new Operacion((Instruccion)a,(Instruccion)b,Operacion.Tipo_operacion.POTENCIA);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXPRESION ::= EXPRESION MODU EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT=new Operacion((Instruccion)a,(Instruccion)b,Operacion.Tipo_operacion.MODULAR);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXPRESION ::= EJECUTAR_2 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT=(Instruccion) a;
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // RELACIONAL ::= EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT=(Operacion) a;
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RELACIONAL",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // RELACIONAL ::= EXPRESION RMAYOR EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT=new Operacion((Instruccion)a,(Instruccion)b,Operacion.Tipo_operacion.MAYORQUE);;
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RELACIONAL",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // RELACIONAL ::= EXPRESION RMENOR EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT=new Operacion((Instruccion)a,(Instruccion)b,Operacion.Tipo_operacion.MENORQUE);;
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RELACIONAL",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // RELACIONAL ::= EXPRESION RMAYOROIGUAL EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT=new Operacion((Instruccion)a,(Instruccion)b,Operacion.Tipo_operacion.MAYOROIGUAL);;
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RELACIONAL",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // RELACIONAL ::= EXPRESION RMENOROIGUAL EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT=new Operacion((Instruccion)a,(Instruccion)b,Operacion.Tipo_operacion.MENOROIGUAL);;
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RELACIONAL",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // RELACIONAL ::= EXPRESION RESIGUAL EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT=new Operacion((Instruccion)a,(Instruccion)b,Operacion.Tipo_operacion.IGUAL);;
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RELACIONAL",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // RELACIONAL ::= EXPRESION RESDIFERENTE EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT=new Operacion((Instruccion)a,(Instruccion)b,Operacion.Tipo_operacion.DIFERENTE);;
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RELACIONAL",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CONDICION ::= RELACIONAL ROR RELACIONAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT=new Operacion((Instruccion)a,(Instruccion)b,Operacion.Tipo_operacion.OR);;
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CONDICION ::= RELACIONAL RAND RELACIONAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT=new Operacion((Instruccion)a,(Instruccion)b,Operacion.Tipo_operacion.AND);;
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CONDICION ::= RNOT RELACIONAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT=new Operacion((Instruccion)a,Operacion.Tipo_operacion.MENOROIGUAL);;
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CONDICION ::= RELACIONAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT=(Operacion)a;
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ASIGNACION ::= LISTA_IDENTIFICADORES FLECHA EXPRESION PTCOMA 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<Instruccion> l = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		  
                                                                                                            RESULT=new Asignacion((Instruccion)e,(LinkedList)l);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FUNCION ::= RFUNCION IDENTIFICADOR TIPODATO LOCAL RRETORNAR CONDICION PTCOMA RFINFUNCION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FUNCION ::= RFUNCION IDENTIFICADOR TIPODATO RRETORNAR CONDICION PTCOMA RFINFUNCION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // FUNCION ::= RFUNCION IDENTIFICADOR TIPODATO RCONPARAMETROS PARIZQ LISTA_PARAMETROS PARDER LOCAL RRETORNAR CONDICION PTCOMA RFINFUNCION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // FUNCION ::= RFUNCION IDENTIFICADOR TIPODATO RCONPARAMETROS PARIZQ LISTA_PARAMETROS PARDER RRETORNAR CONDICION PTCOMA RFINFUNCION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // METODO ::= RMETODO IDENTIFICADOR LOCAL RFINMETODO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // METODO ::= RMETODO IDENTIFICADOR RFINMETODO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // METODO ::= RMETODO IDENTIFICADOR RCONPARAMETROS PARIZQ LISTA_PARAMETROS PARDER LOCAL RFINMETODO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // METODO ::= RMETODO IDENTIFICADOR RCONPARAMETROS PARIZQ LISTA_PARAMETROS PARDER RFINMETODO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // LISTA_PARAMETROS ::= LISTA_PARAMETROS COMA IDENTIFICADOR TIPODATO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // LISTA_PARAMETROS ::= IDENTIFICADOR TIPODATO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // TIPODATO ::= RNUMERO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // TIPODATO ::= RCADENA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // TIPODATO ::= RBOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // TIPODATO ::= RCARACTER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // LOCAL ::= LOCAL ENTORNO_LOCAL 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT = new LinkedList<>();
                                                                                                            for (int i = 0; i < a.size(); i++) {
                                                                                                                RESULT.add(a.get(i));
                                                                                                            }
                                                                                                            RESULT.add((Instruccion) b);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LOCAL",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // LOCAL ::= ENTORNO_LOCAL 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT= new LinkedList<Instruccion>();
                                                                                                            RESULT.add((Instruccion) a);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LOCAL",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ENTORNO_LOCAL ::= ASIGNACION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT= (Instruccion) a;
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ENTORNO_LOCAL",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ENTORNO_LOCAL ::= DECLARACION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT= (Instruccion) a;
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ENTORNO_LOCAL",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ENTORNO_LOCAL ::= CONDICIONAL_SI 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT= (Instruccion) a;
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ENTORNO_LOCAL",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ENTORNO_LOCAL ::= SELECCION_MULTIPLE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT= (Instruccion) a;
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ENTORNO_LOCAL",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ENTORNO_LOCAL ::= CICLO_PARA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT= (Instruccion) a;
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ENTORNO_LOCAL",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ENTORNO_LOCAL ::= CICLO_MIENTRAS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT= (Instruccion) a;
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ENTORNO_LOCAL",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ENTORNO_LOCAL ::= CICLO_REPETIR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT= (Instruccion) a;
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ENTORNO_LOCAL",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ENTORNO_LOCAL ::= EJECUTAR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT= (Instruccion) a;
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ENTORNO_LOCAL",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ENTORNO_LOCAL ::= IMPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT= (Instruccion) a;
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ENTORNO_LOCAL",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ENTORNO_LOCAL ::= IMPRESION_CONSALTO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT= (Instruccion) a;
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ENTORNO_LOCAL",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ENTORNO_LOCAL ::= COMENTARIOL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT=new Comentarios(Comentarios.Tipo_Comentario.COMENTARIO_UNILINEA, a);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ENTORNO_LOCAL",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ENTORNO_LOCAL ::= COMENTARIOML 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT=new Comentarios(Comentarios.Tipo_Comentario.COMENTARIO_MILTILINEA, a);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ENTORNO_LOCAL",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CONDICIONAL_SI ::= RSI CONDICION RENTONCES LOCAL RFINSI 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		  
                                                                                                            RESULT= new Si((Instruccion) a, (LinkedList) b);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_SI",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CONDICIONAL_SI ::= RSI CONDICION LOCAL LISTA_OSI RFINSI 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Si> l = (LinkedList<Si>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		  
                                                                                                            RESULT= new Si((LinkedList) b,(Operacion) a, (LinkedList) l);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_SI",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // CONDICIONAL_SI ::= RSI CONDICION LOCAL LISTA_OSI RDELOCONTRARIO LOCAL RFINSI 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<Si> l = (LinkedList<Si>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		  
                                                                                                            RESULT= new Si((Instruccion) a,(LinkedList) b, (LinkedList) l, (LinkedList) c);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_SI",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CONDICIONAL_SI ::= RSI CONDICION LOCAL RDELOCONTRARIO LOCAL RFINSI 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		  
                                                                                                            RESULT= new Si((Instruccion) a,(LinkedList) b, (LinkedList) c);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_SI",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // LISTA_OSI ::= LISTA_OSI ROSI CONDICION RENTONCES LOCAL 
            {
              LinkedList<Si> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<Si> l = (LinkedList<Si>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT = new LinkedList<>();
                                                                                                            for (int i = 0; i < l.size(); i++) {
                                                                                                                RESULT.add(l.get(i));
                                                                                                            }
                                                                                                            RESULT.add(new Si((Instruccion) c, (LinkedList) d));
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_OSI",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // LISTA_OSI ::= ROSI CONDICION RENTONCES LOCAL 
            {
              LinkedList<Si> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> f = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT= new LinkedList<Si>();
                                                                                                            RESULT.add(new Si((Instruccion) e, (LinkedList) f));
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_OSI",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // SELECCION_MULTIPLE ::= RSEGUN EXPRESION RHACER LISTA_VALORENTONCES RFINSEGUN 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> l = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		  
                                                                                                            RESULT= new SeleccionMultiple((Instruccion)a, (LinkedList) l);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SELECCION_MULTIPLE",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // SELECCION_MULTIPLE ::= RSEGUN EXPRESION RHACER LISTA_VALORENTONCES RDELOCONTRARIO RENTONCES LOCAL RFINSEGUN 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<Instruccion> l = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		  
                                                                                                            RESULT = new SeleccionMultiple((Instruccion)a, (LinkedList)l, (LinkedList) b);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SELECCION_MULTIPLE",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // LISTA_VALORENTONCES ::= LISTA_VALORENTONCES INTABRE EXPRESION INTCIERRA RENTONCES LOCAL 
            {
              LinkedList<Instruccion> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		LinkedList<Instruccion> l = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT= new LinkedList<>();
                                                                                                            for (int i = 0; i < l.size(); i++) {
                                                                                                                RESULT.add(l.get(i));
                                                                                                            }
                                                                                                            RESULT.add(new Case((Instruccion) e, (LinkedList) a));
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_VALORENTONCES",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // LISTA_VALORENTONCES ::= INTABRE EXPRESION INTCIERRA RENTONCES LOCAL 
            {
              LinkedList<Instruccion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT= new LinkedList<>();
                                                                                                            RESULT.add(new Case((Instruccion) e, (LinkedList) a));
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_VALORENTONCES",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CICLO_PARA ::= RPARA IDENTIFICADOR FLECHA EXPRESION RHASTA EXPRESION RHACER LOCAL RFINPARA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		  
                                                                                                            RESULT= new Para(new Operacion(a,Operacion.Tipo_operacion.IDENTIFICADOR), (Instruccion) b, (Instruccion) c, (LinkedList) d);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_PARA",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CICLO_PARA ::= RPARA IDENTIFICADOR FLECHA EXPRESION RHASTA EXPRESION RHACER RFINPARA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		  
                                                                                                            RESULT= new Para(new Operacion(a,Operacion.Tipo_operacion.IDENTIFICADOR), (Instruccion) b, (Instruccion) c);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_PARA",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CICLO_PARA ::= RPARA IDENTIFICADOR FLECHA EXPRESION RHASTA EXPRESION RCONINCREMENTAL EXPRESION RHACER LOCAL RFINPARA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> e = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		  
                                                                                                            RESULT= new Para(new Operacion(a,Operacion.Tipo_operacion.IDENTIFICADOR), (Instruccion) b, (Instruccion) c, (Instruccion) d,(LinkedList) e);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_PARA",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CICLO_PARA ::= RPARA IDENTIFICADOR FLECHA EXPRESION RHASTA EXPRESION RCONINCREMENTAL EXPRESION RHACER RFINPARA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		  
                                                                                                            RESULT= new Para(new Operacion(a,Operacion.Tipo_operacion.IDENTIFICADOR), (Instruccion) b, (Instruccion) c, (Instruccion) d);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_PARA",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // CICLO_MIENTRAS ::= RMIENTRAS CONDICION RHACER LOCAL RFINMIENTRAS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		  
                                                                                                            RESULT= new Mientras((Instruccion) a,(LinkedList) b);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_MIENTRAS",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // CICLO_MIENTRAS ::= RMIENTRAS CONDICION RHACER RFINMIENTRAS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		  
                                                                                                            RESULT= new Mientras((Instruccion) a);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_MIENTRAS",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // CICLO_REPETIR ::= RREPETIR LOCAL RHASTAQUE CONDICION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT= new Repetir((Instruccion) b,(LinkedList) a);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_REPETIR",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // CICLO_REPETIR ::= RREPETIR RHASTAQUE CONDICION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT= new Repetir((Instruccion) a);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_REPETIR",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EJECUTAR ::= REJECUTAR IDENTIFICADOR PARIZQ PARDER PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		  
                                                                                                            RESULT= new Ejecutar(new Operacion(a,Operacion.Tipo_operacion.IDENTIFICADOR),Ejecutar.Tipo_Variable.EJECUTAR);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EJECUTAR",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EJECUTAR ::= REJECUTAR IDENTIFICADOR PARIZQ INSERCION_PARAMETROS PARDER PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Instruccion> l = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		  
                                                                                                            RESULT= new Ejecutar(new Operacion(a,Operacion.Tipo_operacion.IDENTIFICADOR),Ejecutar.Tipo_Variable.EJECUTAR,(LinkedList) l);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EJECUTAR",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EJECUTAR_2 ::= REJECUTAR IDENTIFICADOR PARIZQ PARDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		  
                                                                                                            RESULT= new Ejecutar(new Operacion(a,Operacion.Tipo_operacion.IDENTIFICADOR),Ejecutar.Tipo_Variable.EXPRESION);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EJECUTAR_2",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EJECUTAR_2 ::= REJECUTAR IDENTIFICADOR PARIZQ INSERCION_PARAMETROS PARDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> l = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		  
                                                                                                            RESULT= new Ejecutar(new Operacion(a,Operacion.Tipo_operacion.IDENTIFICADOR),Ejecutar.Tipo_Variable.EXPRESION,(LinkedList) l);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EJECUTAR_2",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // INSERCION_PARAMETROS ::= INSERCION_PARAMETROS COMA EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Instruccion> l = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT = new LinkedList<>();
                                                                                                            for (int i = 0; i < l.size(); i++) {
                                                                                                                RESULT.add(l.get(i));
                                                                                                            }
                                                                                                            RESULT.add((Instruccion) e);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSERCION_PARAMETROS",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // INSERCION_PARAMETROS ::= EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT= new LinkedList<>();
                                                                                                            RESULT.add((Instruccion) e);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSERCION_PARAMETROS",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // IMPRESION ::= RIMPRIMIR EXPRESION PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		  
                                                                                                            Main.importacion_print = true;
                                                                                                            RESULT= new Impresion(Impresion.Tipo_Impresion.SIN_SALTO,(Instruccion) a);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPRESION",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // IMPRESION_CONSALTO ::= RIMPRIMIRNL EXPRESION PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		  
                                                                                                            Main.importacion_print = true;
                                                                                                            RESULT= new Impresion(Impresion.Tipo_Impresion.CON_SALTO,(Instruccion) a);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPRESION_CONSALTO",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
