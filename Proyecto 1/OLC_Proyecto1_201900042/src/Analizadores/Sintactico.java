
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\157\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\004\000\002\034\005\000\002\034\004" +
    "\000\002\034\005\000\002\034\006\000\002\034\006\000" +
    "\002\034\005\000\002\034\007\000\002\034\006\000\002" +
    "\035\004\000\002\035\003\000\002\036\003\000\002\036" +
    "\003\000\002\033\004\000\002\033\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\004\007\000" +
    "\002\004\007\000\002\004\007\000\002\004\007\000\002" +
    "\004\003\000\002\005\005\000\002\005\003\000\002\006" +
    "\011\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\004\000\002" +
    "\010\005\000\002\010\005\000\002\010\005\000\002\010" +
    "\005\000\002\010\005\000\002\010\007\000\002\010\005" +
    "\000\002\010\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\007\006\000\002" +
    "\013\012\000\002\013\011\000\002\013\016\000\002\013" +
    "\015\000\002\014\006\000\002\014\005\000\002\014\012" +
    "\000\002\014\011\000\002\015\006\000\002\015\004\000" +
    "\002\021\004\000\002\021\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\017\007\000\002\017\006\000\002" +
    "\017\010\000\002\017\010\000\002\020\003\000\002\020" +
    "\005\000\002\020\005\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\005\000\002\020\004\000" +
    "\002\020\005\000\002\020\005\000\002\022\007\000\002" +
    "\022\007\000\002\023\007\000\002\023\012\000\002\024" +
    "\010\000\002\024\007\000\002\025\013\000\002\025\012" +
    "\000\002\025\015\000\002\025\014\000\002\026\007\000" +
    "\002\026\006\000\002\027\006\000\002\027\005\000\002" +
    "\030\007\000\002\030\010\000\002\040\006\000\002\040" +
    "\007\000\002\037\005\000\002\037\003\000\002\031\005" +
    "\000\002\032\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\373\000\012\003\012\004\007\027\014\030\006\001" +
    "\002\000\004\002\uffff\001\002\000\004\002\375\001\002" +
    "\000\012\002\ufff2\004\ufff2\027\ufff2\030\ufff2\001\002\000" +
    "\040\005\370\006\050\010\055\014\022\017\021\024\054" +
    "\027\044\030\035\031\057\035\051\037\025\041\027\042" +
    "\030\043\037\044\046\001\002\000\004\004\017\001\002" +
    "\000\004\002\000\001\002\000\012\003\012\004\007\027" +
    "\014\030\006\001\002\000\012\002\ufff4\004\ufff4\027\014" +
    "\030\006\001\002\000\012\002\ufff3\004\ufff3\027\ufff3\030" +
    "\ufff3\001\002\000\006\002\ufff5\004\ufff5\001\002\000\004" +
    "\002\ufffe\001\002\000\040\005\024\006\050\010\055\014" +
    "\022\017\021\024\054\027\044\030\035\031\057\035\051" +
    "\037\025\041\027\042\030\043\037\044\046\001\002\000" +
    "\064\005\uffbd\006\uffbd\007\uffbd\010\uffbd\013\uffbd\014\uffbd" +
    "\017\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\026\uffbd\027" +
    "\uffbd\030\uffbd\031\uffbd\034\uffbd\035\uffbd\036\uffbd\037\uffbd" +
    "\040\uffbd\041\uffbd\042\uffbd\043\uffbd\044\uffbd\101\uffbd\001" +
    "\002\000\032\041\070\044\076\045\066\046\064\047\062" +
    "\050\075\051\063\053\073\070\166\075\065\076\067\077" +
    "\071\001\002\000\004\044\046\001\002\000\040\005\uffed" +
    "\006\uffed\010\uffed\014\uffed\017\uffed\024\uffed\027\uffed\030" +
    "\uffed\031\uffed\035\uffed\037\uffed\041\uffed\042\uffed\043\uffed" +
    "\044\uffed\001\002\000\010\002\ufff8\027\014\030\006\001" +
    "\002\000\034\014\022\017\021\024\054\027\044\030\035" +
    "\031\057\035\051\037\025\040\317\041\027\042\030\043" +
    "\037\044\046\001\002\000\040\005\314\006\050\010\055" +
    "\014\022\017\021\024\054\027\044\030\035\031\057\035" +
    "\051\037\025\041\027\042\030\043\037\044\046\001\002" +
    "\000\004\044\305\001\002\000\030\041\070\044\076\045" +
    "\066\046\064\047\062\050\075\051\063\053\073\075\065" +
    "\076\067\077\071\001\002\000\064\005\uffc1\006\uffc1\007" +
    "\uffc1\010\uffc1\013\uffc1\014\uffc1\017\uffc1\021\uffc1\022\uffc1" +
    "\023\uffc1\024\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1\034" +
    "\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1\042\uffc1" +
    "\043\uffc1\044\uffc1\101\uffc1\001\002\000\006\103\276\105" +
    "\277\001\002\000\064\005\uffbb\006\uffbb\007\uffbb\010\uffbb" +
    "\013\uffbb\014\uffbb\017\uffbb\021\uffbb\022\uffbb\023\uffbb\024" +
    "\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb\034\uffbb\035\uffbb" +
    "\036\uffbb\037\uffbb\040\uffbb\041\uffbb\042\uffbb\043\uffbb\044" +
    "\uffbb\101\uffbb\001\002\000\064\005\uffbf\006\uffbf\007\uffbf" +
    "\010\uffbf\013\uffbf\014\uffbf\017\uffbf\021\uffbf\022\uffbf\023" +
    "\uffbf\024\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf\034\uffbf" +
    "\035\uffbf\036\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf\043" +
    "\uffbf\044\uffbf\101\uffbf\001\002\000\064\005\uffb7\006\uffb7" +
    "\007\uffb7\010\uffb7\013\uffb7\014\uffb7\017\uffb7\021\uffb7\022" +
    "\uffb7\023\uffb7\024\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7" +
    "\034\uffb7\035\uffb7\036\uffb7\037\uffb7\040\uffb7\041\uffb7\042" +
    "\uffb7\043\uffb7\044\uffb7\101\uffb7\001\002\000\064\005\uffc2" +
    "\006\uffc2\007\uffc2\010\uffc2\013\uffc2\014\uffc2\017\uffc2\021" +
    "\uffc2\022\uffc2\023\uffc2\024\uffc2\026\uffc2\027\uffc2\030\uffc2" +
    "\031\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2\041" +
    "\uffc2\042\uffc2\043\uffc2\044\uffc2\101\uffc2\001\002\000\030" +
    "\041\070\044\076\045\066\046\064\047\062\050\075\051" +
    "\063\053\073\075\065\076\067\077\071\001\002\000\040" +
    "\005\uffee\006\uffee\010\uffee\014\uffee\017\uffee\024\uffee\027" +
    "\uffee\030\uffee\031\uffee\035\uffee\037\uffee\041\uffee\042\uffee" +
    "\043\uffee\044\uffee\001\002\000\064\005\uffbc\006\uffbc\007" +
    "\uffbc\010\uffbc\013\uffbc\014\uffbc\017\uffbc\021\uffbc\022\uffbc" +
    "\023\uffbc\024\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc\034" +
    "\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc\042\uffbc" +
    "\043\uffbc\044\uffbc\101\uffbc\001\002\000\064\005\uffbe\006" +
    "\uffbe\007\uffbe\010\uffbe\013\uffbe\014\uffbe\017\uffbe\021\uffbe" +
    "\022\uffbe\023\uffbe\024\uffbe\026\uffbe\027\uffbe\030\uffbe\031" +
    "\uffbe\034\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe" +
    "\042\uffbe\043\uffbe\044\uffbe\101\uffbe\001\002\000\064\005" +
    "\uffc0\006\uffc0\007\uffc0\010\uffc0\013\uffc0\014\uffc0\017\uffc0" +
    "\021\uffc0\022\uffc0\023\uffc0\024\uffc0\026\uffc0\027\uffc0\030" +
    "\uffc0\031\uffc0\034\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0" +
    "\041\uffc0\042\uffc0\043\uffc0\044\uffc0\101\uffc0\001\002\000" +
    "\064\005\uffb8\006\uffb8\007\uffb8\010\uffb8\013\uffb8\014\uffb8" +
    "\017\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8\026\uffb8\027" +
    "\uffb8\030\uffb8\031\uffb8\034\uffb8\035\uffb8\036\uffb8\037\uffb8" +
    "\040\uffb8\041\uffb8\042\uffb8\043\uffb8\044\uffb8\101\uffb8\001" +
    "\002\000\040\005\ufff0\006\ufff0\010\ufff0\014\ufff0\017\ufff0" +
    "\024\ufff0\027\ufff0\030\ufff0\031\ufff0\035\ufff0\037\ufff0\041" +
    "\ufff0\042\ufff0\043\ufff0\044\ufff0\001\002\000\010\015\uffe6" +
    "\103\uffe6\105\uffe6\001\002\000\064\005\uffe8\006\uffe8\007" +
    "\uffe8\010\uffe8\013\uffe8\014\uffe8\017\uffe8\021\uffe8\022\uffe8" +
    "\023\uffe8\024\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8\034" +
    "\uffe8\035\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8" +
    "\043\uffe8\044\uffe8\101\uffe8\001\002\000\004\044\261\001" +
    "\002\000\032\041\070\044\076\045\066\046\064\047\062" +
    "\050\075\051\063\053\073\070\166\075\065\076\067\077" +
    "\071\001\002\000\064\005\uffb9\006\uffb9\007\uffb9\010\uffb9" +
    "\013\uffb9\014\uffb9\017\uffb9\021\uffb9\022\uffb9\023\uffb9\024" +
    "\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9\034\uffb9\035\uffb9" +
    "\036\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9\044" +
    "\uffb9\101\uffb9\001\002\000\064\005\uffba\006\uffba\007\uffba" +
    "\010\uffba\013\uffba\014\uffba\017\uffba\021\uffba\022\uffba\023" +
    "\uffba\024\uffba\026\uffba\027\uffba\030\uffba\031\uffba\034\uffba" +
    "\035\uffba\036\uffba\037\uffba\040\uffba\041\uffba\042\uffba\043" +
    "\uffba\044\uffba\101\uffba\001\002\000\030\041\070\044\076" +
    "\045\066\046\064\047\062\050\075\051\063\053\073\075" +
    "\065\076\067\077\071\001\002\000\004\044\146\001\002" +
    "\000\040\005\uffef\006\uffef\010\uffef\014\uffef\017\uffef\024" +
    "\uffef\027\uffef\030\uffef\031\uffef\035\uffef\037\uffef\041\uffef" +
    "\042\uffef\043\uffef\044\uffef\001\002\000\004\044\060\001" +
    "\002\000\004\103\061\001\002\000\030\041\070\044\076" +
    "\045\066\046\064\047\062\050\075\051\063\053\073\075" +
    "\065\076\067\077\071\001\002\000\142\005\uffe2\006\uffe2" +
    "\007\uffe2\010\uffe2\013\uffe2\014\uffe2\017\uffe2\020\uffe2\021" +
    "\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2" +
    "\030\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2\036" +
    "\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2\043\uffe2\044\uffe2" +
    "\052\uffe2\053\uffe2\054\uffe2\055\uffe2\056\uffe2\057\uffe2\060" +
    "\uffe2\061\uffe2\062\uffe2\063\uffe2\064\uffe2\065\uffe2\066\uffe2" +
    "\067\uffe2\100\uffe2\101\uffe2\102\uffe2\104\uffe2\105\uffe2\107" +
    "\uffe2\001\002\000\142\005\uffe3\006\uffe3\007\uffe3\010\uffe3" +
    "\013\uffe3\014\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023" +
    "\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3" +
    "\032\uffe3\033\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040" +
    "\uffe3\041\uffe3\042\uffe3\043\uffe3\044\uffe3\052\uffe3\053\uffe3" +
    "\054\uffe3\055\uffe3\056\uffe3\057\uffe3\060\uffe3\061\uffe3\062" +
    "\uffe3\063\uffe3\064\uffe3\065\uffe3\066\uffe3\067\uffe3\100\uffe3" +
    "\101\uffe3\102\uffe3\104\uffe3\105\uffe3\107\uffe3\001\002\000" +
    "\142\005\uffe0\006\uffe0\007\uffe0\010\uffe0\013\uffe0\014\uffe0" +
    "\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025" +
    "\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0" +
    "\034\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0\042" +
    "\uffe0\043\uffe0\044\uffe0\052\uffe0\053\uffe0\054\uffe0\055\uffe0" +
    "\056\uffe0\057\uffe0\060\uffe0\061\uffe0\062\uffe0\063\uffe0\064" +
    "\uffe0\065\uffe0\066\uffe0\067\uffe0\100\uffe0\101\uffe0\102\uffe0" +
    "\104\uffe0\105\uffe0\107\uffe0\001\002\000\142\005\uffdf\006" +
    "\uffdf\007\uffdf\010\uffdf\013\uffdf\014\uffdf\017\uffdf\020\uffdf" +
    "\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027" +
    "\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf" +
    "\036\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf\043\uffdf\044" +
    "\uffdf\052\uffdf\053\uffdf\054\uffdf\055\uffdf\056\uffdf\057\uffdf" +
    "\060\uffdf\061\uffdf\062\uffdf\063\uffdf\064\uffdf\065\uffdf\066" +
    "\uffdf\067\uffdf\100\uffdf\101\uffdf\102\uffdf\104\uffdf\105\uffdf" +
    "\107\uffdf\001\002\000\142\005\uffe4\006\uffe4\007\uffe4\010" +
    "\uffe4\013\uffe4\014\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4" +
    "\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4\031" +
    "\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4" +
    "\040\uffe4\041\uffe4\042\uffe4\043\uffe4\044\uffe4\052\uffe4\053" +
    "\uffe4\054\uffe4\055\uffe4\056\uffe4\057\uffe4\060\uffe4\061\uffe4" +
    "\062\uffe4\063\uffe4\064\uffe4\065\uffe4\066\uffe4\067\uffe4\100" +
    "\uffe4\101\uffe4\102\uffe4\104\uffe4\105\uffe4\107\uffe4\001\002" +
    "\000\142\005\uffde\006\uffde\007\uffde\010\uffde\013\uffde\014" +
    "\uffde\017\uffde\020\uffde\021\uffde\022\uffde\023\uffde\024\uffde" +
    "\025\uffde\026\uffde\027\uffde\030\uffde\031\uffde\032\uffde\033" +
    "\uffde\034\uffde\035\uffde\036\uffde\037\uffde\040\uffde\041\uffde" +
    "\042\uffde\043\uffde\044\uffde\052\uffde\053\uffde\054\uffde\055" +
    "\uffde\056\uffde\057\uffde\060\uffde\061\uffde\062\uffde\063\uffde" +
    "\064\uffde\065\uffde\066\uffde\067\uffde\100\uffde\101\uffde\102" +
    "\uffde\104\uffde\105\uffde\107\uffde\001\002\000\004\044\136" +
    "\001\002\000\030\041\070\044\076\045\066\046\064\047" +
    "\062\050\075\051\063\053\073\075\065\076\067\077\071" +
    "\001\002\000\142\005\uffd4\006\uffd4\007\uffd4\010\uffd4\013" +
    "\uffd4\014\uffd4\017\uffd4\020\uffd4\021\uffd4\022\uffd4\023\uffd4" +
    "\024\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4\032" +
    "\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4" +
    "\041\uffd4\042\uffd4\043\uffd4\044\uffd4\052\uffd4\053\uffd4\054" +
    "\uffd4\055\uffd4\056\uffd4\057\uffd4\060\uffd4\061\uffd4\062\uffd4" +
    "\063\uffd4\064\uffd4\065\uffd4\066\uffd4\067\uffd4\100\uffd4\101" +
    "\uffd4\102\uffd4\104\uffd4\105\uffd4\107\uffd4\001\002\000\030" +
    "\041\070\044\076\045\066\046\064\047\062\050\075\051" +
    "\063\053\073\075\065\076\067\077\071\001\002\000\020" +
    "\032\103\052\104\053\101\054\077\055\100\056\105\057" +
    "\102\001\002\000\142\005\uffe1\006\uffe1\007\uffe1\010\uffe1" +
    "\013\uffe1\014\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023" +
    "\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1" +
    "\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040" +
    "\uffe1\041\uffe1\042\uffe1\043\uffe1\044\uffe1\052\uffe1\053\uffe1" +
    "\054\uffe1\055\uffe1\056\uffe1\057\uffe1\060\uffe1\061\uffe1\062" +
    "\uffe1\063\uffe1\064\uffe1\065\uffe1\066\uffe1\067\uffe1\100\uffe1" +
    "\101\uffe1\102\uffe1\104\uffe1\105\uffe1\107\uffe1\001\002\000" +
    "\142\005\uffdd\006\uffdd\007\uffdd\010\uffdd\013\uffdd\014\uffdd" +
    "\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025" +
    "\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd" +
    "\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd\042" +
    "\uffdd\043\uffdd\044\uffdd\052\uffdd\053\uffdd\054\uffdd\055\uffdd" +
    "\056\uffdd\057\uffdd\060\uffdd\061\uffdd\062\uffdd\063\uffdd\064" +
    "\uffdd\065\uffdd\066\uffdd\067\uffdd\100\uffdd\101\uffdd\102\uffdd" +
    "\104\uffdd\105\uffdd\107\uffdd\001\002\000\030\041\070\044" +
    "\076\045\066\046\064\047\062\050\075\051\063\053\073" +
    "\075\065\076\067\077\071\001\002\000\030\041\070\044" +
    "\076\045\066\046\064\047\062\050\075\051\063\053\073" +
    "\075\065\076\067\077\071\001\002\000\030\041\070\044" +
    "\076\045\066\046\064\047\062\050\075\051\063\053\073" +
    "\075\065\076\067\077\071\001\002\000\004\106\125\001" +
    "\002\000\030\041\070\044\076\045\066\046\064\047\062" +
    "\050\075\051\063\053\073\075\065\076\067\077\071\001" +
    "\002\000\030\041\070\044\076\045\066\046\064\047\062" +
    "\050\075\051\063\053\073\075\065\076\067\077\071\001" +
    "\002\000\030\041\070\044\076\045\066\046\064\047\062" +
    "\050\075\051\063\053\073\075\065\076\067\077\071\001" +
    "\002\000\142\005\uffd5\006\uffd5\007\uffd5\010\uffd5\013\uffd5" +
    "\014\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5\024" +
    "\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5" +
    "\033\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5\041" +
    "\uffd5\042\uffd5\043\uffd5\044\uffd5\052\uffd5\053\uffd5\054\uffd5" +
    "\055\uffd5\056\uffd5\057\uffd5\060\uffd5\061\uffd5\062\uffd5\063" +
    "\uffd5\064\uffd5\065\uffd5\066\uffd5\067\uffd5\100\uffd5\101\uffd5" +
    "\102\uffd5\104\uffd5\105\uffd5\107\uffd5\001\002\000\142\005" +
    "\uffda\006\uffda\007\uffda\010\uffda\013\uffda\014\uffda\017\uffda" +
    "\020\uffda\021\uffda\022\uffda\023\uffda\024\uffda\025\uffda\026" +
    "\uffda\027\uffda\030\uffda\031\uffda\032\uffda\033\uffda\034\uffda" +
    "\035\uffda\036\uffda\037\uffda\040\uffda\041\uffda\042\uffda\043" +
    "\uffda\044\uffda\052\uffda\053\uffda\054\077\055\100\056\105" +
    "\057\102\060\uffda\061\uffda\062\uffda\063\uffda\064\uffda\065" +
    "\uffda\066\uffda\067\uffda\100\uffda\101\uffda\102\uffda\104\uffda" +
    "\105\uffda\107\uffda\001\002\000\022\025\112\033\111\052" +
    "\104\053\101\054\077\055\100\056\105\057\102\001\002" +
    "\000\030\041\070\044\076\045\066\046\064\047\062\050" +
    "\075\051\063\053\073\075\065\076\067\077\071\001\002" +
    "\000\034\014\022\017\021\024\054\027\044\030\035\031" +
    "\057\034\115\035\051\037\025\041\027\042\030\043\037" +
    "\044\046\001\002\000\056\007\uffc3\013\uffc3\014\uffc3\017" +
    "\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3\026\uffc3\027\uffc3" +
    "\030\uffc3\031\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3\040" +
    "\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3\101\uffc3\001\002" +
    "\000\034\014\022\017\021\024\054\027\044\030\035\031" +
    "\057\034\117\035\051\037\025\041\027\042\030\043\037" +
    "\044\046\001\002\000\064\005\uffa1\006\uffa1\007\uffa1\010" +
    "\uffa1\013\uffa1\014\uffa1\017\uffa1\021\uffa1\022\uffa1\023\uffa1" +
    "\024\uffa1\026\uffa1\027\uffa1\030\uffa1\031\uffa1\034\uffa1\035" +
    "\uffa1\036\uffa1\037\uffa1\040\uffa1\041\uffa1\042\uffa1\043\uffa1" +
    "\044\uffa1\101\uffa1\001\002\000\056\007\uffc4\013\uffc4\014" +
    "\uffc4\017\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4\026\uffc4" +
    "\027\uffc4\030\uffc4\031\uffc4\034\uffc4\035\uffc4\036\uffc4\037" +
    "\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4\044\uffc4\101\uffc4" +
    "\001\002\000\064\005\uffa2\006\uffa2\007\uffa2\010\uffa2\013" +
    "\uffa2\014\uffa2\017\uffa2\021\uffa2\022\uffa2\023\uffa2\024\uffa2" +
    "\026\uffa2\027\uffa2\030\uffa2\031\uffa2\034\uffa2\035\uffa2\036" +
    "\uffa2\037\uffa2\040\uffa2\041\uffa2\042\uffa2\043\uffa2\044\uffa2" +
    "\101\uffa2\001\002\000\020\025\121\052\104\053\101\054" +
    "\077\055\100\056\105\057\102\001\002\000\034\014\022" +
    "\017\021\024\054\027\044\030\035\031\057\034\123\035" +
    "\051\037\025\041\027\042\030\043\037\044\046\001\002" +
    "\000\034\014\022\017\021\024\054\027\044\030\035\031" +
    "\057\034\124\035\051\037\025\041\027\042\030\043\037" +
    "\044\046\001\002\000\064\005\uff9f\006\uff9f\007\uff9f\010" +
    "\uff9f\013\uff9f\014\uff9f\017\uff9f\021\uff9f\022\uff9f\023\uff9f" +
    "\024\uff9f\026\uff9f\027\uff9f\030\uff9f\031\uff9f\034\uff9f\035" +
    "\uff9f\036\uff9f\037\uff9f\040\uff9f\041\uff9f\042\uff9f\043\uff9f" +
    "\044\uff9f\101\uff9f\001\002\000\064\005\uffa0\006\uffa0\007" +
    "\uffa0\010\uffa0\013\uffa0\014\uffa0\017\uffa0\021\uffa0\022\uffa0" +
    "\023\uffa0\024\uffa0\026\uffa0\027\uffa0\030\uffa0\031\uffa0\034" +
    "\uffa0\035\uffa0\036\uffa0\037\uffa0\040\uffa0\041\uffa0\042\uffa0" +
    "\043\uffa0\044\uffa0\101\uffa0\001\002\000\030\041\070\044" +
    "\076\045\066\046\064\047\062\050\075\051\063\053\073" +
    "\075\065\076\067\077\071\001\002\000\020\052\104\053" +
    "\101\054\077\055\100\056\105\057\102\107\127\001\002" +
    "\000\142\005\uffd6\006\uffd6\007\uffd6\010\uffd6\013\uffd6\014" +
    "\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6" +
    "\025\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033" +
    "\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6" +
    "\042\uffd6\043\uffd6\044\uffd6\052\uffd6\053\uffd6\054\uffd6\055" +
    "\uffd6\056\uffd6\057\uffd6\060\uffd6\061\uffd6\062\uffd6\063\uffd6" +
    "\064\uffd6\065\uffd6\066\uffd6\067\uffd6\100\uffd6\101\uffd6\102" +
    "\uffd6\104\uffd6\105\uffd6\107\uffd6\001\002\000\142\005\uffd9" +
    "\006\uffd9\007\uffd9\010\uffd9\013\uffd9\014\uffd9\017\uffd9\020" +
    "\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9" +
    "\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\035" +
    "\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9" +
    "\044\uffd9\052\uffd9\053\uffd9\054\077\055\100\056\105\057" +
    "\102\060\uffd9\061\uffd9\062\uffd9\063\uffd9\064\uffd9\065\uffd9" +
    "\066\uffd9\067\uffd9\100\uffd9\101\uffd9\102\uffd9\104\uffd9\105" +
    "\uffd9\107\uffd9\001\002\000\142\005\uffd7\006\uffd7\007\uffd7" +
    "\010\uffd7\013\uffd7\014\uffd7\017\uffd7\020\uffd7\021\uffd7\022" +
    "\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7" +
    "\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7\037" +
    "\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7\044\uffd7\052\uffd7" +
    "\053\uffd7\054\uffd7\055\uffd7\056\105\057\102\060\uffd7\061" +
    "\uffd7\062\uffd7\063\uffd7\064\uffd7\065\uffd7\066\uffd7\067\uffd7" +
    "\100\uffd7\101\uffd7\102\uffd7\104\uffd7\105\uffd7\107\uffd7\001" +
    "\002\000\142\005\uffd8\006\uffd8\007\uffd8\010\uffd8\013\uffd8" +
    "\014\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8\024" +
    "\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8" +
    "\033\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8\041" +
    "\uffd8\042\uffd8\043\uffd8\044\uffd8\052\uffd8\053\uffd8\054\uffd8" +
    "\055\uffd8\056\105\057\102\060\uffd8\061\uffd8\062\uffd8\063" +
    "\uffd8\064\uffd8\065\uffd8\066\uffd8\067\uffd8\100\uffd8\101\uffd8" +
    "\102\uffd8\104\uffd8\105\uffd8\107\uffd8\001\002\000\142\005" +
    "\uffdc\006\uffdc\007\uffdc\010\uffdc\013\uffdc\014\uffdc\017\uffdc" +
    "\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026" +
    "\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc" +
    "\035\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043" +
    "\uffdc\044\uffdc\052\uffdc\053\uffdc\054\077\055\100\056\105" +
    "\057\102\060\uffdc\061\uffdc\062\uffdc\063\uffdc\064\uffdc\065" +
    "\uffdc\066\uffdc\067\uffdc\100\uffdc\101\uffdc\102\uffdc\104\uffdc" +
    "\105\uffdc\107\uffdc\001\002\000\020\052\104\053\101\054" +
    "\077\055\100\056\105\057\102\100\135\001\002\000\142" +
    "\005\uffdb\006\uffdb\007\uffdb\010\uffdb\013\uffdb\014\uffdb\017" +
    "\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb" +
    "\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034" +
    "\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb" +
    "\043\uffdb\044\uffdb\052\uffdb\053\uffdb\054\uffdb\055\uffdb\056" +
    "\uffdb\057\uffdb\060\uffdb\061\uffdb\062\uffdb\063\uffdb\064\uffdb" +
    "\065\uffdb\066\uffdb\067\uffdb\100\uffdb\101\uffdb\102\uffdb\104" +
    "\uffdb\105\uffdb\107\uffdb\001\002\000\004\077\137\001\002" +
    "\000\032\041\070\044\076\045\066\046\064\047\062\050" +
    "\075\051\063\053\073\075\065\076\067\077\071\100\141" +
    "\001\002\000\006\100\144\105\143\001\002\000\142\005" +
    "\uff98\006\uff98\007\uff98\010\uff98\013\uff98\014\uff98\017\uff98" +
    "\020\uff98\021\uff98\022\uff98\023\uff98\024\uff98\025\uff98\026" +
    "\uff98\027\uff98\030\uff98\031\uff98\032\uff98\033\uff98\034\uff98" +
    "\035\uff98\036\uff98\037\uff98\040\uff98\041\uff98\042\uff98\043" +
    "\uff98\044\uff98\052\uff98\053\uff98\054\uff98\055\uff98\056\uff98" +
    "\057\uff98\060\uff98\061\uff98\062\uff98\063\uff98\064\uff98\065" +
    "\uff98\066\uff98\067\uff98\100\uff98\101\uff98\102\uff98\104\uff98" +
    "\105\uff98\107\uff98\001\002\000\022\052\104\053\101\054" +
    "\077\055\100\056\105\057\102\100\uff95\105\uff95\001\002" +
    "\000\030\041\070\044\076\045\066\046\064\047\062\050" +
    "\075\051\063\053\073\075\065\076\067\077\071\001\002" +
    "\000\142\005\uff97\006\uff97\007\uff97\010\uff97\013\uff97\014" +
    "\uff97\017\uff97\020\uff97\021\uff97\022\uff97\023\uff97\024\uff97" +
    "\025\uff97\026\uff97\027\uff97\030\uff97\031\uff97\032\uff97\033" +
    "\uff97\034\uff97\035\uff97\036\uff97\037\uff97\040\uff97\041\uff97" +
    "\042\uff97\043\uff97\044\uff97\052\uff97\053\uff97\054\uff97\055" +
    "\uff97\056\uff97\057\uff97\060\uff97\061\uff97\062\uff97\063\uff97" +
    "\064\uff97\065\uff97\066\uff97\067\uff97\100\uff97\101\uff97\102" +
    "\uff97\104\uff97\105\uff97\107\uff97\001\002\000\022\052\104" +
    "\053\101\054\077\055\100\056\105\057\102\100\uff96\105" +
    "\uff96\001\002\000\012\071\153\072\147\073\152\074\150" +
    "\001\002\000\042\012\uffd0\013\uffd0\014\uffd0\017\uffd0\024" +
    "\uffd0\027\uffd0\030\uffd0\031\uffd0\035\uffd0\037\uffd0\041\uffd0" +
    "\042\uffd0\043\uffd0\044\uffd0\100\uffd0\105\uffd0\001\002\000" +
    "\042\012\uffd2\013\uffd2\014\uffd2\017\uffd2\024\uffd2\027\uffd2" +
    "\030\uffd2\031\uffd2\035\uffd2\037\uffd2\041\uffd2\042\uffd2\043" +
    "\uffd2\044\uffd2\100\uffd2\105\uffd2\001\002\000\036\012\156" +
    "\013\155\014\022\017\021\024\054\027\044\030\035\031" +
    "\057\035\051\037\025\041\027\042\030\043\037\044\046" +
    "\001\002\000\042\012\uffd1\013\uffd1\014\uffd1\017\uffd1\024" +
    "\uffd1\027\uffd1\030\uffd1\031\uffd1\035\uffd1\037\uffd1\041\uffd1" +
    "\042\uffd1\043\uffd1\044\uffd1\100\uffd1\105\uffd1\001\002\000" +
    "\042\012\uffd3\013\uffd3\014\uffd3\017\uffd3\024\uffd3\027\uffd3" +
    "\030\uffd3\031\uffd3\035\uffd3\037\uffd3\041\uffd3\042\uffd3\043" +
    "\uffd3\044\uffd3\100\uffd3\105\uffd3\001\002\000\034\013\226" +
    "\014\022\017\021\024\054\027\044\030\035\031\057\035" +
    "\051\037\025\041\027\042\030\043\037\044\046\001\002" +
    "\000\032\041\070\044\076\045\066\046\064\047\062\050" +
    "\075\051\063\053\073\070\166\075\065\076\067\077\071" +
    "\001\002\000\004\077\157\001\002\000\004\044\160\001" +
    "\002\000\012\071\153\072\147\073\152\074\150\001\002" +
    "\000\006\100\163\105\162\001\002\000\004\044\220\001" +
    "\002\000\034\013\165\014\022\017\021\024\054\027\044" +
    "\030\035\031\057\035\051\037\025\041\027\042\030\043" +
    "\037\044\046\001\002\000\034\013\214\014\022\017\021" +
    "\024\054\027\044\030\035\031\057\035\051\037\025\041" +
    "\027\042\030\043\037\044\046\001\002\000\032\041\070" +
    "\044\076\045\066\046\064\047\062\050\075\051\063\053" +
    "\073\070\166\075\065\076\067\077\071\001\002\000\032" +
    "\041\070\044\076\045\066\046\064\047\062\050\075\051" +
    "\063\053\073\070\166\075\065\076\067\077\071\001\002" +
    "\000\126\005\uffb2\006\uffb2\007\uffb2\010\uffb2\013\uffb2\014" +
    "\uffb2\017\uffb2\020\uffb2\021\uffb2\022\uffb2\023\uffb2\024\uffb2" +
    "\025\uffb2\026\uffb2\027\uffb2\030\uffb2\031\uffb2\034\uffb2\035" +
    "\uffb2\036\uffb2\037\uffb2\040\uffb2\041\uffb2\042\uffb2\043\uffb2" +
    "\044\uffb2\052\104\053\101\054\077\055\100\056\105\057" +
    "\102\060\201\061\173\062\177\063\176\064\202\065\175" +
    "\066\200\067\174\101\uffb2\104\uffb2\001\002\000\004\104" +
    "\171\001\002\000\004\011\172\001\002\000\040\005\uffcb" +
    "\006\uffcb\010\uffcb\014\uffcb\017\uffcb\024\uffcb\027\uffcb\030" +
    "\uffcb\031\uffcb\035\uffcb\037\uffcb\041\uffcb\042\uffcb\043\uffcb" +
    "\044\uffcb\001\002\000\030\041\070\044\076\045\066\046" +
    "\064\047\062\050\075\051\063\053\073\075\065\076\067" +
    "\077\071\001\002\000\030\041\070\044\076\045\066\046" +
    "\064\047\062\050\075\051\063\053\073\075\065\076\067" +
    "\077\071\001\002\000\030\041\070\044\076\045\066\046" +
    "\064\047\062\050\075\051\063\053\073\075\065\076\067" +
    "\077\071\001\002\000\030\041\070\044\076\045\066\046" +
    "\064\047\062\050\075\051\063\053\073\075\065\076\067" +
    "\077\071\001\002\000\030\041\070\044\076\045\066\046" +
    "\064\047\062\050\075\051\063\053\073\075\065\076\067" +
    "\077\071\001\002\000\030\041\070\044\076\045\066\046" +
    "\064\047\062\050\075\051\063\053\073\075\065\076\067" +
    "\077\071\001\002\000\030\041\070\044\076\045\066\046" +
    "\064\047\062\050\075\051\063\053\073\075\065\076\067" +
    "\077\071\001\002\000\030\041\070\044\076\045\066\046" +
    "\064\047\062\050\075\051\063\053\073\075\065\076\067" +
    "\077\071\001\002\000\106\005\uffad\006\uffad\007\uffad\010" +
    "\uffad\013\uffad\014\uffad\017\uffad\020\uffad\021\uffad\022\uffad" +
    "\023\uffad\024\uffad\025\uffad\026\uffad\027\uffad\030\uffad\031" +
    "\uffad\034\uffad\035\uffad\036\uffad\037\uffad\040\uffad\041\uffad" +
    "\042\uffad\043\uffad\044\uffad\052\104\053\101\054\077\055" +
    "\100\056\105\057\102\101\uffad\104\uffad\001\002\000\106" +
    "\005\uffb1\006\uffb1\007\uffb1\010\uffb1\013\uffb1\014\uffb1\017" +
    "\uffb1\020\uffb1\021\uffb1\022\uffb1\023\uffb1\024\uffb1\025\uffb1" +
    "\026\uffb1\027\uffb1\030\uffb1\031\uffb1\034\uffb1\035\uffb1\036" +
    "\uffb1\037\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1" +
    "\052\104\053\101\054\077\055\100\056\105\057\102\101" +
    "\uffb1\104\uffb1\001\002\000\106\005\uffa9\006\uffa9\007\uffa9" +
    "\010\uffa9\013\uffa9\014\uffa9\017\uffa9\020\uffa9\021\uffa9\022" +
    "\uffa9\023\uffa9\024\uffa9\025\uffa9\026\uffa9\027\uffa9\030\uffa9" +
    "\031\uffa9\034\uffa9\035\uffa9\036\uffa9\037\uffa9\040\uffa9\041" +
    "\uffa9\042\uffa9\043\uffa9\044\uffa9\052\104\053\101\054\077" +
    "\055\100\056\105\057\102\101\uffa9\104\uffa9\001\002\000" +
    "\106\005\uffaf\006\uffaf\007\uffaf\010\uffaf\013\uffaf\014\uffaf" +
    "\017\uffaf\020\uffaf\021\uffaf\022\uffaf\023\uffaf\024\uffaf\025" +
    "\uffaf\026\uffaf\027\uffaf\030\uffaf\031\uffaf\034\uffaf\035\uffaf" +
    "\036\uffaf\037\uffaf\040\uffaf\041\uffaf\042\uffaf\043\uffaf\044" +
    "\uffaf\052\104\053\101\054\077\055\100\056\105\057\102" +
    "\101\uffaf\104\uffaf\001\002\000\106\005\uffae\006\uffae\007" +
    "\uffae\010\uffae\013\uffae\014\uffae\017\uffae\020\uffae\021\uffae" +
    "\022\uffae\023\uffae\024\uffae\025\uffae\026\uffae\027\uffae\030" +
    "\uffae\031\uffae\034\uffae\035\uffae\036\uffae\037\uffae\040\uffae" +
    "\041\uffae\042\uffae\043\uffae\044\uffae\052\104\053\101\054" +
    "\077\055\100\056\105\057\102\101\uffae\104\uffae\001\002" +
    "\000\106\005\uffac\006\uffac\007\uffac\010\uffac\013\uffac\014" +
    "\uffac\017\uffac\020\uffac\021\uffac\022\uffac\023\uffac\024\uffac" +
    "\025\uffac\026\uffac\027\uffac\030\uffac\031\uffac\034\uffac\035" +
    "\uffac\036\uffac\037\uffac\040\uffac\041\uffac\042\uffac\043\uffac" +
    "\044\uffac\052\104\053\101\054\077\055\100\056\105\057" +
    "\102\101\uffac\104\uffac\001\002\000\106\005\uffaa\006\uffaa" +
    "\007\uffaa\010\uffaa\013\uffaa\014\uffaa\017\uffaa\020\uffaa\021" +
    "\uffaa\022\uffaa\023\uffaa\024\uffaa\025\uffaa\026\uffaa\027\uffaa" +
    "\030\uffaa\031\uffaa\034\uffaa\035\uffaa\036\uffaa\037\uffaa\040" +
    "\uffaa\041\uffaa\042\uffaa\043\uffaa\044\uffaa\052\104\053\101" +
    "\054\077\055\100\056\105\057\102\101\uffaa\104\uffaa\001" +
    "\002\000\106\005\uffb0\006\uffb0\007\uffb0\010\uffb0\013\uffb0" +
    "\014\uffb0\017\uffb0\020\uffb0\021\uffb0\022\uffb0\023\uffb0\024" +
    "\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\034\uffb0" +
    "\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043" +
    "\uffb0\044\uffb0\052\104\053\101\054\077\055\100\056\105" +
    "\057\102\101\uffb0\104\uffb0\001\002\000\072\005\uffab\006" +
    "\uffab\007\uffab\010\uffab\013\uffab\014\uffab\017\uffab\020\uffab" +
    "\021\uffab\022\uffab\023\uffab\024\uffab\025\uffab\026\uffab\027" +
    "\uffab\030\uffab\031\uffab\034\uffab\035\uffab\036\uffab\037\uffab" +
    "\040\uffab\041\uffab\042\uffab\043\uffab\044\uffab\101\uffab\104" +
    "\uffab\001\002\000\032\041\070\044\076\045\066\046\064" +
    "\047\062\050\075\051\063\053\073\070\166\075\065\076" +
    "\067\077\071\001\002\000\004\104\216\001\002\000\004" +
    "\011\217\001\002\000\040\005\uffcc\006\uffcc\010\uffcc\014" +
    "\uffcc\017\uffcc\024\uffcc\027\uffcc\030\uffcc\031\uffcc\035\uffcc" +
    "\037\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc\001\002\000" +
    "\012\071\153\072\147\073\152\074\150\001\002\000\006" +
    "\100\uffc6\105\uffc6\001\002\000\006\100\uffc5\105\uffc5\001" +
    "\002\000\004\104\224\001\002\000\004\011\225\001\002" +
    "\000\040\005\uffcd\006\uffcd\010\uffcd\014\uffcd\017\uffcd\024" +
    "\uffcd\027\uffcd\030\uffcd\031\uffcd\035\uffcd\037\uffcd\041\uffcd" +
    "\042\uffcd\043\uffcd\044\uffcd\001\002\000\032\041\070\044" +
    "\076\045\066\046\064\047\062\050\075\051\063\053\073" +
    "\070\166\075\065\076\067\077\071\001\002\000\004\104" +
    "\230\001\002\000\004\011\231\001\002\000\040\005\uffce" +
    "\006\uffce\010\uffce\014\uffce\017\uffce\024\uffce\027\uffce\030" +
    "\uffce\031\uffce\035\uffce\037\uffce\041\uffce\042\uffce\043\uffce" +
    "\044\uffce\001\002\000\020\025\233\052\104\053\101\054" +
    "\077\055\100\056\105\057\102\001\002\000\004\101\235" +
    "\001\002\000\010\022\244\026\242\101\243\001\002\000" +
    "\030\041\070\044\076\045\066\046\064\047\062\050\075" +
    "\051\063\053\073\075\065\076\067\077\071\001\002\000" +
    "\020\052\104\053\101\054\077\055\100\056\105\057\102" +
    "\102\237\001\002\000\004\020\240\001\002\000\032\014" +
    "\022\017\021\024\054\027\044\030\035\031\057\035\051" +
    "\037\025\041\027\042\030\043\037\044\046\001\002\000" +
    "\040\014\022\017\021\022\uffa3\024\054\026\uffa3\027\044" +
    "\030\035\031\057\035\051\037\025\041\027\042\030\043" +
    "\037\044\046\101\uffa3\001\002\000\064\005\uffa6\006\uffa6" +
    "\007\uffa6\010\uffa6\013\uffa6\014\uffa6\017\uffa6\021\uffa6\022" +
    "\uffa6\023\uffa6\024\uffa6\026\uffa6\027\uffa6\030\uffa6\031\uffa6" +
    "\034\uffa6\035\uffa6\036\uffa6\037\uffa6\040\uffa6\041\uffa6\042" +
    "\uffa6\043\uffa6\044\uffa6\101\uffa6\001\002\000\030\041\070" +
    "\044\076\045\066\046\064\047\062\050\075\051\063\053" +
    "\073\075\065\076\067\077\071\001\002\000\004\020\245" +
    "\001\002\000\032\014\022\017\021\024\054\027\044\030" +
    "\035\031\057\035\051\037\025\041\027\042\030\043\037" +
    "\044\046\001\002\000\034\014\022\017\021\024\054\026" +
    "\247\027\044\030\035\031\057\035\051\037\025\041\027" +
    "\042\030\043\037\044\046\001\002\000\064\005\uffa5\006" +
    "\uffa5\007\uffa5\010\uffa5\013\uffa5\014\uffa5\017\uffa5\021\uffa5" +
    "\022\uffa5\023\uffa5\024\uffa5\026\uffa5\027\uffa5\030\uffa5\031" +
    "\uffa5\034\uffa5\035\uffa5\036\uffa5\037\uffa5\040\uffa5\041\uffa5" +
    "\042\uffa5\043\uffa5\044\uffa5\101\uffa5\001\002\000\020\052" +
    "\104\053\101\054\077\055\100\056\105\057\102\102\251" +
    "\001\002\000\004\020\252\001\002\000\032\014\022\017" +
    "\021\024\054\027\044\030\035\031\057\035\051\037\025" +
    "\041\027\042\030\043\037\044\046\001\002\000\040\014" +
    "\022\017\021\022\uffa4\024\054\026\uffa4\027\044\030\035" +
    "\031\057\035\051\037\025\041\027\042\030\043\037\044" +
    "\046\101\uffa4\001\002\000\004\025\255\001\002\000\034" +
    "\014\022\017\021\024\054\027\044\030\035\031\057\035" +
    "\051\036\257\037\025\041\027\042\030\043\037\044\046" +
    "\001\002\000\034\014\022\017\021\024\054\027\044\030" +
    "\035\031\057\035\051\036\260\037\025\041\027\042\030" +
    "\043\037\044\046\001\002\000\064\005\uff9d\006\uff9d\007" +
    "\uff9d\010\uff9d\013\uff9d\014\uff9d\017\uff9d\021\uff9d\022\uff9d" +
    "\023\uff9d\024\uff9d\026\uff9d\027\uff9d\030\uff9d\031\uff9d\034" +
    "\uff9d\035\uff9d\036\uff9d\037\uff9d\040\uff9d\041\uff9d\042\uff9d" +
    "\043\uff9d\044\uff9d\101\uff9d\001\002\000\064\005\uff9e\006" +
    "\uff9e\007\uff9e\010\uff9e\013\uff9e\014\uff9e\017\uff9e\021\uff9e" +
    "\022\uff9e\023\uff9e\024\uff9e\026\uff9e\027\uff9e\030\uff9e\031" +
    "\uff9e\034\uff9e\035\uff9e\036\uff9e\037\uff9e\040\uff9e\041\uff9e" +
    "\042\uff9e\043\uff9e\044\uff9e\101\uff9e\001\002\000\036\007" +
    "\262\012\264\014\022\017\021\024\054\027\044\030\035" +
    "\031\057\035\051\037\025\041\027\042\030\043\037\044" +
    "\046\001\002\000\040\005\uffc9\006\uffc9\010\uffc9\014\uffc9" +
    "\017\uffc9\024\uffc9\027\uffc9\030\uffc9\031\uffc9\035\uffc9\037" +
    "\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9\001\002\000\034" +
    "\007\273\014\022\017\021\024\054\027\044\030\035\031" +
    "\057\035\051\037\025\041\027\042\030\043\037\044\046" +
    "\001\002\000\004\077\265\001\002\000\004\044\160\001" +
    "\002\000\006\100\267\105\162\001\002\000\034\007\270" +
    "\014\022\017\021\024\054\027\044\030\035\031\057\035" +
    "\051\037\025\041\027\042\030\043\037\044\046\001\002" +
    "\000\040\005\uffc7\006\uffc7\010\uffc7\014\uffc7\017\uffc7\024" +
    "\uffc7\027\uffc7\030\uffc7\031\uffc7\035\uffc7\037\uffc7\041\uffc7" +
    "\042\uffc7\043\uffc7\044\uffc7\001\002\000\034\007\272\014" +
    "\022\017\021\024\054\027\044\030\035\031\057\035\051" +
    "\037\025\041\027\042\030\043\037\044\046\001\002\000" +
    "\040\005\uffc8\006\uffc8\010\uffc8\014\uffc8\017\uffc8\024\uffc8" +
    "\027\uffc8\030\uffc8\031\uffc8\035\uffc8\037\uffc8\041\uffc8\042" +
    "\uffc8\043\uffc8\044\uffc8\001\002\000\040\005\uffca\006\uffca" +
    "\010\uffca\014\uffca\017\uffca\024\uffca\027\uffca\030\uffca\031" +
    "\uffca\035\uffca\037\uffca\041\uffca\042\uffca\043\uffca\044\uffca" +
    "\001\002\000\020\052\104\053\101\054\077\055\100\056" +
    "\105\057\102\104\275\001\002\000\064\005\uff93\006\uff93" +
    "\007\uff93\010\uff93\013\uff93\014\uff93\017\uff93\021\uff93\022" +
    "\uff93\023\uff93\024\uff93\026\uff93\027\uff93\030\uff93\031\uff93" +
    "\034\uff93\035\uff93\036\uff93\037\uff93\040\uff93\041\uff93\042" +
    "\uff93\043\uff93\044\uff93\101\uff93\001\002\000\030\041\070" +
    "\044\076\045\066\046\064\047\062\050\075\051\063\053" +
    "\073\075\065\076\067\077\071\001\002\000\004\044\300" +
    "\001\002\000\010\015\uffe7\103\uffe7\105\uffe7\001\002\000" +
    "\020\052\104\053\101\054\077\055\100\056\105\057\102" +
    "\104\302\001\002\000\064\005\uffcf\006\uffcf\007\uffcf\010" +
    "\uffcf\013\uffcf\014\uffcf\017\uffcf\021\uffcf\022\uffcf\023\uffcf" +
    "\024\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\034\uffcf\035" +
    "\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf" +
    "\044\uffcf\101\uffcf\001\002\000\020\052\104\053\101\054" +
    "\077\055\100\056\105\057\102\104\304\001\002\000\064" +
    "\005\uff94\006\uff94\007\uff94\010\uff94\013\uff94\014\uff94\017" +
    "\uff94\021\uff94\022\uff94\023\uff94\024\uff94\026\uff94\027\uff94" +
    "\030\uff94\031\uff94\034\uff94\035\uff94\036\uff94\037\uff94\040" +
    "\uff94\041\uff94\042\uff94\043\uff94\044\uff94\101\uff94\001\002" +
    "\000\004\077\306\001\002\000\032\041\070\044\076\045" +
    "\066\046\064\047\062\050\075\051\063\053\073\075\065" +
    "\076\067\077\071\100\310\001\002\000\006\100\312\105" +
    "\143\001\002\000\004\104\311\001\002\000\064\005\uff9a" +
    "\006\uff9a\007\uff9a\010\uff9a\013\uff9a\014\uff9a\017\uff9a\021" +
    "\uff9a\022\uff9a\023\uff9a\024\uff9a\026\uff9a\027\uff9a\030\uff9a" +
    "\031\uff9a\034\uff9a\035\uff9a\036\uff9a\037\uff9a\040\uff9a\041" +
    "\uff9a\042\uff9a\043\uff9a\044\uff9a\101\uff9a\001\002\000\004" +
    "\104\313\001\002\000\064\005\uff99\006\uff99\007\uff99\010" +
    "\uff99\013\uff99\014\uff99\017\uff99\021\uff99\022\uff99\023\uff99" +
    "\024\uff99\026\uff99\027\uff99\030\uff99\031\uff99\034\uff99\035" +
    "\uff99\036\uff99\037\uff99\040\uff99\041\uff99\042\uff99\043\uff99" +
    "\044\uff99\101\uff99\001\002\000\010\002\ufff9\027\014\030" +
    "\006\001\002\000\040\005\ufff1\006\ufff1\010\ufff1\014\ufff1" +
    "\017\ufff1\024\ufff1\027\ufff1\030\ufff1\031\ufff1\035\ufff1\037" +
    "\ufff1\041\ufff1\042\ufff1\043\ufff1\044\ufff1\001\002\000\004" +
    "\002\ufff7\001\002\000\032\041\070\044\076\045\066\046" +
    "\064\047\062\050\075\051\063\053\073\070\166\075\065" +
    "\076\067\077\071\001\002\000\034\014\022\017\021\024" +
    "\054\027\044\030\035\031\057\035\051\037\025\040\321" +
    "\041\027\042\030\043\037\044\046\001\002\000\032\041" +
    "\070\044\076\045\066\046\064\047\062\050\075\051\063" +
    "\053\073\070\166\075\065\076\067\077\071\001\002\000" +
    "\064\005\uff9c\006\uff9c\007\uff9c\010\uff9c\013\uff9c\014\uff9c" +
    "\017\uff9c\021\uff9c\022\uff9c\023\uff9c\024\uff9c\026\uff9c\027" +
    "\uff9c\030\uff9c\031\uff9c\034\uff9c\035\uff9c\036\uff9c\037\uff9c" +
    "\040\uff9c\041\uff9c\042\uff9c\043\uff9c\044\uff9c\101\uff9c\001" +
    "\002\000\064\005\uff9b\006\uff9b\007\uff9b\010\uff9b\013\uff9b" +
    "\014\uff9b\017\uff9b\021\uff9b\022\uff9b\023\uff9b\024\uff9b\026" +
    "\uff9b\027\uff9b\030\uff9b\031\uff9b\034\uff9b\035\uff9b\036\uff9b" +
    "\037\uff9b\040\uff9b\041\uff9b\042\uff9b\043\uff9b\044\uff9b\101" +
    "\uff9b\001\002\000\004\002\ufff6\001\002\000\006\015\326" +
    "\105\277\001\002\000\012\071\332\072\327\073\333\074" +
    "\330\001\002\000\006\016\uffd0\104\342\001\002\000\006" +
    "\016\uffd2\104\341\001\002\000\004\016\336\001\002\000" +
    "\006\016\uffd3\104\335\001\002\000\006\016\uffd1\104\334" +
    "\001\002\000\064\005\uffea\006\uffea\007\uffea\010\uffea\013" +
    "\uffea\014\uffea\017\uffea\021\uffea\022\uffea\023\uffea\024\uffea" +
    "\026\uffea\027\uffea\030\uffea\031\uffea\034\uffea\035\uffea\036" +
    "\uffea\037\uffea\040\uffea\041\uffea\042\uffea\043\uffea\044\uffea" +
    "\101\uffea\001\002\000\064\005\uffec\006\uffec\007\uffec\010" +
    "\uffec\013\uffec\014\uffec\017\uffec\021\uffec\022\uffec\023\uffec" +
    "\024\uffec\026\uffec\027\uffec\030\uffec\031\uffec\034\uffec\035" +
    "\uffec\036\uffec\037\uffec\040\uffec\041\uffec\042\uffec\043\uffec" +
    "\044\uffec\101\uffec\001\002\000\030\041\070\044\076\045" +
    "\066\046\064\047\062\050\075\051\063\053\073\075\065" +
    "\076\067\077\071\001\002\000\020\052\104\053\101\054" +
    "\077\055\100\056\105\057\102\104\340\001\002\000\064" +
    "\005\uffe5\006\uffe5\007\uffe5\010\uffe5\013\uffe5\014\uffe5\017" +
    "\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\026\uffe5\027\uffe5" +
    "\030\uffe5\031\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5\040" +
    "\uffe5\041\uffe5\042\uffe5\043\uffe5\044\uffe5\101\uffe5\001\002" +
    "\000\064\005\uffe9\006\uffe9\007\uffe9\010\uffe9\013\uffe9\014" +
    "\uffe9\017\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9\026\uffe9" +
    "\027\uffe9\030\uffe9\031\uffe9\034\uffe9\035\uffe9\036\uffe9\037" +
    "\uffe9\040\uffe9\041\uffe9\042\uffe9\043\uffe9\044\uffe9\101\uffe9" +
    "\001\002\000\064\005\uffeb\006\uffeb\007\uffeb\010\uffeb\013" +
    "\uffeb\014\uffeb\017\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb" +
    "\026\uffeb\027\uffeb\030\uffeb\031\uffeb\034\uffeb\035\uffeb\036" +
    "\uffeb\037\uffeb\040\uffeb\041\uffeb\042\uffeb\043\uffeb\044\uffeb" +
    "\101\uffeb\001\002\000\034\014\022\017\021\020\344\024" +
    "\054\027\044\030\035\031\057\035\051\037\025\041\027" +
    "\042\030\043\037\044\046\001\002\000\032\014\022\017" +
    "\021\024\054\027\044\030\035\031\057\035\051\037\025" +
    "\041\027\042\030\043\037\044\046\001\002\000\036\014" +
    "\022\017\021\021\357\022\360\024\054\027\044\030\035" +
    "\031\057\035\051\037\025\041\027\042\030\043\037\044" +
    "\046\001\002\000\010\021\350\022\351\023\347\001\002" +
    "\000\064\005\uffb5\006\uffb5\007\uffb5\010\uffb5\013\uffb5\014" +
    "\uffb5\017\uffb5\021\uffb5\022\uffb5\023\uffb5\024\uffb5\026\uffb5" +
    "\027\uffb5\030\uffb5\031\uffb5\034\uffb5\035\uffb5\036\uffb5\037" +
    "\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5\044\uffb5\101\uffb5" +
    "\001\002\000\032\041\070\044\076\045\066\046\064\047" +
    "\062\050\075\051\063\053\073\070\166\075\065\076\067" +
    "\077\071\001\002\000\032\014\022\017\021\024\054\027" +
    "\044\030\035\031\057\035\051\037\025\041\027\042\030" +
    "\043\037\044\046\001\002\000\034\014\022\017\021\023" +
    "\353\024\054\027\044\030\035\031\057\035\051\037\025" +
    "\041\027\042\030\043\037\044\046\001\002\000\064\005" +
    "\uffb4\006\uffb4\007\uffb4\010\uffb4\013\uffb4\014\uffb4\017\uffb4" +
    "\021\uffb4\022\uffb4\023\uffb4\024\uffb4\026\uffb4\027\uffb4\030" +
    "\uffb4\031\uffb4\034\uffb4\035\uffb4\036\uffb4\037\uffb4\040\uffb4" +
    "\041\uffb4\042\uffb4\043\uffb4\044\uffb4\101\uffb4\001\002\000" +
    "\004\020\355\001\002\000\032\014\022\017\021\024\054" +
    "\027\044\030\035\031\057\035\051\037\025\041\027\042" +
    "\030\043\037\044\046\001\002\000\040\014\022\017\021" +
    "\021\uffa8\022\uffa8\023\uffa8\024\054\027\044\030\035\031" +
    "\057\035\051\037\025\041\027\042\030\043\037\044\046" +
    "\001\002\000\032\041\070\044\076\045\066\046\064\047" +
    "\062\050\075\051\063\053\073\070\166\075\065\076\067" +
    "\077\071\001\002\000\032\014\022\017\021\024\054\027" +
    "\044\030\035\031\057\035\051\037\025\041\027\042\030" +
    "\043\037\044\046\001\002\000\034\014\022\017\021\023" +
    "\362\024\054\027\044\030\035\031\057\035\051\037\025" +
    "\041\027\042\030\043\037\044\046\001\002\000\064\005" +
    "\uffb3\006\uffb3\007\uffb3\010\uffb3\013\uffb3\014\uffb3\017\uffb3" +
    "\021\uffb3\022\uffb3\023\uffb3\024\uffb3\026\uffb3\027\uffb3\030" +
    "\uffb3\031\uffb3\034\uffb3\035\uffb3\036\uffb3\037\uffb3\040\uffb3" +
    "\041\uffb3\042\uffb3\043\uffb3\044\uffb3\101\uffb3\001\002\000" +
    "\004\020\364\001\002\000\032\014\022\017\021\024\054" +
    "\027\044\030\035\031\057\035\051\037\025\041\027\042" +
    "\030\043\037\044\046\001\002\000\040\014\022\017\021" +
    "\021\uffa7\022\uffa7\023\uffa7\024\054\027\044\030\035\031" +
    "\057\035\051\037\025\041\027\042\030\043\037\044\046" +
    "\001\002\000\034\014\022\017\021\023\367\024\054\027" +
    "\044\030\035\031\057\035\051\037\025\041\027\042\030" +
    "\043\037\044\046\001\002\000\064\005\uffb6\006\uffb6\007" +
    "\uffb6\010\uffb6\013\uffb6\014\uffb6\017\uffb6\021\uffb6\022\uffb6" +
    "\023\uffb6\024\uffb6\026\uffb6\027\uffb6\030\uffb6\031\uffb6\034" +
    "\uffb6\035\uffb6\036\uffb6\037\uffb6\040\uffb6\041\uffb6\042\uffb6" +
    "\043\uffb6\044\uffb6\101\uffb6\001\002\000\010\002\ufffc\027" +
    "\014\030\006\001\002\000\040\005\372\006\050\010\055" +
    "\014\022\017\021\024\054\027\044\030\035\031\057\035" +
    "\051\037\025\041\027\042\030\043\037\044\046\001\002" +
    "\000\010\002\ufffd\027\014\030\006\001\002\000\004\002" +
    "\ufffa\001\002\000\004\002\ufffb\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\373\000\014\002\004\003\010\034\003\035\007\036" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\004\030\005\031\006\046\007\035\012" +
    "\044\013\055\014\037\016\022\017\042\023\033\025\041" +
    "\026\017\027\040\030\032\031\052\032\051\033\370\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\003\015" +
    "\034\003\035\007\036\012\001\001\000\006\035\014\036" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\004\030\005\031\006\046\007\035\012" +
    "\044\013\055\014\037\016\022\017\042\023\033\025\041" +
    "\026\017\027\040\030\032\031\052\032\051\033\025\001" +
    "\001\000\002\001\001\000\010\010\166\020\342\040\071" +
    "\001\001\000\004\005\324\001\001\000\002\001\001\000" +
    "\006\035\323\036\012\001\001\000\036\004\030\005\031" +
    "\006\046\007\035\016\112\017\042\021\317\023\033\025" +
    "\041\026\017\027\040\030\032\031\052\032\051\001\001" +
    "\000\042\004\030\005\031\006\046\007\035\012\314\013" +
    "\055\014\037\016\022\017\042\023\033\025\041\026\017" +
    "\027\040\030\032\031\052\032\051\001\001\000\002\001" +
    "\001\000\006\010\302\040\071\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\010\273\040\071" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\010\166\020\253\040\071\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\010\231\040\071\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\010\073\040\071\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\010\133\040\071\001\001\000\002\001\001\000\006" +
    "\010\132\040\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\010\131\040\071\001\001" +
    "\000\006\010\130\040\071\001\001\000\006\010\127\040" +
    "\071\001\001\000\002\001\001\000\006\010\107\040\071" +
    "\001\001\000\006\010\106\040\071\001\001\000\006\010" +
    "\105\040\071\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\010\117\040\071\001\001\000" +
    "\036\004\030\005\031\006\046\007\035\016\112\017\042" +
    "\021\113\023\033\025\041\026\017\027\040\030\032\031" +
    "\052\032\051\001\001\000\002\001\001\000\034\004\030" +
    "\005\031\006\046\007\035\016\115\017\042\023\033\025" +
    "\041\026\017\027\040\030\032\031\052\032\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\004\030\005\031\006\046\007\035" +
    "\016\112\017\042\021\121\023\033\025\041\026\017\027" +
    "\040\030\032\031\052\032\051\001\001\000\034\004\030" +
    "\005\031\006\046\007\035\016\115\017\042\023\033\025" +
    "\041\026\017\027\040\030\032\031\052\032\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\010\125\040" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\010\141\037\137\040\071\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\010\144" +
    "\040\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\150\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\004\030\005\031\006\046\007\035\016\112\017" +
    "\042\021\153\023\033\025\041\026\017\027\040\030\032" +
    "\031\052\032\051\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\004\030\005\031\006\046\007\035\016\115" +
    "\017\042\023\033\025\041\026\017\027\040\030\032\031" +
    "\052\032\051\001\001\000\010\010\166\020\222\040\071" +
    "\001\001\000\002\001\001\000\004\015\160\001\001\000" +
    "\004\011\221\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\004\030\005\031\006\046\007\035\016\112\017" +
    "\042\021\163\023\033\025\041\026\017\027\040\030\032" +
    "\031\052\032\051\001\001\000\034\004\030\005\031\006" +
    "\046\007\035\016\115\017\042\023\033\025\041\026\017" +
    "\027\040\030\032\031\052\032\051\001\001\000\010\010" +
    "\166\020\167\040\071\001\001\000\010\010\166\020\212" +
    "\040\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\010\211\040\071" +
    "\001\001\000\006\010\210\040\071\001\001\000\006\010" +
    "\207\040\071\001\001\000\006\010\206\040\071\001\001" +
    "\000\006\010\205\040\071\001\001\000\006\010\204\040" +
    "\071\001\001\000\006\010\203\040\071\001\001\000\006" +
    "\010\202\040\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\010\166\020\214\040\071\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\220\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\010\166\020\226\040\071\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\233\001\001\000\002\001\001\000\006\010\235" +
    "\040\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\004\030\005\031\006\046\007\035\016\112\017\042" +
    "\021\240\023\033\025\041\026\017\027\040\030\032\031" +
    "\052\032\051\001\001\000\034\004\030\005\031\006\046" +
    "\007\035\016\115\017\042\023\033\025\041\026\017\027" +
    "\040\030\032\031\052\032\051\001\001\000\002\001\001" +
    "\000\006\010\247\040\071\001\001\000\002\001\001\000" +
    "\036\004\030\005\031\006\046\007\035\016\112\017\042" +
    "\021\245\023\033\025\041\026\017\027\040\030\032\031" +
    "\052\032\051\001\001\000\034\004\030\005\031\006\046" +
    "\007\035\016\115\017\042\023\033\025\041\026\017\027" +
    "\040\030\032\031\052\032\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\004\030\005" +
    "\031\006\046\007\035\016\112\017\042\021\252\023\033" +
    "\025\041\026\017\027\040\030\032\031\052\032\051\001" +
    "\001\000\034\004\030\005\031\006\046\007\035\016\115" +
    "\017\042\023\033\025\041\026\017\027\040\030\032\031" +
    "\052\032\051\001\001\000\002\001\001\000\036\004\030" +
    "\005\031\006\046\007\035\016\112\017\042\021\255\023" +
    "\033\025\041\026\017\027\040\030\032\031\052\032\051" +
    "\001\001\000\034\004\030\005\031\006\046\007\035\016" +
    "\115\017\042\023\033\025\041\026\017\027\040\030\032" +
    "\031\052\032\051\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\004\030\005\031\006\046\007\035\016\112" +
    "\017\042\021\262\023\033\025\041\026\017\027\040\030" +
    "\032\031\052\032\051\001\001\000\002\001\001\000\034" +
    "\004\030\005\031\006\046\007\035\016\115\017\042\023" +
    "\033\025\041\026\017\027\040\030\032\031\052\032\051" +
    "\001\001\000\002\001\001\000\004\015\265\001\001\000" +
    "\002\001\001\000\036\004\030\005\031\006\046\007\035" +
    "\016\112\017\042\021\270\023\033\025\041\026\017\027" +
    "\040\030\032\031\052\032\051\001\001\000\002\001\001" +
    "\000\034\004\030\005\031\006\046\007\035\016\115\017" +
    "\042\023\033\025\041\026\017\027\040\030\032\031\052" +
    "\032\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\010\300\040\071" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\010\141\037\306\040\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\035\315\036" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\010\166\020\322\040\071\001\001\000\034\004\030\005" +
    "\031\006\046\007\035\016\115\017\042\023\033\025\041" +
    "\026\017\027\040\030\032\031\052\032\051\001\001\000" +
    "\010\010\166\020\321\040\071\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\330\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\010\336\040\071" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\004\030\005\031\006\046" +
    "\007\035\016\112\017\042\021\344\022\345\023\033\025" +
    "\041\026\017\027\040\030\032\031\052\032\051\001\001" +
    "\000\036\004\030\005\031\006\046\007\035\016\112\017" +
    "\042\021\365\023\033\025\041\026\017\027\040\030\032" +
    "\031\052\032\051\001\001\000\034\004\030\005\031\006" +
    "\046\007\035\016\115\017\042\023\033\025\041\026\017" +
    "\027\040\030\032\031\052\032\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\010\166\020\353\040\071" +
    "\001\001\000\036\004\030\005\031\006\046\007\035\016" +
    "\112\017\042\021\351\023\033\025\041\026\017\027\040" +
    "\030\032\031\052\032\051\001\001\000\034\004\030\005" +
    "\031\006\046\007\035\016\115\017\042\023\033\025\041" +
    "\026\017\027\040\030\032\031\052\032\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\004\030\005\031" +
    "\006\046\007\035\016\112\017\042\021\355\023\033\025" +
    "\041\026\017\027\040\030\032\031\052\032\051\001\001" +
    "\000\034\004\030\005\031\006\046\007\035\016\115\017" +
    "\042\023\033\025\041\026\017\027\040\030\032\031\052" +
    "\032\051\001\001\000\010\010\166\020\362\040\071\001" +
    "\001\000\036\004\030\005\031\006\046\007\035\016\112" +
    "\017\042\021\360\023\033\025\041\026\017\027\040\030" +
    "\032\031\052\032\051\001\001\000\034\004\030\005\031" +
    "\006\046\007\035\016\115\017\042\023\033\025\041\026" +
    "\017\027\040\030\032\031\052\032\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\004\030\005\031\006" +
    "\046\007\035\016\112\017\042\021\364\023\033\025\041" +
    "\026\017\027\040\030\032\031\052\032\051\001\001\000" +
    "\034\004\030\005\031\006\046\007\035\016\115\017\042" +
    "\023\033\025\041\026\017\027\040\030\032\031\052\032" +
    "\051\001\001\000\034\004\030\005\031\006\046\007\035" +
    "\016\115\017\042\023\033\025\041\026\017\027\040\030" +
    "\032\031\052\032\051\001\001\000\002\001\001\000\006" +
    "\035\373\036\012\001\001\000\042\004\030\005\031\006" +
    "\046\007\035\012\314\013\055\014\037\016\022\017\042" +
    "\023\033\025\041\026\017\027\040\030\032\031\052\032" +
    "\051\001\001\000\006\035\372\036\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    }  


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {

 
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= MAIN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= error INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // MAIN ::= RINICIO ALGORITMO RFIN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MAIN",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // MAIN ::= RINICIO RFIN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MAIN",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // MAIN ::= RINICIO RFIN COMENTARIOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MAIN",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // MAIN ::= RINICIO ALGORITMO RFIN COMENTARIOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MAIN",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // MAIN ::= COMENTARIOS RINICIO ALGORITMO RFIN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MAIN",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // MAIN ::= COMENTARIOS RINICIO RFIN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MAIN",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // MAIN ::= COMENTARIOS RINICIO ALGORITMO RFIN COMENTARIOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MAIN",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // MAIN ::= COMENTARIOS RINICIO RFIN COMENTARIOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MAIN",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // COMENTARIOS ::= COMENTARIO COMENTARIOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COMENTARIOS",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // COMENTARIOS ::= COMENTARIO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COMENTARIOS",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // COMENTARIO ::= COMENTARIOL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COMENTARIO",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // COMENTARIO ::= COMENTARIOML 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COMENTARIO",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ALGORITMO ::= ALGORITMO GLOBAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ALGORITMO",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ALGORITMO ::= GLOBAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ALGORITMO",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // GLOBAL ::= FUNCION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("GLOBAL",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // GLOBAL ::= METODO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("GLOBAL",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // GLOBAL ::= ENTORNO_LOCAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("GLOBAL",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION ::= RINGRESAR LISTA_IDENTIFICADORES RCOMO RNUMERO PTCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION ::= RINGRESAR LISTA_IDENTIFICADORES RCOMO RCADENA PTCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= RINGRESAR LISTA_IDENTIFICADORES RCOMO RBOOLEAN PTCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= RINGRESAR LISTA_IDENTIFICADORES RCOMO RCARACTER PTCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= DECLARACIONyASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LISTA_IDENTIFICADORES ::= LISTA_IDENTIFICADORES COMA IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_IDENTIFICADORES",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LISTA_IDENTIFICADORES ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_IDENTIFICADORES",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACIONyASIGNACION ::= RINGRESAR LISTA_IDENTIFICADORES RCOMO TIPODATO RCONVALOR EXPRESION PTCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONyASIGNACION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXPRESION ::= ENTERO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXPRESION ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXPRESION ::= CADENA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXPRESION ::= CARACTER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXPRESION ::= CARASCCI 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXPRESION ::= RVERDADERO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXPRESION ::= RFALSO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXPRESION ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXPRESION ::= RESTA EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXPRESION ::= PARIZQ EXPRESION PARDER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXPRESION ::= EXPRESION SUMA EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXPRESION ::= EXPRESION RESTA EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPRESION ::= EXPRESION MULTIPLICACION EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPRESION ::= EXPRESION DIVIDIR EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPRESION ::= EXPRESION POTENCIA CORIZQ EXPRESION CORDER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPRESION ::= EXPRESION MODU EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXPRESION ::= EJECUTAR_2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TIPODATO ::= RNUMERO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TIPODATO ::= RCARACTER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TIPODATO ::= RBOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // TIPODATO ::= RCADENA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ASIGNACION ::= LISTA_IDENTIFICADORES FLECHA EXPRESION PTCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FUNCION ::= RFUNCION IDENTIFICADOR TIPODATO LOCAL RRETORNAR CONDICION PTCOMA RFINFUNCION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FUNCION ::= RFUNCION IDENTIFICADOR TIPODATO RRETORNAR CONDICION PTCOMA RFINFUNCION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FUNCION ::= RFUNCION IDENTIFICADOR TIPODATO RCONPARAMETROS PARIZQ LISTA_PARAMETROS PARDER LOCAL RRETORNAR CONDICION PTCOMA RFINFUNCION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // FUNCION ::= RFUNCION IDENTIFICADOR TIPODATO RCONPARAMETROS PARIZQ LISTA_PARAMETROS PARDER RRETORNAR CONDICION PTCOMA RFINFUNCION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // METODO ::= RMETODO IDENTIFICADOR LOCAL RFINMETODO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // METODO ::= RMETODO IDENTIFICADOR RFINMETODO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // METODO ::= RMETODO IDENTIFICADOR RCONPARAMETROS PARIZQ LISTA_PARAMETROS PARDER LOCAL RFINMETODO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // METODO ::= RMETODO IDENTIFICADOR RCONPARAMETROS PARIZQ LISTA_PARAMETROS PARDER RFINMETODO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // LISTA_PARAMETROS ::= LISTA_PARAMETROS COMA IDENTIFICADOR TIPODATO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // LISTA_PARAMETROS ::= IDENTIFICADOR TIPODATO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // LOCAL ::= LOCAL ENTORNO_LOCAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LOCAL",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // LOCAL ::= ENTORNO_LOCAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LOCAL",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ENTORNO_LOCAL ::= ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ENTORNO_LOCAL",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ENTORNO_LOCAL ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ENTORNO_LOCAL",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ENTORNO_LOCAL ::= CONDICIONAL_SI 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ENTORNO_LOCAL",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ENTORNO_LOCAL ::= SELECCION_MULTIPLE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ENTORNO_LOCAL",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ENTORNO_LOCAL ::= CICLO_PARA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ENTORNO_LOCAL",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ENTORNO_LOCAL ::= CICLO_MIENTRAS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ENTORNO_LOCAL",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ENTORNO_LOCAL ::= CICLO_REPETIR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ENTORNO_LOCAL",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ENTORNO_LOCAL ::= EJECUTAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ENTORNO_LOCAL",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ENTORNO_LOCAL ::= IMPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ENTORNO_LOCAL",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ENTORNO_LOCAL ::= IMPRESION_CONSALTO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ENTORNO_LOCAL",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ENTORNO_LOCAL ::= COMENTARIOL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ENTORNO_LOCAL",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ENTORNO_LOCAL ::= COMENTARIOML 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ENTORNO_LOCAL",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // CONDICIONAL_SI ::= RSI CONDICION RENTONCES LOCAL RFINSI 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_SI",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // CONDICIONAL_SI ::= RSI CONDICION LISTA_OSI RFINSI 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_SI",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CONDICIONAL_SI ::= RSI CONDICION LISTA_OSI RDELOCONTRARIO LOCAL RFINSI 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_SI",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // CONDICIONAL_SI ::= RSI CONDICION LOCAL RDELOCONTRARIO LOCAL RFINSI 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_SI",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // CONDICION ::= EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CONDICION ::= EXPRESION RMAYOR EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CONDICION ::= EXPRESION RMENOR EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // CONDICION ::= EXPRESION RMAYOROIGUAL EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CONDICION ::= EXPRESION RMENOROIGUAL EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CONDICION ::= EXPRESION RESIGUAL EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CONDICION ::= EXPRESION RESDIFERENTE EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CONDICION ::= RNOT CONDICION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CONDICION ::= EXPRESION RAND EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CONDICION ::= EXPRESION ROR EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // LISTA_OSI ::= LISTA_OSI ROSI CONDICION RENTONCES LOCAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_OSI",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // LISTA_OSI ::= LOCAL ROSI CONDICION RENTONCES LOCAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_OSI",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // SELECCION_MULTIPLE ::= RSEGUN EXPRESION RHACER LISTA_VALORENTONCES RFINSEGUN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SELECCION_MULTIPLE",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // SELECCION_MULTIPLE ::= RSEGUN EXPRESION RHACER LISTA_VALORENTONCES RDELOCONTRARIO RENTONCES LOCAL RFINSEGUN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SELECCION_MULTIPLE",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // LISTA_VALORENTONCES ::= LISTA_VALORENTONCES INTABRE EXPRESION INTCIERRA RENTONCES LOCAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_VALORENTONCES",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // LISTA_VALORENTONCES ::= INTABRE EXPRESION INTCIERRA RENTONCES LOCAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_VALORENTONCES",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // CICLO_PARA ::= RPARA IDENTIFICADOR FLECHA EXPRESION RHASTA EXPRESION RHACER LOCAL RFINPARA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_PARA",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // CICLO_PARA ::= RPARA IDENTIFICADOR FLECHA EXPRESION RHASTA EXPRESION RHACER RFINPARA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_PARA",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // CICLO_PARA ::= RPARA IDENTIFICADOR FLECHA EXPRESION RHASTA EXPRESION RCONINCREMENTAL EXPRESION RHACER LOCAL RFINPARA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_PARA",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // CICLO_PARA ::= RPARA IDENTIFICADOR FLECHA EXPRESION RHASTA EXPRESION RCONINCREMENTAL EXPRESION RHACER RFINPARA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_PARA",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // CICLO_MIENTRAS ::= RMIENTRAS CONDICION RHACER LOCAL RFINMIENTRAS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_MIENTRAS",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // CICLO_MIENTRAS ::= RMIENTRAS CONDICION RHACER RFINMIENTRAS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_MIENTRAS",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // CICLO_REPETIR ::= RREPETIR LOCAL RHASTAQUE CONDICION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_REPETIR",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // CICLO_REPETIR ::= RREPETIR RHASTAQUE CONDICION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_REPETIR",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // EJECUTAR ::= REJECUTAR IDENTIFICADOR PARIZQ PARDER PTCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EJECUTAR",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // EJECUTAR ::= REJECUTAR IDENTIFICADOR PARIZQ INSERCION_PARAMETROS PARDER PTCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EJECUTAR",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // EJECUTAR_2 ::= REJECUTAR IDENTIFICADOR PARIZQ PARDER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EJECUTAR_2",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // EJECUTAR_2 ::= REJECUTAR IDENTIFICADOR PARIZQ INSERCION_PARAMETROS PARDER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EJECUTAR_2",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // INSERCION_PARAMETROS ::= INSERCION_PARAMETROS COMA EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSERCION_PARAMETROS",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // INSERCION_PARAMETROS ::= EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSERCION_PARAMETROS",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // IMPRESION ::= RIMPRIMIR EXPRESION PTCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPRESION",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // IMPRESION_CONSALTO ::= RIMPRIMIRNL EXPRESION PTCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPRESION_CONSALTO",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
