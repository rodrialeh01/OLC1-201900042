
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import Clases.ErrorLenguaje;
import java_cup.runtime.*;
import Structures.Instrucciones.Comentarios;
import Structures.Instrucciones.Declaracion;
import Structures.Instrucciones.Instruccion;
import Structures.Instrucciones.Operacion;
import Structures.Instrucciones.Si;
import Structures.Instrucciones.Main;
import Structures.Instrucciones.Asignacion;
import Structures.Instrucciones.Case;
import Structures.Instrucciones.SeleccionMultiple;
import Structures.Instrucciones.Para;
import Structures.Instrucciones.Mientras;
import Structures.Instrucciones.Repetir;
import Structures.Instrucciones.Impresion;
import Structures.Instrucciones.Ejecutar;
import Structures.Instrucciones.Parametro;
import Structures.Instrucciones.Funciones;
import Structures.Instrucciones.Metodo;
import Structures.Instrucciones.Retornar;
import java.util.LinkedList;
import Structures.Nodo;
import Structures.Arbol;
import Structures.Produccion;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\156\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\033\005" +
    "\000\002\033\004\000\002\034\004\000\002\034\003\000" +
    "\002\035\003\000\002\035\003\000\002\013\004\000\002" +
    "\013\003\000\002\032\003\000\002\032\003\000\002\032" +
    "\004\000\002\032\004\000\002\041\004\000\002\041\003" +
    "\000\002\042\003\000\002\042\003\000\002\004\011\000" +
    "\002\004\011\000\002\004\011\000\002\004\011\000\002" +
    "\005\005\000\002\005\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\004\000\002\007\005\000\002\007\005\000\002" +
    "\007\005\000\002\007\005\000\002\007\005\000\002\007" +
    "\007\000\002\007\005\000\002\007\003\000\002\040\003" +
    "\000\002\040\005\000\002\040\005\000\002\040\005\000" +
    "\002\040\005\000\002\040\005\000\002\040\005\000\002" +
    "\017\005\000\002\017\005\000\002\017\004\000\002\017" +
    "\003\000\002\006\006\000\002\011\012\000\002\011\011" +
    "\000\002\011\016\000\002\011\015\000\002\012\006\000" +
    "\002\012\005\000\002\012\012\000\002\012\011\000\002" +
    "\014\006\000\002\014\004\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\020\004" +
    "\000\002\020\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\016\007\000\002\016\007\000\002\016\011\000" +
    "\002\016\010\000\002\021\007\000\002\021\006\000\002" +
    "\022\007\000\002\022\012\000\002\023\010\000\002\023" +
    "\007\000\002\024\013\000\002\024\012\000\002\024\015" +
    "\000\002\024\014\000\002\025\007\000\002\025\006\000" +
    "\002\026\006\000\002\026\005\000\002\027\007\000\002" +
    "\027\010\000\002\037\006\000\002\037\007\000\002\036" +
    "\005\000\002\036\003\000\002\030\005\000\002\031\005" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\371\000\012\003\011\004\007\027\014\030\006\001" +
    "\002\000\004\002\uffff\001\002\000\004\002\373\001\002" +
    "\000\010\002\ufff7\027\ufff7\030\ufff7\001\002\000\040\005" +
    "\022\006\047\010\054\014\020\017\017\024\053\027\044" +
    "\030\035\031\056\035\050\037\023\041\027\042\026\043" +
    "\040\044\045\001\002\000\010\002\ufffe\027\014\030\006" +
    "\001\002\000\004\002\ufffd\001\002\000\004\002\000\001" +
    "\002\000\010\002\ufff9\027\ufff9\030\ufff9\001\002\000\010" +
    "\002\ufff8\027\ufff8\030\ufff8\001\002\000\010\002\ufffa\027" +
    "\ufffa\030\ufffa\001\002\000\064\005\uffb4\006\uffb4\007\uffb4" +
    "\010\uffb4\013\uffb4\014\uffb4\017\uffb4\021\uffb4\022\uffb4\023" +
    "\uffb4\024\uffb4\026\uffb4\027\uffb4\030\uffb4\031\uffb4\034\uffb4" +
    "\035\uffb4\036\uffb4\037\uffb4\040\uffb4\041\uffb4\042\uffb4\043" +
    "\uffb4\044\uffb4\101\uffb4\001\002\000\032\041\067\044\074" +
    "\045\065\046\063\047\061\050\075\051\062\053\072\070" +
    "\164\075\064\076\066\077\070\001\002\000\004\044\045" +
    "\001\002\000\064\005\uffba\006\uffba\007\uffba\010\uffba\013" +
    "\uffba\014\uffba\017\uffba\021\uffba\022\uffba\023\uffba\024\uffba" +
    "\026\uffba\027\uffba\030\uffba\031\uffba\034\uffba\035\uffba\036" +
    "\uffba\037\uffba\040\uffba\041\uffba\042\uffba\043\uffba\044\uffba" +
    "\101\uffba\001\002\000\004\002\ufffb\001\002\000\034\014" +
    "\020\017\017\024\053\027\044\030\035\031\056\035\050" +
    "\037\023\040\317\041\027\042\026\043\040\044\045\001" +
    "\002\000\004\005\316\001\002\000\040\005\ufff3\006\047" +
    "\010\054\014\020\017\017\024\053\027\044\030\035\031" +
    "\056\035\050\037\023\041\027\042\026\043\040\044\045" +
    "\001\002\000\030\041\067\044\074\045\065\046\063\047" +
    "\061\050\075\051\062\053\072\075\064\076\066\077\070" +
    "\001\002\000\004\044\304\001\002\000\064\005\uffb8\006" +
    "\uffb8\007\uffb8\010\uffb8\013\uffb8\014\uffb8\017\uffb8\021\uffb8" +
    "\022\uffb8\023\uffb8\024\uffb8\026\uffb8\027\uffb8\030\uffb8\031" +
    "\uffb8\034\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8" +
    "\042\uffb8\043\uffb8\044\uffb8\101\uffb8\001\002\000\006\103" +
    "\277\105\300\001\002\000\064\005\uffb2\006\uffb2\007\uffb2" +
    "\010\uffb2\013\uffb2\014\uffb2\017\uffb2\021\uffb2\022\uffb2\023" +
    "\uffb2\024\uffb2\026\uffb2\027\uffb2\030\uffb2\031\uffb2\034\uffb2" +
    "\035\uffb2\036\uffb2\037\uffb2\040\uffb2\041\uffb2\042\uffb2\043" +
    "\uffb2\044\uffb2\101\uffb2\001\002\000\040\005\uffef\006\uffef" +
    "\010\uffef\014\uffef\017\uffef\024\uffef\027\uffef\030\uffef\031" +
    "\uffef\035\uffef\037\uffef\041\uffef\042\uffef\043\uffef\044\uffef" +
    "\001\002\000\064\005\uffb6\006\uffb6\007\uffb6\010\uffb6\013" +
    "\uffb6\014\uffb6\017\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6" +
    "\026\uffb6\027\uffb6\030\uffb6\031\uffb6\034\uffb6\035\uffb6\036" +
    "\uffb6\037\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6" +
    "\101\uffb6\001\002\000\064\005\uffae\006\uffae\007\uffae\010" +
    "\uffae\013\uffae\014\uffae\017\uffae\021\uffae\022\uffae\023\uffae" +
    "\024\uffae\026\uffae\027\uffae\030\uffae\031\uffae\034\uffae\035" +
    "\uffae\036\uffae\037\uffae\040\uffae\041\uffae\042\uffae\043\uffae" +
    "\044\uffae\101\uffae\001\002\000\064\005\uffb9\006\uffb9\007" +
    "\uffb9\010\uffb9\013\uffb9\014\uffb9\017\uffb9\021\uffb9\022\uffb9" +
    "\023\uffb9\024\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9\034" +
    "\uffb9\035\uffb9\036\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9" +
    "\043\uffb9\044\uffb9\101\uffb9\001\002\000\040\005\uffed\006" +
    "\uffed\010\uffed\014\uffed\017\uffed\024\uffed\027\uffed\030\uffed" +
    "\031\uffed\035\uffed\037\uffed\041\uffed\042\uffed\043\uffed\044" +
    "\uffed\001\002\000\030\041\067\044\074\045\065\046\063" +
    "\047\061\050\075\051\062\053\072\075\064\076\066\077" +
    "\070\001\002\000\064\005\uffb3\006\uffb3\007\uffb3\010\uffb3" +
    "\013\uffb3\014\uffb3\017\uffb3\021\uffb3\022\uffb3\023\uffb3\024" +
    "\uffb3\026\uffb3\027\uffb3\030\uffb3\031\uffb3\034\uffb3\035\uffb3" +
    "\036\uffb3\037\uffb3\040\uffb3\041\uffb3\042\uffb3\043\uffb3\044" +
    "\uffb3\101\uffb3\001\002\000\064\005\uffb5\006\uffb5\007\uffb5" +
    "\010\uffb5\013\uffb5\014\uffb5\017\uffb5\021\uffb5\022\uffb5\023" +
    "\uffb5\024\uffb5\026\uffb5\027\uffb5\030\uffb5\031\uffb5\034\uffb5" +
    "\035\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5\043" +
    "\uffb5\044\uffb5\101\uffb5\001\002\000\064\005\uffb7\006\uffb7" +
    "\007\uffb7\010\uffb7\013\uffb7\014\uffb7\017\uffb7\021\uffb7\022" +
    "\uffb7\023\uffb7\024\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7" +
    "\034\uffb7\035\uffb7\036\uffb7\037\uffb7\040\uffb7\041\uffb7\042" +
    "\uffb7\043\uffb7\044\uffb7\101\uffb7\001\002\000\064\005\uffaf" +
    "\006\uffaf\007\uffaf\010\uffaf\013\uffaf\014\uffaf\017\uffaf\021" +
    "\uffaf\022\uffaf\023\uffaf\024\uffaf\026\uffaf\027\uffaf\030\uffaf" +
    "\031\uffaf\034\uffaf\035\uffaf\036\uffaf\037\uffaf\040\uffaf\041" +
    "\uffaf\042\uffaf\043\uffaf\044\uffaf\101\uffaf\001\002\000\010" +
    "\015\uffe7\103\uffe7\105\uffe7\001\002\000\040\005\ufff4\006" +
    "\047\010\054\014\020\017\017\024\053\027\044\030\035" +
    "\031\056\035\050\037\023\041\027\042\026\043\040\044" +
    "\045\001\002\000\004\044\260\001\002\000\032\041\067" +
    "\044\074\045\065\046\063\047\061\050\075\051\062\053" +
    "\072\070\164\075\064\076\066\077\070\001\002\000\064" +
    "\005\uffb0\006\uffb0\007\uffb0\010\uffb0\013\uffb0\014\uffb0\017" +
    "\uffb0\021\uffb0\022\uffb0\023\uffb0\024\uffb0\026\uffb0\027\uffb0" +
    "\030\uffb0\031\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040" +
    "\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\101\uffb0\001\002" +
    "\000\064\005\uffb1\006\uffb1\007\uffb1\010\uffb1\013\uffb1\014" +
    "\uffb1\017\uffb1\021\uffb1\022\uffb1\023\uffb1\024\uffb1\026\uffb1" +
    "\027\uffb1\030\uffb1\031\uffb1\034\uffb1\035\uffb1\036\uffb1\037" +
    "\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1\101\uffb1" +
    "\001\002\000\030\041\067\044\074\045\065\046\063\047" +
    "\061\050\075\051\062\053\072\075\064\076\066\077\070" +
    "\001\002\000\004\044\144\001\002\000\040\005\uffee\006" +
    "\uffee\010\uffee\014\uffee\017\uffee\024\uffee\027\uffee\030\uffee" +
    "\031\uffee\035\uffee\037\uffee\041\uffee\042\uffee\043\uffee\044" +
    "\uffee\001\002\000\004\044\057\001\002\000\004\103\060" +
    "\001\002\000\030\041\067\044\074\045\065\046\063\047" +
    "\061\050\075\051\062\053\072\075\064\076\066\077\070" +
    "\001\002\000\142\005\uffe4\006\uffe4\007\uffe4\010\uffe4\013" +
    "\uffe4\014\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4" +
    "\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4\032" +
    "\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4" +
    "\041\uffe4\042\uffe4\043\uffe4\044\uffe4\052\uffe4\053\uffe4\054" +
    "\uffe4\055\uffe4\056\uffe4\057\uffe4\060\uffe4\061\uffe4\062\uffe4" +
    "\063\uffe4\064\uffe4\065\uffe4\066\uffe4\067\uffe4\100\uffe4\101" +
    "\uffe4\102\uffe4\104\uffe4\105\uffe4\107\uffe4\001\002\000\142" +
    "\005\uffe5\006\uffe5\007\uffe5\010\uffe5\013\uffe5\014\uffe5\017" +
    "\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5" +
    "\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\034" +
    "\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5\042\uffe5" +
    "\043\uffe5\044\uffe5\052\uffe5\053\uffe5\054\uffe5\055\uffe5\056" +
    "\uffe5\057\uffe5\060\uffe5\061\uffe5\062\uffe5\063\uffe5\064\uffe5" +
    "\065\uffe5\066\uffe5\067\uffe5\100\uffe5\101\uffe5\102\uffe5\104" +
    "\uffe5\105\uffe5\107\uffe5\001\002\000\142\005\uffe2\006\uffe2" +
    "\007\uffe2\010\uffe2\013\uffe2\014\uffe2\017\uffe2\020\uffe2\021" +
    "\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2" +
    "\030\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2\036" +
    "\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2\043\uffe2\044\uffe2" +
    "\052\uffe2\053\uffe2\054\uffe2\055\uffe2\056\uffe2\057\uffe2\060" +
    "\uffe2\061\uffe2\062\uffe2\063\uffe2\064\uffe2\065\uffe2\066\uffe2" +
    "\067\uffe2\100\uffe2\101\uffe2\102\uffe2\104\uffe2\105\uffe2\107" +
    "\uffe2\001\002\000\142\005\uffe1\006\uffe1\007\uffe1\010\uffe1" +
    "\013\uffe1\014\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023" +
    "\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1" +
    "\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040" +
    "\uffe1\041\uffe1\042\uffe1\043\uffe1\044\uffe1\052\uffe1\053\uffe1" +
    "\054\uffe1\055\uffe1\056\uffe1\057\uffe1\060\uffe1\061\uffe1\062" +
    "\uffe1\063\uffe1\064\uffe1\065\uffe1\066\uffe1\067\uffe1\100\uffe1" +
    "\101\uffe1\102\uffe1\104\uffe1\105\uffe1\107\uffe1\001\002\000" +
    "\142\005\uffe6\006\uffe6\007\uffe6\010\uffe6\013\uffe6\014\uffe6" +
    "\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025" +
    "\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6" +
    "\034\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6\041\uffe6\042" +
    "\uffe6\043\uffe6\044\uffe6\052\uffe6\053\uffe6\054\uffe6\055\uffe6" +
    "\056\uffe6\057\uffe6\060\uffe6\061\uffe6\062\uffe6\063\uffe6\064" +
    "\uffe6\065\uffe6\066\uffe6\067\uffe6\100\uffe6\101\uffe6\102\uffe6" +
    "\104\uffe6\105\uffe6\107\uffe6\001\002\000\142\005\uffe0\006" +
    "\uffe0\007\uffe0\010\uffe0\013\uffe0\014\uffe0\017\uffe0\020\uffe0" +
    "\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027" +
    "\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0" +
    "\036\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0\044" +
    "\uffe0\052\uffe0\053\uffe0\054\uffe0\055\uffe0\056\uffe0\057\uffe0" +
    "\060\uffe0\061\uffe0\062\uffe0\063\uffe0\064\uffe0\065\uffe0\066" +
    "\uffe0\067\uffe0\100\uffe0\101\uffe0\102\uffe0\104\uffe0\105\uffe0" +
    "\107\uffe0\001\002\000\004\044\134\001\002\000\030\041" +
    "\067\044\074\045\065\046\063\047\061\050\075\051\062" +
    "\053\072\075\064\076\066\077\070\001\002\000\142\005" +
    "\uffd6\006\uffd6\007\uffd6\010\uffd6\013\uffd6\014\uffd6\017\uffd6" +
    "\020\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026" +
    "\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6" +
    "\035\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6\043" +
    "\uffd6\044\uffd6\052\uffd6\053\uffd6\054\uffd6\055\uffd6\056\uffd6" +
    "\057\uffd6\060\uffd6\061\uffd6\062\uffd6\063\uffd6\064\uffd6\065" +
    "\uffd6\066\uffd6\067\uffd6\100\uffd6\101\uffd6\102\uffd6\104\uffd6" +
    "\105\uffd6\107\uffd6\001\002\000\030\041\067\044\074\045" +
    "\065\046\063\047\061\050\075\051\062\053\072\075\064" +
    "\076\066\077\070\001\002\000\020\032\102\052\103\053" +
    "\076\054\077\055\100\056\104\057\101\001\002\000\142" +
    "\005\uffdf\006\uffdf\007\uffdf\010\uffdf\013\uffdf\014\uffdf\017" +
    "\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf" +
    "\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034" +
    "\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf" +
    "\043\uffdf\044\uffdf\052\uffdf\053\uffdf\054\uffdf\055\uffdf\056" +
    "\uffdf\057\uffdf\060\uffdf\061\uffdf\062\uffdf\063\uffdf\064\uffdf" +
    "\065\uffdf\066\uffdf\067\uffdf\100\uffdf\101\uffdf\102\uffdf\104" +
    "\uffdf\105\uffdf\107\uffdf\001\002\000\142\005\uffe3\006\uffe3" +
    "\007\uffe3\010\uffe3\013\uffe3\014\uffe3\017\uffe3\020\uffe3\021" +
    "\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3" +
    "\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3\036" +
    "\uffe3\037\uffe3\040\uffe3\041\uffe3\042\uffe3\043\uffe3\044\uffe3" +
    "\052\uffe3\053\uffe3\054\uffe3\055\uffe3\056\uffe3\057\uffe3\060" +
    "\uffe3\061\uffe3\062\uffe3\063\uffe3\064\uffe3\065\uffe3\066\uffe3" +
    "\067\uffe3\100\uffe3\101\uffe3\102\uffe3\104\uffe3\105\uffe3\107" +
    "\uffe3\001\002\000\030\041\067\044\074\045\065\046\063" +
    "\047\061\050\075\051\062\053\072\075\064\076\066\077" +
    "\070\001\002\000\030\041\067\044\074\045\065\046\063" +
    "\047\061\050\075\051\062\053\072\075\064\076\066\077" +
    "\070\001\002\000\030\041\067\044\074\045\065\046\063" +
    "\047\061\050\075\051\062\053\072\075\064\076\066\077" +
    "\070\001\002\000\004\106\123\001\002\000\030\041\067" +
    "\044\074\045\065\046\063\047\061\050\075\051\062\053" +
    "\072\075\064\076\066\077\070\001\002\000\030\041\067" +
    "\044\074\045\065\046\063\047\061\050\075\051\062\053" +
    "\072\075\064\076\066\077\070\001\002\000\030\041\067" +
    "\044\074\045\065\046\063\047\061\050\075\051\062\053" +
    "\072\075\064\076\066\077\070\001\002\000\142\005\uffd7" +
    "\006\uffd7\007\uffd7\010\uffd7\013\uffd7\014\uffd7\017\uffd7\020" +
    "\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7" +
    "\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035" +
    "\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7" +
    "\044\uffd7\052\uffd7\053\uffd7\054\uffd7\055\uffd7\056\uffd7\057" +
    "\uffd7\060\uffd7\061\uffd7\062\uffd7\063\uffd7\064\uffd7\065\uffd7" +
    "\066\uffd7\067\uffd7\100\uffd7\101\uffd7\102\uffd7\104\uffd7\105" +
    "\uffd7\107\uffd7\001\002\000\142\005\uffdc\006\uffdc\007\uffdc" +
    "\010\uffdc\013\uffdc\014\uffdc\017\uffdc\020\uffdc\021\uffdc\022" +
    "\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc" +
    "\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc\037" +
    "\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc\044\uffdc\052\uffdc" +
    "\053\uffdc\054\077\055\100\056\104\057\101\060\uffdc\061" +
    "\uffdc\062\uffdc\063\uffdc\064\uffdc\065\uffdc\066\uffdc\067\uffdc" +
    "\100\uffdc\101\uffdc\102\uffdc\104\uffdc\105\uffdc\107\uffdc\001" +
    "\002\000\022\025\111\033\110\052\103\053\076\054\077" +
    "\055\100\056\104\057\101\001\002\000\030\041\067\044" +
    "\074\045\065\046\063\047\061\050\075\051\062\053\072" +
    "\075\064\076\066\077\070\001\002\000\034\014\020\017" +
    "\017\024\053\027\044\030\035\031\056\034\113\035\050" +
    "\037\023\041\027\042\026\043\040\044\045\001\002\000" +
    "\034\014\020\017\017\024\053\027\044\030\035\031\056" +
    "\034\115\035\050\037\023\041\027\042\026\043\040\044" +
    "\045\001\002\000\064\005\uffa2\006\uffa2\007\uffa2\010\uffa2" +
    "\013\uffa2\014\uffa2\017\uffa2\021\uffa2\022\uffa2\023\uffa2\024" +
    "\uffa2\026\uffa2\027\uffa2\030\uffa2\031\uffa2\034\uffa2\035\uffa2" +
    "\036\uffa2\037\uffa2\040\uffa2\041\uffa2\042\uffa2\043\uffa2\044" +
    "\uffa2\101\uffa2\001\002\000\064\005\uffbb\006\uffbb\007\uffbb" +
    "\010\uffbb\013\uffbb\014\uffbb\017\uffbb\021\uffbb\022\uffbb\023" +
    "\uffbb\024\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb\034\uffbb" +
    "\035\uffbb\036\uffbb\037\uffbb\040\uffbb\041\uffbb\042\uffbb\043" +
    "\uffbb\044\uffbb\101\uffbb\001\002\000\064\005\uffa3\006\uffa3" +
    "\007\uffa3\010\uffa3\013\uffa3\014\uffa3\017\uffa3\021\uffa3\022" +
    "\uffa3\023\uffa3\024\uffa3\026\uffa3\027\uffa3\030\uffa3\031\uffa3" +
    "\034\uffa3\035\uffa3\036\uffa3\037\uffa3\040\uffa3\041\uffa3\042" +
    "\uffa3\043\uffa3\044\uffa3\101\uffa3\001\002\000\020\025\117" +
    "\052\103\053\076\054\077\055\100\056\104\057\101\001" +
    "\002\000\034\014\020\017\017\024\053\027\044\030\035" +
    "\031\056\034\121\035\050\037\023\041\027\042\026\043" +
    "\040\044\045\001\002\000\034\014\020\017\017\024\053" +
    "\027\044\030\035\031\056\034\122\035\050\037\023\041" +
    "\027\042\026\043\040\044\045\001\002\000\064\005\uffa0" +
    "\006\uffa0\007\uffa0\010\uffa0\013\uffa0\014\uffa0\017\uffa0\021" +
    "\uffa0\022\uffa0\023\uffa0\024\uffa0\026\uffa0\027\uffa0\030\uffa0" +
    "\031\uffa0\034\uffa0\035\uffa0\036\uffa0\037\uffa0\040\uffa0\041" +
    "\uffa0\042\uffa0\043\uffa0\044\uffa0\101\uffa0\001\002\000\064" +
    "\005\uffa1\006\uffa1\007\uffa1\010\uffa1\013\uffa1\014\uffa1\017" +
    "\uffa1\021\uffa1\022\uffa1\023\uffa1\024\uffa1\026\uffa1\027\uffa1" +
    "\030\uffa1\031\uffa1\034\uffa1\035\uffa1\036\uffa1\037\uffa1\040" +
    "\uffa1\041\uffa1\042\uffa1\043\uffa1\044\uffa1\101\uffa1\001\002" +
    "\000\030\041\067\044\074\045\065\046\063\047\061\050" +
    "\075\051\062\053\072\075\064\076\066\077\070\001\002" +
    "\000\020\052\103\053\076\054\077\055\100\056\104\057" +
    "\101\107\125\001\002\000\142\005\uffd8\006\uffd8\007\uffd8" +
    "\010\uffd8\013\uffd8\014\uffd8\017\uffd8\020\uffd8\021\uffd8\022" +
    "\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8" +
    "\031\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8\037" +
    "\uffd8\040\uffd8\041\uffd8\042\uffd8\043\uffd8\044\uffd8\052\uffd8" +
    "\053\uffd8\054\uffd8\055\uffd8\056\uffd8\057\uffd8\060\uffd8\061" +
    "\uffd8\062\uffd8\063\uffd8\064\uffd8\065\uffd8\066\uffd8\067\uffd8" +
    "\100\uffd8\101\uffd8\102\uffd8\104\uffd8\105\uffd8\107\uffd8\001" +
    "\002\000\142\005\uffd9\006\uffd9\007\uffd9\010\uffd9\013\uffd9" +
    "\014\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9\024" +
    "\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9" +
    "\033\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9\041" +
    "\uffd9\042\uffd9\043\uffd9\044\uffd9\052\uffd9\053\uffd9\054\uffd9" +
    "\055\uffd9\056\104\057\101\060\uffd9\061\uffd9\062\uffd9\063" +
    "\uffd9\064\uffd9\065\uffd9\066\uffd9\067\uffd9\100\uffd9\101\uffd9" +
    "\102\uffd9\104\uffd9\105\uffd9\107\uffd9\001\002\000\142\005" +
    "\uffda\006\uffda\007\uffda\010\uffda\013\uffda\014\uffda\017\uffda" +
    "\020\uffda\021\uffda\022\uffda\023\uffda\024\uffda\025\uffda\026" +
    "\uffda\027\uffda\030\uffda\031\uffda\032\uffda\033\uffda\034\uffda" +
    "\035\uffda\036\uffda\037\uffda\040\uffda\041\uffda\042\uffda\043" +
    "\uffda\044\uffda\052\uffda\053\uffda\054\uffda\055\uffda\056\104" +
    "\057\101\060\uffda\061\uffda\062\uffda\063\uffda\064\uffda\065" +
    "\uffda\066\uffda\067\uffda\100\uffda\101\uffda\102\uffda\104\uffda" +
    "\105\uffda\107\uffda\001\002\000\142\005\uffdb\006\uffdb\007" +
    "\uffdb\010\uffdb\013\uffdb\014\uffdb\017\uffdb\020\uffdb\021\uffdb" +
    "\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb\030" +
    "\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb" +
    "\037\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb\044\uffdb\052" +
    "\uffdb\053\uffdb\054\077\055\100\056\104\057\101\060\uffdb" +
    "\061\uffdb\062\uffdb\063\uffdb\064\uffdb\065\uffdb\066\uffdb\067" +
    "\uffdb\100\uffdb\101\uffdb\102\uffdb\104\uffdb\105\uffdb\107\uffdb" +
    "\001\002\000\142\005\uffde\006\uffde\007\uffde\010\uffde\013" +
    "\uffde\014\uffde\017\uffde\020\uffde\021\uffde\022\uffde\023\uffde" +
    "\024\uffde\025\uffde\026\uffde\027\uffde\030\uffde\031\uffde\032" +
    "\uffde\033\uffde\034\uffde\035\uffde\036\uffde\037\uffde\040\uffde" +
    "\041\uffde\042\uffde\043\uffde\044\uffde\052\uffde\053\uffde\054" +
    "\077\055\100\056\104\057\101\060\uffde\061\uffde\062\uffde" +
    "\063\uffde\064\uffde\065\uffde\066\uffde\067\uffde\100\uffde\101" +
    "\uffde\102\uffde\104\uffde\105\uffde\107\uffde\001\002\000\020" +
    "\052\103\053\076\054\077\055\100\056\104\057\101\100" +
    "\133\001\002\000\142\005\uffdd\006\uffdd\007\uffdd\010\uffdd" +
    "\013\uffdd\014\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023" +
    "\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd" +
    "\032\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040" +
    "\uffdd\041\uffdd\042\uffdd\043\uffdd\044\uffdd\052\uffdd\053\uffdd" +
    "\054\uffdd\055\uffdd\056\uffdd\057\uffdd\060\uffdd\061\uffdd\062" +
    "\uffdd\063\uffdd\064\uffdd\065\uffdd\066\uffdd\067\uffdd\100\uffdd" +
    "\101\uffdd\102\uffdd\104\uffdd\105\uffdd\107\uffdd\001\002\000" +
    "\004\077\135\001\002\000\032\041\067\044\074\045\065" +
    "\046\063\047\061\050\075\051\062\053\072\075\064\076" +
    "\066\077\070\100\137\001\002\000\006\100\142\105\141" +
    "\001\002\000\142\005\uff99\006\uff99\007\uff99\010\uff99\013" +
    "\uff99\014\uff99\017\uff99\020\uff99\021\uff99\022\uff99\023\uff99" +
    "\024\uff99\025\uff99\026\uff99\027\uff99\030\uff99\031\uff99\032" +
    "\uff99\033\uff99\034\uff99\035\uff99\036\uff99\037\uff99\040\uff99" +
    "\041\uff99\042\uff99\043\uff99\044\uff99\052\uff99\053\uff99\054" +
    "\uff99\055\uff99\056\uff99\057\uff99\060\uff99\061\uff99\062\uff99" +
    "\063\uff99\064\uff99\065\uff99\066\uff99\067\uff99\100\uff99\101" +
    "\uff99\102\uff99\104\uff99\105\uff99\107\uff99\001\002\000\022" +
    "\052\103\053\076\054\077\055\100\056\104\057\101\100" +
    "\uff96\105\uff96\001\002\000\030\041\067\044\074\045\065" +
    "\046\063\047\061\050\075\051\062\053\072\075\064\076" +
    "\066\077\070\001\002\000\142\005\uff98\006\uff98\007\uff98" +
    "\010\uff98\013\uff98\014\uff98\017\uff98\020\uff98\021\uff98\022" +
    "\uff98\023\uff98\024\uff98\025\uff98\026\uff98\027\uff98\030\uff98" +
    "\031\uff98\032\uff98\033\uff98\034\uff98\035\uff98\036\uff98\037" +
    "\uff98\040\uff98\041\uff98\042\uff98\043\uff98\044\uff98\052\uff98" +
    "\053\uff98\054\uff98\055\uff98\056\uff98\057\uff98\060\uff98\061" +
    "\uff98\062\uff98\063\uff98\064\uff98\065\uff98\066\uff98\067\uff98" +
    "\100\uff98\101\uff98\102\uff98\104\uff98\105\uff98\107\uff98\001" +
    "\002\000\022\052\103\053\076\054\077\055\100\056\104" +
    "\057\101\100\uff97\105\uff97\001\002\000\012\071\150\072" +
    "\145\073\151\074\146\001\002\000\042\012\uffbe\013\uffbe" +
    "\014\uffbe\017\uffbe\024\uffbe\027\uffbe\030\uffbe\031\uffbe\035" +
    "\uffbe\037\uffbe\041\uffbe\042\uffbe\043\uffbe\044\uffbe\100\uffbe" +
    "\105\uffbe\001\002\000\042\012\uffbc\013\uffbc\014\uffbc\017" +
    "\uffbc\024\uffbc\027\uffbc\030\uffbc\031\uffbc\035\uffbc\037\uffbc" +
    "\041\uffbc\042\uffbc\043\uffbc\044\uffbc\100\uffbc\105\uffbc\001" +
    "\002\000\036\012\154\013\153\014\020\017\017\024\053" +
    "\027\044\030\035\031\056\035\050\037\023\041\027\042" +
    "\026\043\040\044\045\001\002\000\042\012\uffbf\013\uffbf" +
    "\014\uffbf\017\uffbf\024\uffbf\027\uffbf\030\uffbf\031\uffbf\035" +
    "\uffbf\037\uffbf\041\uffbf\042\uffbf\043\uffbf\044\uffbf\100\uffbf" +
    "\105\uffbf\001\002\000\042\012\uffbd\013\uffbd\014\uffbd\017" +
    "\uffbd\024\uffbd\027\uffbd\030\uffbd\031\uffbd\035\uffbd\037\uffbd" +
    "\041\uffbd\042\uffbd\043\uffbd\044\uffbd\100\uffbd\105\uffbd\001" +
    "\002\000\034\013\225\014\020\017\017\024\053\027\044" +
    "\030\035\031\056\035\050\037\023\041\027\042\026\043" +
    "\040\044\045\001\002\000\032\041\067\044\074\045\065" +
    "\046\063\047\061\050\075\051\062\053\072\070\164\075" +
    "\064\076\066\077\070\001\002\000\004\077\155\001\002" +
    "\000\004\044\156\001\002\000\012\071\150\072\145\073" +
    "\151\074\146\001\002\000\006\100\161\105\160\001\002" +
    "\000\004\044\217\001\002\000\034\013\163\014\020\017" +
    "\017\024\053\027\044\030\035\031\056\035\050\037\023" +
    "\041\027\042\026\043\040\044\045\001\002\000\034\013" +
    "\213\014\020\017\017\024\053\027\044\030\035\031\056" +
    "\035\050\037\023\041\027\042\026\043\040\044\045\001" +
    "\002\000\032\041\067\044\074\045\065\046\063\047\061" +
    "\050\075\051\062\053\072\070\164\075\064\076\066\077" +
    "\070\001\002\000\030\041\067\044\074\045\065\046\063" +
    "\047\061\050\075\051\062\053\072\075\064\076\066\077" +
    "\070\001\002\000\076\005\uffcb\006\uffcb\007\uffcb\010\uffcb" +
    "\013\uffcb\014\uffcb\017\uffcb\020\uffcb\021\uffcb\022\uffcb\023" +
    "\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb" +
    "\034\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb\042" +
    "\uffcb\043\uffcb\044\uffcb\066\206\067\207\101\uffcb\104\uffcb" +
    "\001\002\000\126\005\uffd5\006\uffd5\007\uffd5\010\uffd5\013" +
    "\uffd5\014\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5" +
    "\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\034" +
    "\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5" +
    "\043\uffd5\044\uffd5\052\103\053\076\054\077\055\100\056" +
    "\104\057\101\060\176\061\172\062\175\063\174\064\177" +
    "\065\173\066\uffd5\067\uffd5\101\uffd5\104\uffd5\001\002\000" +
    "\004\104\170\001\002\000\004\011\171\001\002\000\040" +
    "\005\uffc6\006\uffc6\010\uffc6\014\uffc6\017\uffc6\024\uffc6\027" +
    "\uffc6\030\uffc6\031\uffc6\035\uffc6\037\uffc6\041\uffc6\042\uffc6" +
    "\043\uffc6\044\uffc6\001\002\000\030\041\067\044\074\045" +
    "\065\046\063\047\061\050\075\051\062\053\072\075\064" +
    "\076\066\077\070\001\002\000\030\041\067\044\074\045" +
    "\065\046\063\047\061\050\075\051\062\053\072\075\064" +
    "\076\066\077\070\001\002\000\030\041\067\044\074\045" +
    "\065\046\063\047\061\050\075\051\062\053\072\075\064" +
    "\076\066\077\070\001\002\000\030\041\067\044\074\045" +
    "\065\046\063\047\061\050\075\051\062\053\072\075\064" +
    "\076\066\077\070\001\002\000\030\041\067\044\074\045" +
    "\065\046\063\047\061\050\075\051\062\053\072\075\064" +
    "\076\066\077\070\001\002\000\030\041\067\044\074\045" +
    "\065\046\063\047\061\050\075\051\062\053\072\075\064" +
    "\076\066\077\070\001\002\000\112\005\uffd0\006\uffd0\007" +
    "\uffd0\010\uffd0\013\uffd0\014\uffd0\017\uffd0\020\uffd0\021\uffd0" +
    "\022\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030" +
    "\uffd0\031\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0" +
    "\041\uffd0\042\uffd0\043\uffd0\044\uffd0\052\103\053\076\054" +
    "\077\055\100\056\104\057\101\066\uffd0\067\uffd0\101\uffd0" +
    "\104\uffd0\001\002\000\112\005\uffd4\006\uffd4\007\uffd4\010" +
    "\uffd4\013\uffd4\014\uffd4\017\uffd4\020\uffd4\021\uffd4\022\uffd4" +
    "\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031" +
    "\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4" +
    "\042\uffd4\043\uffd4\044\uffd4\052\103\053\076\054\077\055" +
    "\100\056\104\057\101\066\uffd4\067\uffd4\101\uffd4\104\uffd4" +
    "\001\002\000\112\005\uffd2\006\uffd2\007\uffd2\010\uffd2\013" +
    "\uffd2\014\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2" +
    "\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\034" +
    "\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2\041\uffd2\042\uffd2" +
    "\043\uffd2\044\uffd2\052\103\053\076\054\077\055\100\056" +
    "\104\057\101\066\uffd2\067\uffd2\101\uffd2\104\uffd2\001\002" +
    "\000\112\005\uffd1\006\uffd1\007\uffd1\010\uffd1\013\uffd1\014" +
    "\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1" +
    "\025\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\034\uffd1\035" +
    "\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1\043\uffd1" +
    "\044\uffd1\052\103\053\076\054\077\055\100\056\104\057" +
    "\101\066\uffd1\067\uffd1\101\uffd1\104\uffd1\001\002\000\112" +
    "\005\uffcf\006\uffcf\007\uffcf\010\uffcf\013\uffcf\014\uffcf\017" +
    "\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf" +
    "\026\uffcf\027\uffcf\030\uffcf\031\uffcf\034\uffcf\035\uffcf\036" +
    "\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf" +
    "\052\103\053\076\054\077\055\100\056\104\057\101\066" +
    "\uffcf\067\uffcf\101\uffcf\104\uffcf\001\002\000\112\005\uffd3" +
    "\006\uffd3\007\uffd3\010\uffd3\013\uffd3\014\uffd3\017\uffd3\020" +
    "\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3" +
    "\027\uffd3\030\uffd3\031\uffd3\034\uffd3\035\uffd3\036\uffd3\037" +
    "\uffd3\040\uffd3\041\uffd3\042\uffd3\043\uffd3\044\uffd3\052\103" +
    "\053\076\054\077\055\100\056\104\057\101\066\uffd3\067" +
    "\uffd3\101\uffd3\104\uffd3\001\002\000\030\041\067\044\074" +
    "\045\065\046\063\047\061\050\075\051\062\053\072\075" +
    "\064\076\066\077\070\001\002\000\030\041\067\044\074" +
    "\045\065\046\063\047\061\050\075\051\062\053\072\075" +
    "\064\076\066\077\070\001\002\000\072\005\uffcd\006\uffcd" +
    "\007\uffcd\010\uffcd\013\uffcd\014\uffcd\017\uffcd\020\uffcd\021" +
    "\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd" +
    "\030\uffcd\031\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040" +
    "\uffcd\041\uffcd\042\uffcd\043\uffcd\044\uffcd\101\uffcd\104\uffcd" +
    "\001\002\000\072\005\uffce\006\uffce\007\uffce\010\uffce\013" +
    "\uffce\014\uffce\017\uffce\020\uffce\021\uffce\022\uffce\023\uffce" +
    "\024\uffce\025\uffce\026\uffce\027\uffce\030\uffce\031\uffce\034" +
    "\uffce\035\uffce\036\uffce\037\uffce\040\uffce\041\uffce\042\uffce" +
    "\043\uffce\044\uffce\101\uffce\104\uffce\001\002\000\072\005" +
    "\uffcc\006\uffcc\007\uffcc\010\uffcc\013\uffcc\014\uffcc\017\uffcc" +
    "\020\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026" +
    "\uffcc\027\uffcc\030\uffcc\031\uffcc\034\uffcc\035\uffcc\036\uffcc" +
    "\037\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc\101" +
    "\uffcc\104\uffcc\001\002\000\032\041\067\044\074\045\065" +
    "\046\063\047\061\050\075\051\062\053\072\070\164\075" +
    "\064\076\066\077\070\001\002\000\004\104\215\001\002" +
    "\000\004\011\216\001\002\000\040\005\uffc7\006\uffc7\010" +
    "\uffc7\014\uffc7\017\uffc7\024\uffc7\027\uffc7\030\uffc7\031\uffc7" +
    "\035\uffc7\037\uffc7\041\uffc7\042\uffc7\043\uffc7\044\uffc7\001" +
    "\002\000\012\071\150\072\145\073\151\074\146\001\002" +
    "\000\006\100\uffc1\105\uffc1\001\002\000\006\100\uffc0\105" +
    "\uffc0\001\002\000\004\104\223\001\002\000\004\011\224" +
    "\001\002\000\040\005\uffc8\006\uffc8\010\uffc8\014\uffc8\017" +
    "\uffc8\024\uffc8\027\uffc8\030\uffc8\031\uffc8\035\uffc8\037\uffc8" +
    "\041\uffc8\042\uffc8\043\uffc8\044\uffc8\001\002\000\032\041" +
    "\067\044\074\045\065\046\063\047\061\050\075\051\062" +
    "\053\072\070\164\075\064\076\066\077\070\001\002\000" +
    "\004\104\227\001\002\000\004\011\230\001\002\000\040" +
    "\005\uffc9\006\uffc9\010\uffc9\014\uffc9\017\uffc9\024\uffc9\027" +
    "\uffc9\030\uffc9\031\uffc9\035\uffc9\037\uffc9\041\uffc9\042\uffc9" +
    "\043\uffc9\044\uffc9\001\002\000\020\025\232\052\103\053" +
    "\076\054\077\055\100\056\104\057\101\001\002\000\004" +
    "\101\234\001\002\000\010\022\243\026\241\101\242\001" +
    "\002\000\030\041\067\044\074\045\065\046\063\047\061" +
    "\050\075\051\062\053\072\075\064\076\066\077\070\001" +
    "\002\000\020\052\103\053\076\054\077\055\100\056\104" +
    "\057\101\102\236\001\002\000\004\020\237\001\002\000" +
    "\032\014\020\017\017\024\053\027\044\030\035\031\056" +
    "\035\050\037\023\041\027\042\026\043\040\044\045\001" +
    "\002\000\040\014\020\017\017\022\uffa4\024\053\026\uffa4" +
    "\027\044\030\035\031\056\035\050\037\023\041\027\042" +
    "\026\043\040\044\045\101\uffa4\001\002\000\064\005\uffa7" +
    "\006\uffa7\007\uffa7\010\uffa7\013\uffa7\014\uffa7\017\uffa7\021" +
    "\uffa7\022\uffa7\023\uffa7\024\uffa7\026\uffa7\027\uffa7\030\uffa7" +
    "\031\uffa7\034\uffa7\035\uffa7\036\uffa7\037\uffa7\040\uffa7\041" +
    "\uffa7\042\uffa7\043\uffa7\044\uffa7\101\uffa7\001\002\000\030" +
    "\041\067\044\074\045\065\046\063\047\061\050\075\051" +
    "\062\053\072\075\064\076\066\077\070\001\002\000\004" +
    "\020\244\001\002\000\032\014\020\017\017\024\053\027" +
    "\044\030\035\031\056\035\050\037\023\041\027\042\026" +
    "\043\040\044\045\001\002\000\034\014\020\017\017\024" +
    "\053\026\246\027\044\030\035\031\056\035\050\037\023" +
    "\041\027\042\026\043\040\044\045\001\002\000\064\005" +
    "\uffa6\006\uffa6\007\uffa6\010\uffa6\013\uffa6\014\uffa6\017\uffa6" +
    "\021\uffa6\022\uffa6\023\uffa6\024\uffa6\026\uffa6\027\uffa6\030" +
    "\uffa6\031\uffa6\034\uffa6\035\uffa6\036\uffa6\037\uffa6\040\uffa6" +
    "\041\uffa6\042\uffa6\043\uffa6\044\uffa6\101\uffa6\001\002\000" +
    "\020\052\103\053\076\054\077\055\100\056\104\057\101" +
    "\102\250\001\002\000\004\020\251\001\002\000\032\014" +
    "\020\017\017\024\053\027\044\030\035\031\056\035\050" +
    "\037\023\041\027\042\026\043\040\044\045\001\002\000" +
    "\040\014\020\017\017\022\uffa5\024\053\026\uffa5\027\044" +
    "\030\035\031\056\035\050\037\023\041\027\042\026\043" +
    "\040\044\045\101\uffa5\001\002\000\004\025\254\001\002" +
    "\000\034\014\020\017\017\024\053\027\044\030\035\031" +
    "\056\035\050\036\256\037\023\041\027\042\026\043\040" +
    "\044\045\001\002\000\034\014\020\017\017\024\053\027" +
    "\044\030\035\031\056\035\050\036\257\037\023\041\027" +
    "\042\026\043\040\044\045\001\002\000\064\005\uff9e\006" +
    "\uff9e\007\uff9e\010\uff9e\013\uff9e\014\uff9e\017\uff9e\021\uff9e" +
    "\022\uff9e\023\uff9e\024\uff9e\026\uff9e\027\uff9e\030\uff9e\031" +
    "\uff9e\034\uff9e\035\uff9e\036\uff9e\037\uff9e\040\uff9e\041\uff9e" +
    "\042\uff9e\043\uff9e\044\uff9e\101\uff9e\001\002\000\064\005" +
    "\uff9f\006\uff9f\007\uff9f\010\uff9f\013\uff9f\014\uff9f\017\uff9f" +
    "\021\uff9f\022\uff9f\023\uff9f\024\uff9f\026\uff9f\027\uff9f\030" +
    "\uff9f\031\uff9f\034\uff9f\035\uff9f\036\uff9f\037\uff9f\040\uff9f" +
    "\041\uff9f\042\uff9f\043\uff9f\044\uff9f\101\uff9f\001\002\000" +
    "\036\007\261\012\263\014\020\017\017\024\053\027\044" +
    "\030\035\031\056\035\050\037\023\041\027\042\026\043" +
    "\040\044\045\001\002\000\040\005\uffc4\006\uffc4\010\uffc4" +
    "\014\uffc4\017\uffc4\024\uffc4\027\uffc4\030\uffc4\031\uffc4\035" +
    "\uffc4\037\uffc4\041\uffc4\042\uffc4\043\uffc4\044\uffc4\001\002" +
    "\000\034\007\272\014\020\017\017\024\053\027\044\030" +
    "\035\031\056\035\050\037\023\041\027\042\026\043\040" +
    "\044\045\001\002\000\004\077\264\001\002\000\004\044" +
    "\156\001\002\000\006\100\266\105\160\001\002\000\034" +
    "\007\267\014\020\017\017\024\053\027\044\030\035\031" +
    "\056\035\050\037\023\041\027\042\026\043\040\044\045" +
    "\001\002\000\040\005\uffc2\006\uffc2\010\uffc2\014\uffc2\017" +
    "\uffc2\024\uffc2\027\uffc2\030\uffc2\031\uffc2\035\uffc2\037\uffc2" +
    "\041\uffc2\042\uffc2\043\uffc2\044\uffc2\001\002\000\034\007" +
    "\271\014\020\017\017\024\053\027\044\030\035\031\056" +
    "\035\050\037\023\041\027\042\026\043\040\044\045\001" +
    "\002\000\040\005\uffc3\006\uffc3\010\uffc3\014\uffc3\017\uffc3" +
    "\024\uffc3\027\uffc3\030\uffc3\031\uffc3\035\uffc3\037\uffc3\041" +
    "\uffc3\042\uffc3\043\uffc3\044\uffc3\001\002\000\040\005\uffc5" +
    "\006\uffc5\010\uffc5\014\uffc5\017\uffc5\024\uffc5\027\uffc5\030" +
    "\uffc5\031\uffc5\035\uffc5\037\uffc5\041\uffc5\042\uffc5\043\uffc5" +
    "\044\uffc5\001\002\000\034\005\ufff1\014\020\017\017\024" +
    "\053\027\044\030\035\031\056\035\050\037\023\041\027" +
    "\042\026\043\040\044\045\001\002\000\040\005\ufff0\006" +
    "\ufff0\010\ufff0\014\ufff0\017\ufff0\024\ufff0\027\ufff0\030\ufff0" +
    "\031\ufff0\035\ufff0\037\ufff0\041\ufff0\042\ufff0\043\ufff0\044" +
    "\ufff0\001\002\000\020\052\103\053\076\054\077\055\100" +
    "\056\104\057\101\104\276\001\002\000\064\005\uff94\006" +
    "\uff94\007\uff94\010\uff94\013\uff94\014\uff94\017\uff94\021\uff94" +
    "\022\uff94\023\uff94\024\uff94\026\uff94\027\uff94\030\uff94\031" +
    "\uff94\034\uff94\035\uff94\036\uff94\037\uff94\040\uff94\041\uff94" +
    "\042\uff94\043\uff94\044\uff94\101\uff94\001\002\000\030\041" +
    "\067\044\074\045\065\046\063\047\061\050\075\051\062" +
    "\053\072\075\064\076\066\077\070\001\002\000\004\044" +
    "\301\001\002\000\010\015\uffe8\103\uffe8\105\uffe8\001\002" +
    "\000\020\052\103\053\076\054\077\055\100\056\104\057" +
    "\101\104\303\001\002\000\064\005\uffca\006\uffca\007\uffca" +
    "\010\uffca\013\uffca\014\uffca\017\uffca\021\uffca\022\uffca\023" +
    "\uffca\024\uffca\026\uffca\027\uffca\030\uffca\031\uffca\034\uffca" +
    "\035\uffca\036\uffca\037\uffca\040\uffca\041\uffca\042\uffca\043" +
    "\uffca\044\uffca\101\uffca\001\002\000\004\077\305\001\002" +
    "\000\032\041\067\044\074\045\065\046\063\047\061\050" +
    "\075\051\062\053\072\075\064\076\066\077\070\100\307" +
    "\001\002\000\006\100\311\105\141\001\002\000\004\104" +
    "\310\001\002\000\064\005\uff9b\006\uff9b\007\uff9b\010\uff9b" +
    "\013\uff9b\014\uff9b\017\uff9b\021\uff9b\022\uff9b\023\uff9b\024" +
    "\uff9b\026\uff9b\027\uff9b\030\uff9b\031\uff9b\034\uff9b\035\uff9b" +
    "\036\uff9b\037\uff9b\040\uff9b\041\uff9b\042\uff9b\043\uff9b\044" +
    "\uff9b\101\uff9b\001\002\000\004\104\312\001\002\000\064" +
    "\005\uff9a\006\uff9a\007\uff9a\010\uff9a\013\uff9a\014\uff9a\017" +
    "\uff9a\021\uff9a\022\uff9a\023\uff9a\024\uff9a\026\uff9a\027\uff9a" +
    "\030\uff9a\031\uff9a\034\uff9a\035\uff9a\036\uff9a\037\uff9a\040" +
    "\uff9a\041\uff9a\042\uff9a\043\uff9a\044\uff9a\101\uff9a\001\002" +
    "\000\020\052\103\053\076\054\077\055\100\056\104\057" +
    "\101\104\314\001\002\000\064\005\uff95\006\uff95\007\uff95" +
    "\010\uff95\013\uff95\014\uff95\017\uff95\021\uff95\022\uff95\023" +
    "\uff95\024\uff95\026\uff95\027\uff95\030\uff95\031\uff95\034\uff95" +
    "\035\uff95\036\uff95\037\uff95\040\uff95\041\uff95\042\uff95\043" +
    "\uff95\044\uff95\101\uff95\001\002\000\010\005\ufff2\006\047" +
    "\010\054\001\002\000\004\002\ufffc\001\002\000\032\041" +
    "\067\044\074\045\065\046\063\047\061\050\075\051\062" +
    "\053\072\070\164\075\064\076\066\077\070\001\002\000" +
    "\034\014\020\017\017\024\053\027\044\030\035\031\056" +
    "\035\050\037\023\040\321\041\027\042\026\043\040\044" +
    "\045\001\002\000\032\041\067\044\074\045\065\046\063" +
    "\047\061\050\075\051\062\053\072\070\164\075\064\076" +
    "\066\077\070\001\002\000\064\005\uff9d\006\uff9d\007\uff9d" +
    "\010\uff9d\013\uff9d\014\uff9d\017\uff9d\021\uff9d\022\uff9d\023" +
    "\uff9d\024\uff9d\026\uff9d\027\uff9d\030\uff9d\031\uff9d\034\uff9d" +
    "\035\uff9d\036\uff9d\037\uff9d\040\uff9d\041\uff9d\042\uff9d\043" +
    "\uff9d\044\uff9d\101\uff9d\001\002\000\064\005\uff9c\006\uff9c" +
    "\007\uff9c\010\uff9c\013\uff9c\014\uff9c\017\uff9c\021\uff9c\022" +
    "\uff9c\023\uff9c\024\uff9c\026\uff9c\027\uff9c\030\uff9c\031\uff9c" +
    "\034\uff9c\035\uff9c\036\uff9c\037\uff9c\040\uff9c\041\uff9c\042" +
    "\uff9c\043\uff9c\044\uff9c\101\uff9c\001\002\000\006\015\325" +
    "\105\300\001\002\000\012\071\331\072\326\073\330\074" +
    "\327\001\002\000\004\016\343\001\002\000\004\016\340" +
    "\001\002\000\004\016\335\001\002\000\004\016\332\001" +
    "\002\000\030\041\067\044\074\045\065\046\063\047\061" +
    "\050\075\051\062\053\072\075\064\076\066\077\070\001" +
    "\002\000\020\052\103\053\076\054\077\055\100\056\104" +
    "\057\101\104\334\001\002\000\064\005\uffec\006\uffec\007" +
    "\uffec\010\uffec\013\uffec\014\uffec\017\uffec\021\uffec\022\uffec" +
    "\023\uffec\024\uffec\026\uffec\027\uffec\030\uffec\031\uffec\034" +
    "\uffec\035\uffec\036\uffec\037\uffec\040\uffec\041\uffec\042\uffec" +
    "\043\uffec\044\uffec\101\uffec\001\002\000\030\041\067\044" +
    "\074\045\065\046\063\047\061\050\075\051\062\053\072" +
    "\075\064\076\066\077\070\001\002\000\020\052\103\053" +
    "\076\054\077\055\100\056\104\057\101\104\337\001\002" +
    "\000\064\005\uffea\006\uffea\007\uffea\010\uffea\013\uffea\014" +
    "\uffea\017\uffea\021\uffea\022\uffea\023\uffea\024\uffea\026\uffea" +
    "\027\uffea\030\uffea\031\uffea\034\uffea\035\uffea\036\uffea\037" +
    "\uffea\040\uffea\041\uffea\042\uffea\043\uffea\044\uffea\101\uffea" +
    "\001\002\000\030\041\067\044\074\045\065\046\063\047" +
    "\061\050\075\051\062\053\072\075\064\076\066\077\070" +
    "\001\002\000\020\052\103\053\076\054\077\055\100\056" +
    "\104\057\101\104\342\001\002\000\064\005\uffe9\006\uffe9" +
    "\007\uffe9\010\uffe9\013\uffe9\014\uffe9\017\uffe9\021\uffe9\022" +
    "\uffe9\023\uffe9\024\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9" +
    "\034\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9\042" +
    "\uffe9\043\uffe9\044\uffe9\101\uffe9\001\002\000\030\041\067" +
    "\044\074\045\065\046\063\047\061\050\075\051\062\053" +
    "\072\075\064\076\066\077\070\001\002\000\020\052\103" +
    "\053\076\054\077\055\100\056\104\057\101\104\345\001" +
    "\002\000\064\005\uffeb\006\uffeb\007\uffeb\010\uffeb\013\uffeb" +
    "\014\uffeb\017\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb\026" +
    "\uffeb\027\uffeb\030\uffeb\031\uffeb\034\uffeb\035\uffeb\036\uffeb" +
    "\037\uffeb\040\uffeb\041\uffeb\042\uffeb\043\uffeb\044\uffeb\101" +
    "\uffeb\001\002\000\034\014\020\017\017\020\347\024\053" +
    "\027\044\030\035\031\056\035\050\037\023\041\027\042" +
    "\026\043\040\044\045\001\002\000\032\014\020\017\017" +
    "\024\053\027\044\030\035\031\056\035\050\037\023\041" +
    "\027\042\026\043\040\044\045\001\002\000\036\014\020" +
    "\017\017\021\352\022\353\024\053\027\044\030\035\031" +
    "\056\035\050\037\023\041\027\042\026\043\040\044\045" +
    "\001\002\000\010\021\362\022\363\023\361\001\002\000" +
    "\032\041\067\044\074\045\065\046\063\047\061\050\075" +
    "\051\062\053\072\070\164\075\064\076\066\077\070\001" +
    "\002\000\032\014\020\017\017\024\053\027\044\030\035" +
    "\031\056\035\050\037\023\041\027\042\026\043\040\044" +
    "\045\001\002\000\034\014\020\017\017\023\355\024\053" +
    "\027\044\030\035\031\056\035\050\037\023\041\027\042" +
    "\026\043\040\044\045\001\002\000\064\005\uffaa\006\uffaa" +
    "\007\uffaa\010\uffaa\013\uffaa\014\uffaa\017\uffaa\021\uffaa\022" +
    "\uffaa\023\uffaa\024\uffaa\026\uffaa\027\uffaa\030\uffaa\031\uffaa" +
    "\034\uffaa\035\uffaa\036\uffaa\037\uffaa\040\uffaa\041\uffaa\042" +
    "\uffaa\043\uffaa\044\uffaa\101\uffaa\001\002\000\004\020\357" +
    "\001\002\000\032\014\020\017\017\024\053\027\044\030" +
    "\035\031\056\035\050\037\023\041\027\042\026\043\040" +
    "\044\045\001\002\000\040\014\020\017\017\021\uffa8\022" +
    "\uffa8\023\uffa8\024\053\027\044\030\035\031\056\035\050" +
    "\037\023\041\027\042\026\043\040\044\045\001\002\000" +
    "\064\005\uffac\006\uffac\007\uffac\010\uffac\013\uffac\014\uffac" +
    "\017\uffac\021\uffac\022\uffac\023\uffac\024\uffac\026\uffac\027" +
    "\uffac\030\uffac\031\uffac\034\uffac\035\uffac\036\uffac\037\uffac" +
    "\040\uffac\041\uffac\042\uffac\043\uffac\044\uffac\101\uffac\001" +
    "\002\000\032\041\067\044\074\045\065\046\063\047\061" +
    "\050\075\051\062\053\072\070\164\075\064\076\066\077" +
    "\070\001\002\000\032\014\020\017\017\024\053\027\044" +
    "\030\035\031\056\035\050\037\023\041\027\042\026\043" +
    "\040\044\045\001\002\000\034\014\020\017\017\023\365" +
    "\024\053\027\044\030\035\031\056\035\050\037\023\041" +
    "\027\042\026\043\040\044\045\001\002\000\064\005\uffab" +
    "\006\uffab\007\uffab\010\uffab\013\uffab\014\uffab\017\uffab\021" +
    "\uffab\022\uffab\023\uffab\024\uffab\026\uffab\027\uffab\030\uffab" +
    "\031\uffab\034\uffab\035\uffab\036\uffab\037\uffab\040\uffab\041" +
    "\uffab\042\uffab\043\uffab\044\uffab\101\uffab\001\002\000\004" +
    "\020\367\001\002\000\032\014\020\017\017\024\053\027" +
    "\044\030\035\031\056\035\050\037\023\041\027\042\026" +
    "\043\040\044\045\001\002\000\040\014\020\017\017\021" +
    "\uffa9\022\uffa9\023\uffa9\024\053\027\044\030\035\031\056" +
    "\035\050\037\023\041\027\042\026\043\040\044\045\001" +
    "\002\000\034\014\020\017\017\023\372\024\053\027\044" +
    "\030\035\031\056\035\050\037\023\041\027\042\026\043" +
    "\040\044\045\001\002\000\064\005\uffad\006\uffad\007\uffad" +
    "\010\uffad\013\uffad\014\uffad\017\uffad\021\uffad\022\uffad\023" +
    "\uffad\024\uffad\026\uffad\027\uffad\030\uffad\031\uffad\034\uffad" +
    "\035\uffad\036\uffad\037\uffad\040\uffad\041\uffad\042\uffad\043" +
    "\uffad\044\uffad\101\uffad\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\371\000\014\002\004\003\011\033\003\034\007\035" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\046\004\027\005\030\006\035\011\054\012" +
    "\036\015\020\016\042\020\024\022\033\024\041\025\015" +
    "\026\040\027\031\030\051\031\050\032\023\041\045\042" +
    "\032\001\001\000\004\035\014\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\007\165\017\345" +
    "\037\070\040\164\001\001\000\004\005\323\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\004\027\005\030" +
    "\006\035\015\020\016\042\020\317\022\033\024\041\025" +
    "\015\026\040\027\031\030\051\031\050\001\001\000\002" +
    "\001\001\000\042\004\027\005\030\006\035\011\054\012" +
    "\036\015\113\016\042\022\033\024\041\025\015\026\040" +
    "\027\031\030\051\031\050\041\314\042\032\001\001\000" +
    "\006\007\312\037\070\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\274\037\070\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\004\027\005\030\006" +
    "\035\011\054\012\036\015\020\016\042\020\272\022\033" +
    "\024\041\025\015\026\040\027\031\030\051\031\050\042" +
    "\273\001\001\000\002\001\001\000\012\007\165\017\252" +
    "\037\070\040\164\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\007\230\037\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\007\072\037\070\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\131" +
    "\037\070\001\001\000\002\001\001\000\006\007\130\037" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\007\127\037\070\001\001\000\006\007" +
    "\126\037\070\001\001\000\006\007\125\037\070\001\001" +
    "\000\002\001\001\000\006\007\106\037\070\001\001\000" +
    "\006\007\105\037\070\001\001\000\006\007\104\037\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\007\115\037\070\001\001\000\034\004\027" +
    "\005\030\006\035\015\020\016\042\020\111\022\033\024" +
    "\041\025\015\026\040\027\031\030\051\031\050\001\001" +
    "\000\032\004\027\005\030\006\035\015\113\016\042\022" +
    "\033\024\041\025\015\026\040\027\031\030\051\031\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\004\027\005\030\006\035" +
    "\015\020\016\042\020\117\022\033\024\041\025\015\026" +
    "\040\027\031\030\051\031\050\001\001\000\032\004\027" +
    "\005\030\006\035\015\113\016\042\022\033\024\041\025" +
    "\015\026\040\027\031\030\051\031\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\007\123\037\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\007\137\036\135\037\070\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\142\037\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\146\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\004\027\005\030\006\035\015\020\016\042\020\151\022" +
    "\033\024\041\025\015\026\040\027\031\030\051\031\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\004" +
    "\027\005\030\006\035\015\113\016\042\022\033\024\041" +
    "\025\015\026\040\027\031\030\051\031\050\001\001\000" +
    "\012\007\165\017\221\037\070\040\164\001\001\000\002" +
    "\001\001\000\004\014\156\001\001\000\004\010\220\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\004\027" +
    "\005\030\006\035\015\020\016\042\020\161\022\033\024" +
    "\041\025\015\026\040\027\031\030\051\031\050\001\001" +
    "\000\032\004\027\005\030\006\035\015\113\016\042\022" +
    "\033\024\041\025\015\026\040\027\031\030\051\031\050" +
    "\001\001\000\012\007\165\017\166\037\070\040\164\001" +
    "\001\000\010\007\165\037\070\040\211\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\204\037\070\001\001" +
    "\000\006\007\203\037\070\001\001\000\006\007\202\037" +
    "\070\001\001\000\006\007\201\037\070\001\001\000\006" +
    "\007\200\037\070\001\001\000\006\007\177\037\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\007\165\037\070\040\210\001\001\000\010\007\165" +
    "\037\070\040\207\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\007\165\017\213\037\070" +
    "\040\164\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\217\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\007\165\017\225\037\070\040\164" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\232\001\001\000\002" +
    "\001\001\000\006\007\234\037\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\004\027\005\030\006\035" +
    "\015\020\016\042\020\237\022\033\024\041\025\015\026" +
    "\040\027\031\030\051\031\050\001\001\000\032\004\027" +
    "\005\030\006\035\015\113\016\042\022\033\024\041\025" +
    "\015\026\040\027\031\030\051\031\050\001\001\000\002" +
    "\001\001\000\006\007\246\037\070\001\001\000\002\001" +
    "\001\000\034\004\027\005\030\006\035\015\020\016\042" +
    "\020\244\022\033\024\041\025\015\026\040\027\031\030" +
    "\051\031\050\001\001\000\032\004\027\005\030\006\035" +
    "\015\113\016\042\022\033\024\041\025\015\026\040\027" +
    "\031\030\051\031\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\004\027\005\030\006" +
    "\035\015\020\016\042\020\251\022\033\024\041\025\015" +
    "\026\040\027\031\030\051\031\050\001\001\000\032\004" +
    "\027\005\030\006\035\015\113\016\042\022\033\024\041" +
    "\025\015\026\040\027\031\030\051\031\050\001\001\000" +
    "\002\001\001\000\034\004\027\005\030\006\035\015\020" +
    "\016\042\020\254\022\033\024\041\025\015\026\040\027" +
    "\031\030\051\031\050\001\001\000\032\004\027\005\030" +
    "\006\035\015\113\016\042\022\033\024\041\025\015\026" +
    "\040\027\031\030\051\031\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\004\027\005\030\006\035\015" +
    "\020\016\042\020\261\022\033\024\041\025\015\026\040" +
    "\027\031\030\051\031\050\001\001\000\002\001\001\000" +
    "\032\004\027\005\030\006\035\015\113\016\042\022\033" +
    "\024\041\025\015\026\040\027\031\030\051\031\050\001" +
    "\001\000\002\001\001\000\004\014\264\001\001\000\002" +
    "\001\001\000\034\004\027\005\030\006\035\015\020\016" +
    "\042\020\267\022\033\024\041\025\015\026\040\027\031" +
    "\030\051\031\050\001\001\000\002\001\001\000\032\004" +
    "\027\005\030\006\035\015\113\016\042\022\033\024\041" +
    "\025\015\026\040\027\031\030\051\031\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\004\027\005\030" +
    "\006\035\015\113\016\042\022\033\024\041\025\015\026" +
    "\040\027\031\030\051\031\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\301\037" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\007" +
    "\137\036\305\037\070\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\011\054" +
    "\012\036\042\273\001\001\000\002\001\001\000\012\007" +
    "\165\017\322\037\070\040\164\001\001\000\032\004\027" +
    "\005\030\006\035\015\113\016\042\022\033\024\041\025" +
    "\015\026\040\027\031\030\051\031\050\001\001\000\012" +
    "\007\165\017\321\037\070\040\164\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\007\332\037\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\007\335\037\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\340" +
    "\037\070\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\007\343\037\070\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\004\027\005\030\006\035\015\020\016" +
    "\042\020\347\022\033\024\041\025\015\026\040\027\031" +
    "\030\051\031\050\001\001\000\034\004\027\005\030\006" +
    "\035\015\020\016\042\020\370\022\033\024\041\025\015" +
    "\026\040\027\031\030\051\031\050\001\001\000\034\004" +
    "\027\005\030\006\035\015\113\016\042\021\350\022\033" +
    "\024\041\025\015\026\040\027\031\030\051\031\050\001" +
    "\001\000\002\001\001\000\012\007\165\017\355\037\070" +
    "\040\164\001\001\000\034\004\027\005\030\006\035\015" +
    "\020\016\042\020\353\022\033\024\041\025\015\026\040" +
    "\027\031\030\051\031\050\001\001\000\032\004\027\005" +
    "\030\006\035\015\113\016\042\022\033\024\041\025\015" +
    "\026\040\027\031\030\051\031\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\004\027\005\030\006\035" +
    "\015\020\016\042\020\357\022\033\024\041\025\015\026" +
    "\040\027\031\030\051\031\050\001\001\000\032\004\027" +
    "\005\030\006\035\015\113\016\042\022\033\024\041\025" +
    "\015\026\040\027\031\030\051\031\050\001\001\000\002" +
    "\001\001\000\012\007\165\017\365\037\070\040\164\001" +
    "\001\000\034\004\027\005\030\006\035\015\020\016\042" +
    "\020\363\022\033\024\041\025\015\026\040\027\031\030" +
    "\051\031\050\001\001\000\032\004\027\005\030\006\035" +
    "\015\113\016\042\022\033\024\041\025\015\026\040\027" +
    "\031\030\051\031\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\004\027\005\030\006\035\015\020\016" +
    "\042\020\367\022\033\024\041\025\015\026\040\027\031" +
    "\030\051\031\050\001\001\000\032\004\027\005\030\006" +
    "\035\015\113\016\042\022\033\024\041\025\015\026\040" +
    "\027\031\030\051\031\050\001\001\000\032\004\027\005" +
    "\030\006\035\015\113\016\042\022\033\024\041\025\015" +
    "\026\040\027\031\030\051\031\050\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /**
    *Listas
    **/
    public LinkedList<ErrorLenguaje> ErroresSintacticos = new LinkedList<ErrorLenguaje>();
    public LinkedList<Instruccion> Golang = new LinkedList<Instruccion>();
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){
        
        ErroresSintacticos.add(new ErrorLenguaje("Sintáctico","Carácter no esperado: "+s.value.toString(),s.right,s.left));

        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        ErroresSintacticos.add(new ErrorLenguaje("Sintáctico","Carácter no esperado: "+s.value.toString(),s.right,s.left));
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= MAIN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= COMENTARIOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCIONES ::= error 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // MAIN ::= RINICIO ALGORITMO RFIN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // MAIN ::= RINICIO RFIN 
            {
              Object RESULT =null;
		
                                                                                                            Main.importacion_print = false;
                                                                                                            Main.importacion_potencia = false;
                                                                                                            RESULT=new Main();
                                                                                                            Golang.add((Main) RESULT);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MAIN",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // COMENTARIOS ::= COMENTARIOS COMENTARIO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COMENTARIOS",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // COMENTARIOS ::= COMENTARIO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COMENTARIOS",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // COMENTARIO ::= COMENTARIOL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT=new Comentarios(Comentarios.Tipo_Comentario.COMENTARIO_UNILINEA, a);
                                                                                                            Golang.add((Comentarios) RESULT);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COMENTARIO",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // COMENTARIO ::= COMENTARIOML 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT=new Comentarios(Comentarios.Tipo_Comentario.COMENTARIO_MILTILINEA, a);
                                                                                                            Golang.add((Comentarios) RESULT);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COMENTARIO",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // GLOBAL ::= GLOBAL ALGORITMO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("GLOBAL",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // GLOBAL ::= ALGORITMO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("GLOBAL",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ALGORITMO ::= FUNCYMET 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            Main vacio = new Main();
                                                                                                            Golang.add(vacio);
                                                                                                            RESULT=(LinkedList) a;
                                                                                                            for (int i = 0; i < a.size(); i++) {
                                                                                                                Golang.add(a.get(i));
                                                                                                            }
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ALGORITMO",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ALGORITMO ::= LOCAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT=new Main((LinkedList) a);
                                                                                                            Golang.add((Main) RESULT);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ALGORITMO",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ALGORITMO ::= LOCAL FUNCYMET 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            Main lleno = new Main((LinkedList) a);
                                                                                                            Golang.add(lleno);
                                                                                                            RESULT=(LinkedList) b;
                                                                                                            for (int i = 0; i < b.size(); i++) {
                                                                                                                Golang.add(b.get(i));
                                                                                                            }
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ALGORITMO",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ALGORITMO ::= FUNCYMET LOCAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            Main lleno = new Main((LinkedList) b);
                                                                                                            Golang.add(lleno);
                                                                                                            RESULT=(LinkedList) a;
                                                                                                            for (int i = 0; i < a.size(); i++) {
                                                                                                                Golang.add(a.get(i));
                                                                                                            }
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ALGORITMO",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FUNCYMET ::= FUNCYMET FYM 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT = new LinkedList<Instruccion>();
                                                                                                            for (int i = 0; i < a.size(); i++) {
                                                                                                                RESULT.add(a.get(i));
                                                                                                            }
                                                                                                            RESULT.add((Instruccion) b);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCYMET",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FUNCYMET ::= FYM 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT= new LinkedList<Instruccion>();
                                                                                                            RESULT.add((Instruccion) a);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCYMET",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FYM ::= FUNCION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT = (Funciones) a;
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FYM",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // FYM ::= METODO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT = (Metodo) a;
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FYM",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION ::= RINGRESAR LISTA_IDENTIFICADORES RCOMO RNUMERO RCONVALOR EXPRESION PTCOMA 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		LinkedList<Instruccion> l = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		  
                                                                                                            RESULT=new Declaracion(Declaracion.Tipo_Variable.RNUMERO,(Operacion)e,(LinkedList)l);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION ::= RINGRESAR LISTA_IDENTIFICADORES RCOMO RCADENA RCONVALOR EXPRESION PTCOMA 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		LinkedList<Instruccion> l = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		  
                                                                                                            RESULT=new Declaracion(Declaracion.Tipo_Variable.RCADENA,(Operacion)e,(LinkedList)l);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= RINGRESAR LISTA_IDENTIFICADORES RCOMO RBOOLEAN RCONVALOR EXPRESION PTCOMA 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		LinkedList<Instruccion> l = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		  
                                                                                                            RESULT=new Declaracion(Declaracion.Tipo_Variable.RBOOLEAN,(Operacion)e,(LinkedList)l);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= RINGRESAR LISTA_IDENTIFICADORES RCOMO RCARACTER RCONVALOR EXPRESION PTCOMA 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		LinkedList<Instruccion> l = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		  
                                                                                                            RESULT=new Declaracion(Declaracion.Tipo_Variable.RCARACTER,(Operacion)e,(LinkedList)l);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LISTA_IDENTIFICADORES ::= LISTA_IDENTIFICADORES COMA IDENTIFICADOR 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT = new LinkedList<>();
                                                                                                            for (int i = 0; i < a.size(); i++) {
                                                                                                                RESULT.add(a.get(i));
                                                                                                            }
                                                                                                            RESULT.add(new Operacion(b,Operacion.Tipo_operacion.IDENTIFICADOR));
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_IDENTIFICADORES",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LISTA_IDENTIFICADORES ::= IDENTIFICADOR 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT= new LinkedList<Instruccion>();
                                                                                                            RESULT.add(new Operacion(a,Operacion.Tipo_operacion.IDENTIFICADOR));
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_IDENTIFICADORES",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXPRESION ::= ENTERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT=new Operacion(a,Operacion.Tipo_operacion.NUMERO);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EXPRESION ::= DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT=new Operacion(a,Operacion.Tipo_operacion.DECIMAL);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXPRESION ::= CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT=new Operacion(a,Operacion.Tipo_operacion.CADENA);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXPRESION ::= CARACTER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT=new Operacion(a,Operacion.Tipo_operacion.CARACTER);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXPRESION ::= CARASCCI 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT=new Operacion(a,Operacion.Tipo_operacion.ASCCI);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXPRESION ::= RVERDADERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT=new Operacion(a,Operacion.Tipo_operacion.VERDADERO);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXPRESION ::= RFALSO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT=new Operacion(a,Operacion.Tipo_operacion.FALSO);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXPRESION ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT=new Operacion(a,Operacion.Tipo_operacion.IDENTIFICADOR);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXPRESION ::= RESTA EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT=new Operacion((Instruccion)a,Operacion.Tipo_operacion.NEGATIVO);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXPRESION ::= PARIZQ EXPRESION PARDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		  
                                                                                                            RESULT=new Operacion((Instruccion)a,Operacion.Tipo_operacion.AGRUPACION);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXPRESION ::= EXPRESION SUMA EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT=new Operacion((Instruccion)a,(Operacion)b,Operacion.Tipo_operacion.SUMA);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXPRESION ::= EXPRESION RESTA EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT=new Operacion((Instruccion)a,(Operacion)b,Operacion.Tipo_operacion.RESTA);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXPRESION ::= EXPRESION MULTIPLICACION EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT=new Operacion((Instruccion)a,(Operacion)b,Operacion.Tipo_operacion.MULTIPLICACION);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXPRESION ::= EXPRESION DIVIDIR EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT=new Operacion((Instruccion)a,(Operacion)b,Operacion.Tipo_operacion.DIVISION);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPRESION ::= EXPRESION POTENCIA CORIZQ EXPRESION CORDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		  
                                                                                                            Main.importacion_potencia = true;
                                                                                                            RESULT=new Operacion((Instruccion)a,(Instruccion)b,Operacion.Tipo_operacion.POTENCIA);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPRESION ::= EXPRESION MODU EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT=new Operacion((Instruccion)a,(Instruccion)b,Operacion.Tipo_operacion.MODULAR);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPRESION ::= EJECUTAR_2 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT=(Instruccion) a;
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // RELACIONAL ::= EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT=(Operacion) a;
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RELACIONAL",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // RELACIONAL ::= EXPRESION RMAYOR EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT=new Operacion((Instruccion)a,(Instruccion)b,Operacion.Tipo_operacion.MAYORQUE);;
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RELACIONAL",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // RELACIONAL ::= EXPRESION RMENOR EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT=new Operacion((Instruccion)a,(Instruccion)b,Operacion.Tipo_operacion.MENORQUE);;
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RELACIONAL",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // RELACIONAL ::= EXPRESION RMAYOROIGUAL EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT=new Operacion((Instruccion)a,(Instruccion)b,Operacion.Tipo_operacion.MAYOROIGUAL);;
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RELACIONAL",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // RELACIONAL ::= EXPRESION RMENOROIGUAL EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT=new Operacion((Instruccion)a,(Instruccion)b,Operacion.Tipo_operacion.MENOROIGUAL);;
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RELACIONAL",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // RELACIONAL ::= EXPRESION RESIGUAL EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT=new Operacion((Instruccion)a,(Instruccion)b,Operacion.Tipo_operacion.IGUAL);;
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RELACIONAL",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // RELACIONAL ::= EXPRESION RESDIFERENTE EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT=new Operacion((Instruccion)a,(Instruccion)b,Operacion.Tipo_operacion.DIFERENTE);;
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RELACIONAL",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CONDICION ::= RELACIONAL ROR RELACIONAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT=new Operacion((Instruccion)a,(Instruccion)b,Operacion.Tipo_operacion.OR);;
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CONDICION ::= RELACIONAL RAND RELACIONAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT=new Operacion((Instruccion)a,(Instruccion)b,Operacion.Tipo_operacion.AND);;
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CONDICION ::= RNOT RELACIONAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT=new Operacion((Instruccion)a,Operacion.Tipo_operacion.MENOROIGUAL);;
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CONDICION ::= RELACIONAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT=(Operacion)a;
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ASIGNACION ::= LISTA_IDENTIFICADORES FLECHA EXPRESION PTCOMA 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<Instruccion> l = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		  
                                                                                                            RESULT=new Asignacion((Instruccion)e,(LinkedList)l);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // FUNCION ::= RFUNCION IDENTIFICADOR TIPODATO LOCAL RRETORNAR CONDICION PTCOMA RFINFUNCION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		  
                                                                                                            RESULT=new Funciones(new Operacion(a,Operacion.Tipo_operacion.IDENTIFICADOR), (Parametro.Tipo_Variable) b, new Retornar((Operacion) d) , (LinkedList) c);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // FUNCION ::= RFUNCION IDENTIFICADOR TIPODATO RRETORNAR CONDICION PTCOMA RFINFUNCION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		  
                                                                                                            RESULT=new Funciones(new Operacion(a,Operacion.Tipo_operacion.IDENTIFICADOR), (Parametro.Tipo_Variable) b, new Retornar((Operacion) c));
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // FUNCION ::= RFUNCION IDENTIFICADOR TIPODATO RCONPARAMETROS PARIZQ LISTA_PARAMETROS PARDER LOCAL RRETORNAR CONDICION PTCOMA RFINFUNCION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		LinkedList<Instruccion> l = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		  
                                                                                                            RESULT=new Funciones(new Operacion(a,Operacion.Tipo_operacion.IDENTIFICADOR), (Parametro.Tipo_Variable) b,(LinkedList) l, (LinkedList) c, new Retornar((Operacion) d));
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // FUNCION ::= RFUNCION IDENTIFICADOR TIPODATO RCONPARAMETROS PARIZQ LISTA_PARAMETROS PARDER RRETORNAR CONDICION PTCOMA RFINFUNCION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		LinkedList<Instruccion> l = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		  
                                                                                                            RESULT=new Funciones(new Operacion(a,Operacion.Tipo_operacion.IDENTIFICADOR), (Parametro.Tipo_Variable) b,(LinkedList) l, new Retornar((Operacion) c));
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // METODO ::= RMETODO IDENTIFICADOR LOCAL RFINMETODO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		  
                                                                                                            RESULT=new Metodo((LinkedList) b ,new Operacion(a,Operacion.Tipo_operacion.IDENTIFICADOR));
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // METODO ::= RMETODO IDENTIFICADOR RFINMETODO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		  
                                                                                                            RESULT=new Metodo(new Operacion(a,Operacion.Tipo_operacion.IDENTIFICADOR));
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // METODO ::= RMETODO IDENTIFICADOR RCONPARAMETROS PARIZQ LISTA_PARAMETROS PARDER LOCAL RFINMETODO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<Instruccion> l = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		  
                                                                                                            RESULT=new Metodo(new Operacion(a,Operacion.Tipo_operacion.IDENTIFICADOR),(LinkedList) l, (LinkedList) b);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // METODO ::= RMETODO IDENTIFICADOR RCONPARAMETROS PARIZQ LISTA_PARAMETROS PARDER RFINMETODO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Instruccion> l = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		  
                                                                                                            RESULT=new Metodo(new Operacion(a,Operacion.Tipo_operacion.IDENTIFICADOR),(LinkedList) l);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // LISTA_PARAMETROS ::= LISTA_PARAMETROS COMA IDENTIFICADOR TIPODATO 
            {
              LinkedList<Instruccion> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<Instruccion> l = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT = new LinkedList<>();
                                                                                                            for (int i = 0; i < l.size(); i++) {
                                                                                                                RESULT.add(l.get(i));
                                                                                                            }
                                                                                                            RESULT.add(new Parametro(new Operacion(a,Operacion.Tipo_operacion.IDENTIFICADOR),(Parametro.Tipo_Variable) b));
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // LISTA_PARAMETROS ::= IDENTIFICADOR TIPODATO 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT= new LinkedList<Instruccion>();
                                                                                                            RESULT.add(new Parametro(new Operacion(a,Operacion.Tipo_operacion.IDENTIFICADOR),(Parametro.Tipo_Variable) b));
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // TIPODATO ::= RNUMERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT=Parametro.Tipo_Variable.NUMERO;
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // TIPODATO ::= RCADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT=Parametro.Tipo_Variable.CADENA;
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // TIPODATO ::= RBOOLEAN 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT=Parametro.Tipo_Variable.BOOLEAN;
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // TIPODATO ::= RCARACTER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT=Parametro.Tipo_Variable.CARACTER;
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // LOCAL ::= LOCAL ENTORNO_LOCAL 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT = new LinkedList<>();
                                                                                                            for (int i = 0; i < a.size(); i++) {
                                                                                                                RESULT.add(a.get(i));
                                                                                                            }
                                                                                                            RESULT.add((Instruccion) b);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LOCAL",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // LOCAL ::= ENTORNO_LOCAL 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT= new LinkedList<Instruccion>();
                                                                                                            RESULT.add((Instruccion) a);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LOCAL",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ENTORNO_LOCAL ::= ASIGNACION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT= (Instruccion) a;
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ENTORNO_LOCAL",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ENTORNO_LOCAL ::= DECLARACION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT= (Instruccion) a;
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ENTORNO_LOCAL",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ENTORNO_LOCAL ::= CONDICIONAL_SI 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT= (Instruccion) a;
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ENTORNO_LOCAL",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ENTORNO_LOCAL ::= SELECCION_MULTIPLE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT= (Instruccion) a;
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ENTORNO_LOCAL",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ENTORNO_LOCAL ::= CICLO_PARA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT= (Instruccion) a;
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ENTORNO_LOCAL",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ENTORNO_LOCAL ::= CICLO_MIENTRAS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT= (Instruccion) a;
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ENTORNO_LOCAL",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ENTORNO_LOCAL ::= CICLO_REPETIR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT= (Instruccion) a;
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ENTORNO_LOCAL",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ENTORNO_LOCAL ::= EJECUTAR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT= (Instruccion) a;
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ENTORNO_LOCAL",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ENTORNO_LOCAL ::= IMPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT= (Instruccion) a;
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ENTORNO_LOCAL",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ENTORNO_LOCAL ::= IMPRESION_CONSALTO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT= (Instruccion) a;
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ENTORNO_LOCAL",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ENTORNO_LOCAL ::= COMENTARIOL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT=new Comentarios(Comentarios.Tipo_Comentario.COMENTARIO_UNILINEA, a);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ENTORNO_LOCAL",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ENTORNO_LOCAL ::= COMENTARIOML 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT=new Comentarios(Comentarios.Tipo_Comentario.COMENTARIO_MILTILINEA, a);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ENTORNO_LOCAL",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CONDICIONAL_SI ::= RSI CONDICION RENTONCES LOCAL RFINSI 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		  
                                                                                                            RESULT= new Si((Instruccion) a, (LinkedList) b);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_SI",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CONDICIONAL_SI ::= RSI CONDICION LOCAL LISTA_OSI RFINSI 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Si> l = (LinkedList<Si>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		  
                                                                                                            RESULT= new Si((LinkedList) b,(Operacion) a, (LinkedList) l);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_SI",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CONDICIONAL_SI ::= RSI CONDICION LOCAL LISTA_OSI RDELOCONTRARIO LOCAL RFINSI 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<Si> l = (LinkedList<Si>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		  
                                                                                                            RESULT= new Si((Instruccion) a,(LinkedList) b, (LinkedList) l, (LinkedList) c);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_SI",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CONDICIONAL_SI ::= RSI CONDICION LOCAL RDELOCONTRARIO LOCAL RFINSI 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		  
                                                                                                            RESULT= new Si((Instruccion) a,(LinkedList) b, (LinkedList) c);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_SI",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // LISTA_OSI ::= LISTA_OSI ROSI CONDICION RENTONCES LOCAL 
            {
              LinkedList<Si> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<Si> l = (LinkedList<Si>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT = new LinkedList<>();
                                                                                                            for (int i = 0; i < l.size(); i++) {
                                                                                                                RESULT.add(l.get(i));
                                                                                                            }
                                                                                                            RESULT.add(new Si((Instruccion) c, (LinkedList) d));
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_OSI",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // LISTA_OSI ::= ROSI CONDICION RENTONCES LOCAL 
            {
              LinkedList<Si> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> f = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT= new LinkedList<Si>();
                                                                                                            RESULT.add(new Si((Instruccion) e, (LinkedList) f));
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_OSI",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // SELECCION_MULTIPLE ::= RSEGUN EXPRESION RHACER LISTA_VALORENTONCES RFINSEGUN 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> l = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		  
                                                                                                            RESULT= new SeleccionMultiple((Instruccion)a, (LinkedList) l);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SELECCION_MULTIPLE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // SELECCION_MULTIPLE ::= RSEGUN EXPRESION RHACER LISTA_VALORENTONCES RDELOCONTRARIO RENTONCES LOCAL RFINSEGUN 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<Instruccion> l = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		  
                                                                                                            RESULT = new SeleccionMultiple((Instruccion)a, (LinkedList)l, (LinkedList) b);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SELECCION_MULTIPLE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // LISTA_VALORENTONCES ::= LISTA_VALORENTONCES INTABRE EXPRESION INTCIERRA RENTONCES LOCAL 
            {
              LinkedList<Instruccion> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		LinkedList<Instruccion> l = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT= new LinkedList<>();
                                                                                                            for (int i = 0; i < l.size(); i++) {
                                                                                                                RESULT.add(l.get(i));
                                                                                                            }
                                                                                                            RESULT.add(new Case((Instruccion) e, (LinkedList) a));
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_VALORENTONCES",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // LISTA_VALORENTONCES ::= INTABRE EXPRESION INTCIERRA RENTONCES LOCAL 
            {
              LinkedList<Instruccion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT= new LinkedList<>();
                                                                                                            RESULT.add(new Case((Instruccion) e, (LinkedList) a));
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_VALORENTONCES",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // CICLO_PARA ::= RPARA IDENTIFICADOR FLECHA EXPRESION RHASTA EXPRESION RHACER LOCAL RFINPARA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		  
                                                                                                            RESULT= new Para(new Operacion(a,Operacion.Tipo_operacion.IDENTIFICADOR), (Instruccion) b, (Instruccion) c, (LinkedList) d);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_PARA",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // CICLO_PARA ::= RPARA IDENTIFICADOR FLECHA EXPRESION RHASTA EXPRESION RHACER RFINPARA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		  
                                                                                                            RESULT= new Para(new Operacion(a,Operacion.Tipo_operacion.IDENTIFICADOR), (Instruccion) b, (Instruccion) c);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_PARA",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // CICLO_PARA ::= RPARA IDENTIFICADOR FLECHA EXPRESION RHASTA EXPRESION RCONINCREMENTAL EXPRESION RHACER LOCAL RFINPARA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> e = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		  
                                                                                                            RESULT= new Para(new Operacion(a,Operacion.Tipo_operacion.IDENTIFICADOR), (Instruccion) b, (Instruccion) c, (Instruccion) d,(LinkedList) e);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_PARA",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // CICLO_PARA ::= RPARA IDENTIFICADOR FLECHA EXPRESION RHASTA EXPRESION RCONINCREMENTAL EXPRESION RHACER RFINPARA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		  
                                                                                                            RESULT= new Para(new Operacion(a,Operacion.Tipo_operacion.IDENTIFICADOR), (Instruccion) b, (Instruccion) c, (Instruccion) d);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_PARA",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // CICLO_MIENTRAS ::= RMIENTRAS CONDICION RHACER LOCAL RFINMIENTRAS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		  
                                                                                                            RESULT= new Mientras((Instruccion) a,(LinkedList) b);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_MIENTRAS",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // CICLO_MIENTRAS ::= RMIENTRAS CONDICION RHACER RFINMIENTRAS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		  
                                                                                                            RESULT= new Mientras((Instruccion) a);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_MIENTRAS",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // CICLO_REPETIR ::= RREPETIR LOCAL RHASTAQUE CONDICION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT= new Repetir((Instruccion) b,(LinkedList) a);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_REPETIR",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // CICLO_REPETIR ::= RREPETIR RHASTAQUE CONDICION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT= new Repetir((Instruccion) a);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_REPETIR",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // EJECUTAR ::= REJECUTAR IDENTIFICADOR PARIZQ PARDER PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		  
                                                                                                            RESULT= new Ejecutar(new Operacion(a,Operacion.Tipo_operacion.IDENTIFICADOR),Ejecutar.Tipo_Variable.EJECUTAR);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EJECUTAR",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // EJECUTAR ::= REJECUTAR IDENTIFICADOR PARIZQ INSERCION_PARAMETROS PARDER PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Instruccion> l = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		  
                                                                                                            RESULT= new Ejecutar(new Operacion(a,Operacion.Tipo_operacion.IDENTIFICADOR),Ejecutar.Tipo_Variable.EJECUTAR,(LinkedList) l);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EJECUTAR",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // EJECUTAR_2 ::= REJECUTAR IDENTIFICADOR PARIZQ PARDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		  
                                                                                                            RESULT= new Ejecutar(new Operacion(a,Operacion.Tipo_operacion.IDENTIFICADOR),Ejecutar.Tipo_Variable.EXPRESION);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EJECUTAR_2",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // EJECUTAR_2 ::= REJECUTAR IDENTIFICADOR PARIZQ INSERCION_PARAMETROS PARDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> l = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		  
                                                                                                            RESULT= new Ejecutar(new Operacion(a,Operacion.Tipo_operacion.IDENTIFICADOR),Ejecutar.Tipo_Variable.EXPRESION,(LinkedList) l);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EJECUTAR_2",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // INSERCION_PARAMETROS ::= INSERCION_PARAMETROS COMA EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Instruccion> l = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT = new LinkedList<>();
                                                                                                            for (int i = 0; i < l.size(); i++) {
                                                                                                                RESULT.add(l.get(i));
                                                                                                            }
                                                                                                            RESULT.add((Instruccion) e);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSERCION_PARAMETROS",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // INSERCION_PARAMETROS ::= EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                            RESULT= new LinkedList<>();
                                                                                                            RESULT.add((Instruccion) e);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSERCION_PARAMETROS",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // IMPRESION ::= RIMPRIMIR EXPRESION PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		  
                                                                                                            Main.importacion_print = true;
                                                                                                            RESULT= new Impresion(Impresion.Tipo_Impresion.SIN_SALTO,(Instruccion) a);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPRESION",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // IMPRESION_CONSALTO ::= RIMPRIMIRNL EXPRESION PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		  
                                                                                                            Main.importacion_print = true;
                                                                                                            RESULT= new Impresion(Impresion.Tipo_Impresion.CON_SALTO,(Instruccion) a);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPRESION_CONSALTO",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
