/* The following code was generated by JFlex 1.4.1 on 6/9/22 2:23 */

package Colores;
import java.io.*;   
import javax.swing.text.Segment;   
   
import org.fife.ui.rsyntaxtextarea.*;   
   

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 6/9/22 2:23 from the specification file
 * <tt>Color.jflex</tt>
 */
public class Colores extends AbstractJFlexCTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int MLC = 1;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\0\1\10\2\0\1\0\22\0\1\52\1\0\1\4\1\0"+
    "\1\15\2\0\1\6\1\30\1\30\1\12\1\57\1\30\1\60\1\3"+
    "\1\11\1\23\1\24\1\25\1\2\1\26\1\20\1\17\2\21\1\22"+
    "\1\0\1\30\2\0\1\61\1\30\1\0\1\36\1\55\1\37\1\46"+
    "\1\34\1\45\1\32\1\50\1\31\1\54\1\1\1\43\1\41\1\7"+
    "\1\40\1\51\1\53\1\33\1\35\1\44\1\47\1\42\2\1\1\56"+
    "\1\1\1\30\1\5\1\30\1\0\1\13\1\0\1\36\1\55\1\37"+
    "\1\46\1\34\1\45\1\32\1\50\1\31\1\54\1\1\1\43\1\41"+
    "\1\7\1\40\1\51\1\53\1\33\1\35\1\44\1\47\1\42\2\1"+
    "\1\56\1\1\1\16\1\0\1\27\63\0\1\14\15\0\1\30\2\0"+
    "\1\30\1\14\u1f54\0\1\14\udfe7\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\3\1\1\3\2\4\1\1\1\5"+
    "\16\1\1\4\1\6\2\0\1\7\5\0\1\10\10\0"+
    "\1\11\22\0\1\2\1\12\2\0\1\10\1\0\1\13"+
    "\23\0\1\14\16\0\1\15\56\0\1\4\6\0\1\16"+
    "\2\0\1\11\2\0\1\17\1\14\41\0\1\11\32\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[227];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\372\0\u012c\0\144"+
    "\0\u015e\0\144\0\u0190\0\144\0\u01c2\0\u01f4\0\u0226\0\u0258"+
    "\0\u028a\0\u02bc\0\u02ee\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8"+
    "\0\u041a\0\u044c\0\u047e\0\144\0\u04b0\0\310\0\144\0\u04e2"+
    "\0\u0514\0\u0546\0\u0578\0\u05aa\0\u05dc\0\u060e\0\u0640\0\u0672"+
    "\0\u06a4\0\u06d6\0\u0708\0\u073a\0\u076c\0\144\0\u079e\0\u07d0"+
    "\0\u0802\0\u0834\0\u0866\0\u0898\0\u08ca\0\u08fc\0\u092e\0\u0960"+
    "\0\u0992\0\u09c4\0\u09f6\0\u0a28\0\u0a5a\0\u0a8c\0\u0abe\0\u0af0"+
    "\0\u04b0\0\144\0\u0b22\0\u0b54\0\u0b86\0\u0bb8\0\144\0\u0bea"+
    "\0\u0c1c\0\u0c4e\0\u0c80\0\u0cb2\0\u0ce4\0\u0d16\0\u0d48\0\u0d7a"+
    "\0\u0dac\0\u0dde\0\u0e10\0\u0e42\0\u0e74\0\u0ea6\0\u0ed8\0\u0f0a"+
    "\0\u0f3c\0\u0f6e\0\u0fa0\0\u0fd2\0\u1004\0\u1036\0\u1068\0\u109a"+
    "\0\u10cc\0\u10fe\0\u1130\0\u1162\0\u1194\0\u11c6\0\u11f8\0\u122a"+
    "\0\u125c\0\144\0\u128e\0\u12c0\0\u12f2\0\u1324\0\u1356\0\u1388"+
    "\0\u13ba\0\u13ec\0\u141e\0\u1450\0\u1482\0\u14b4\0\u14e6\0\u1518"+
    "\0\u154a\0\u157c\0\u15ae\0\u15e0\0\u1612\0\u1644\0\u1676\0\u16a8"+
    "\0\u16da\0\u170c\0\u173e\0\u1770\0\u17a2\0\u17d4\0\u1806\0\u1838"+
    "\0\u186a\0\u189c\0\u18ce\0\u1900\0\u1932\0\u1964\0\u1996\0\u19c8"+
    "\0\u19fa\0\u1a2c\0\u1a5e\0\u1a90\0\u1ac2\0\u1af4\0\u1b26\0\u1b58"+
    "\0\u1b8a\0\u1bbc\0\u1bee\0\u0258\0\u1c20\0\u1c52\0\u1c84\0\144"+
    "\0\u1cb6\0\u1ce8\0\u1d1a\0\u1d4c\0\u1d7e\0\144\0\144\0\u1db0"+
    "\0\u1de2\0\u1e14\0\u1e46\0\u1e78\0\u1eaa\0\u1edc\0\u1f0e\0\u1f40"+
    "\0\u1f72\0\u1fa4\0\u1fd6\0\u2008\0\u203a\0\u206c\0\u209e\0\u20d0"+
    "\0\u2102\0\u2134\0\u2166\0\u2198\0\u21ca\0\u21fc\0\u222e\0\u2260"+
    "\0\u2292\0\u22c4\0\u22f6\0\u2328\0\u235a\0\u238c\0\u23be\0\u23f0"+
    "\0\u2422\0\u2454\0\u2486\0\u24b8\0\u24ea\0\u251c\0\u254e\0\u2580"+
    "\0\u25b2\0\u25e4\0\u2616\0\u2648\0\u267a\0\u26ac\0\u26de\0\u2710"+
    "\0\u2742\0\u2774\0\u27a6\0\u27d8\0\u280a\0\u283c\0\u286e\0\u28a0"+
    "\0\u28d2\0\u2904\0\u2936";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[227];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\3\1\4\1\3\1\5\1\3\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\3\3\10\4\1\3\1\14\1\15"+
    "\1\3\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\2\3\1\26\1\27\1\3\1\30\1\31\3\3"+
    "\1\32\1\3\1\12\1\33\1\3\10\0\1\34\135\0"+
    "\1\4\1\35\13\0\10\4\33\0\4\36\1\37\1\40"+
    "\2\36\1\0\51\36\1\0\1\41\5\0\1\41\4\0"+
    "\1\41\1\42\13\0\21\41\1\0\4\41\43\0\1\43"+
    "\6\0\1\44\23\0\1\45\1\46\50\0\2\47\4\0"+
    "\1\47\7\0\10\47\2\0\21\47\1\0\4\47\12\0"+
    "\1\50\31\0\1\51\54\0\1\52\34\0\1\53\25\0"+
    "\1\54\16\0\1\55\36\0\1\56\2\0\1\57\34\0"+
    "\1\60\110\0\1\61\1\0\1\62\34\0\1\63\17\0"+
    "\1\12\57\0\1\64\2\0\1\65\1\0\1\66\1\0"+
    "\1\67\55\0\1\70\56\0\1\71\4\0\1\72\10\0"+
    "\1\73\46\0\1\74\63\0\1\75\61\0\1\76\1\0"+
    "\1\77\61\0\1\100\102\0\1\12\2\0\1\101\14\0"+
    "\10\101\37\0\1\36\1\0\2\36\60\0\1\102\71\0"+
    "\1\103\107\0\1\12\56\0\1\104\20\0\10\45\1\105"+
    "\51\45\11\46\1\0\1\106\47\46\1\0\2\47\4\0"+
    "\1\47\3\0\1\107\3\0\10\47\2\0\21\47\1\0"+
    "\4\47\34\0\1\110\1\111\100\0\1\112\54\0\1\113"+
    "\4\0\1\114\54\0\1\115\30\0\1\116\102\0\1\117"+
    "\57\0\1\120\75\0\1\12\46\0\1\121\12\0\1\122"+
    "\22\0\1\123\31\0\1\124\55\0\1\125\60\0\1\126"+
    "\34\0\1\127\34\0\1\130\73\0\1\127\51\0\1\131"+
    "\46\0\1\132\35\0\1\133\115\0\1\134\25\0\1\135"+
    "\65\0\1\136\103\0\1\137\1\0\1\140\55\0\1\141"+
    "\72\0\1\142\55\0\1\143\23\0\1\144\14\0\1\145"+
    "\1\0\1\146\1\147\1\0\1\150\71\0\1\151\35\0"+
    "\1\105\62\0\1\152\107\0\1\153\55\0\1\154\61\0"+
    "\1\155\66\0\1\156\55\0\1\157\65\0\1\160\52\0"+
    "\1\161\14\0\1\162\52\0\1\163\71\0\1\164\50\0"+
    "\1\165\57\0\1\166\40\0\1\167\36\0\1\170\47\0"+
    "\1\56\52\0\1\56\37\0\1\171\112\0\1\172\61\0"+
    "\1\173\70\0\1\174\60\0\1\175\26\0\1\176\103\0"+
    "\1\177\63\0\1\200\65\0\1\201\62\0\1\202\51\0"+
    "\1\203\63\0\1\56\57\0\1\204\70\0\1\205\43\0"+
    "\1\206\53\0\4\206\41\0\1\206\14\0\10\206\54\0"+
    "\3\206\55\0\1\207\3\0\2\146\1\210\67\0\1\211"+
    "\57\0\1\212\64\0\1\213\56\0\1\214\63\0\1\215"+
    "\72\0\1\216\24\0\1\217\104\0\1\220\60\0\1\221"+
    "\77\0\1\222\21\0\1\56\111\0\1\223\31\0\1\224"+
    "\114\0\1\225\6\0\1\226\41\0\1\227\74\0\1\230"+
    "\50\0\1\231\74\0\1\212\56\0\1\232\54\0\1\233"+
    "\60\0\1\234\3\0\1\235\3\0\1\236\3\0\1\237"+
    "\50\0\1\240\52\0\1\241\70\0\1\242\57\0\1\243"+
    "\56\0\1\56\35\0\1\244\106\0\1\245\54\0\1\41"+
    "\52\0\1\206\5\0\1\206\56\0\3\206\74\0\1\246"+
    "\61\0\1\247\56\0\1\250\65\0\1\251\27\0\1\252"+
    "\103\0\1\203\67\0\1\253\71\0\1\254\57\0\1\255"+
    "\60\0\1\250\61\0\1\256\53\0\1\246\61\0\1\257"+
    "\61\0\1\260\32\0\1\261\105\0\1\262\41\0\1\263"+
    "\106\0\1\12\67\0\1\264\44\0\1\64\2\0\1\265"+
    "\74\0\1\73\50\0\1\76\63\0\1\266\34\0\1\267"+
    "\61\0\1\270\105\0\1\271\60\0\1\272\61\0\1\203"+
    "\54\0\1\273\66\0\1\274\57\0\1\275\63\0\1\276"+
    "\57\0\1\277\61\0\1\300\70\0\1\301\51\0\1\302"+
    "\65\0\1\303\60\0\1\275\63\0\1\304\55\0\1\305"+
    "\71\0\1\130\24\0\1\247\111\0\1\306\75\0\1\307"+
    "\37\0\1\310\37\0\1\246\105\0\1\311\61\0\1\247"+
    "\63\0\1\56\67\0\1\12\51\0\1\312\61\0\1\246"+
    "\66\0\1\203\57\0\1\313\56\0\1\314\41\0\1\315"+
    "\101\0\1\177\66\0\1\316\70\0\1\317\50\0\1\12"+
    "\36\0\1\320\102\0\1\321\66\0\1\322\54\0\1\323"+
    "\56\0\1\161\37\0\1\324\106\0\1\56\34\0\1\325"+
    "\61\0\1\326\106\0\1\327\66\0\1\330\64\0\1\331"+
    "\60\0\1\56\62\0\1\332\61\0\1\333\51\0\1\334"+
    "\60\0\1\335\62\0\1\12\60\0\1\336\35\0\1\337"+
    "\110\0\1\340\63\0\1\341\65\0\1\342\50\0\1\343"+
    "\63\0\1\247\62\0\1\325\54\0\1\124\30\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10600];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\4\1\1\11\1\1\1\11\1\1\1\11"+
    "\17\1\1\11\2\0\1\11\5\0\1\1\10\0\1\11"+
    "\22\0\1\1\1\11\2\0\1\1\1\0\1\11\23\0"+
    "\1\1\16\0\1\11\56\0\1\1\6\0\1\11\2\0"+
    "\1\1\2\0\2\11\41\0\1\1\32\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[227];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
   
   /**   
    * Constructor.  This must be here because JFlex does not generate a   
    * no-parameter constructor.   
    */   
   public Colores() {   
   }   
   
   /**   
    * Adds the token specified to the current linked list of tokens.   
    *   
    * @param tokenType The token's type.   
    * @see #addToken(int, int, int)   
    */   
   private void addHyperlinkToken(int start, int end, int tokenType) {   
      int so = start + offsetShift;   
      addToken(zzBuffer, start,end, tokenType, so, true);   
   }   
   
   /**   
    * Adds the token specified to the current linked list of tokens.   
    *   
    * @param tokenType The token's type.   
    */   
   private void addToken(int tokenType) {   
      addToken(zzStartRead, zzMarkedPos-1, tokenType);   
   }   
   
   /**   
    * Adds the token specified to the current linked list of tokens.   
    *   
    * @param tokenType The token's type.   
    * @see #addHyperlinkToken(int, int, int)   
    */   
   private void addToken(int start, int end, int tokenType) {   
      int so = start + offsetShift;   
      addToken(zzBuffer, start,end, tokenType, so, false);   
   }   
   
   /**   
    * Adds the token specified to the current linked list of tokens.   
    *   
    * @param array The character array.   
    * @param start The starting offset in the array.   
    * @param end The ending offset in the array.   
    * @param tokenType The token's type.   
    * @param startOffset The offset in the document at which this token   
    *        occurs.   
    * @param hyperlink Whether this token is a hyperlink.   
    */   
   public void addToken(char[] array, int start, int end, int tokenType,   
                  int startOffset, boolean hyperlink) {   
      super.addToken(array, start,end, tokenType, startOffset, hyperlink);   
      zzStartRead = zzMarkedPos;   
   }   
   
   /**   
    * Returns the text to place at the beginning and end of a   
    * line to "comment" it in a this programming language.   
    *   
    * @return The start and end strings to add to a line to "comment"   
    *         it out.   
    */   
   public String[] getLineCommentStartAndEnd() {   
      return new String[] { "//", null };   
   }   
   
   /**   
    * Returns the first token in the linked list of tokens generated   
    * from <code>text</code>.  This method must be implemented by   
    * subclasses so they can correctly implement syntax highlighting.   
    *   
    * @param text The text from which to get tokens.   
    * @param initialTokenType The token type we should start with.   
    * @param startOffset The offset into the document at which   
    *        <code>text</code> starts.   
    * @return The first <code>Token</code> in a linked list representing   
    *         the syntax highlighted text.   
    */   
   public Token getTokenList(Segment text, int initialTokenType, int startOffset) {   
   
      resetTokenList();   
      this.offsetShift = -text.offset + startOffset;   
   
      // Start off in the proper state.   
      int state = Token.NULL;   
   
      s = text;   
      try {   
         yyreset(zzReader);   
         yybegin(state);   
         return yylex();   
      } catch (IOException ioe) {   
         ioe.printStackTrace();   
         return new TokenImpl();   
      }   
   
   }   
   
   /**   
    * Refills the input buffer.   
    *   
    * @return      <code>true</code> if EOF was reached, otherwise   
    *              <code>false</code>.   
    */   
   private boolean zzRefill() {   
      return zzCurrentPos>=s.offset+s.count;   
   }   
   
   /**   
    * Resets the scanner to read from a new input stream.   
    * Does not close the old reader.   
    *   
    * All internal variables are reset, the old input stream    
    * <b>cannot</b> be reused (internal buffer is discarded and lost).   
    * Lexical state is set to <tt>YY_INITIAL</tt>.   
    *   
    * @param reader   the new input stream    
    */   
   public final void yyreset(Reader reader) {   
      // 's' has been updated.   
      zzBuffer = s.array;   
      /*   
       * We replaced the line below with the two below it because zzRefill   
       * no longer "refills" the buffer (since the way we do it, it's always   
       * "full" the first time through, since it points to the segment's   
       * array).  So, we assign zzEndRead here.   
       */   
      //zzStartRead = zzEndRead = s.offset;   
      zzStartRead = s.offset;   
      zzEndRead = zzStartRead + s.count - 1;   
      zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;   
      zzLexicalState = YYINITIAL;   
      zzReader = reader;   
      zzAtBOL  = true;   
      zzAtEOF  = false;   
   }   
   


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Colores(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Colores(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 210) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */

  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 6: 
          { addToken(start,zzStartRead-1,Token.NULL); return firstToken;
          }
        case 16: break;
        case 11: 
          { addToken(Token.IDENTIFIER);
          }
        case 17: break;
        case 9: 
          { addToken(Token.RESERVED_WORD);
          }
        case 18: break;
        case 12: 
          { addToken(Token.FUNCTION);
          }
        case 19: break;
        case 7: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 20: break;
        case 1: 
          { addToken(Token.ANNOTATION);
          }
        case 21: break;
        case 15: 
          { addToken(Token.DATA_TYPE);
          }
        case 22: break;
        case 8: 
          { addToken(Token.COMMENT_EOL);
          }
        case 23: break;
        case 4: 
          { addToken(Token.OPERATOR);
          }
        case 24: break;
        case 2: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 25: break;
        case 14: 
          { addToken(Token.LITERAL_BOOLEAN);
          }
        case 26: break;
        case 10: 
          { addToken(Token.LITERAL_CHAR);
          }
        case 27: break;
        case 3: 
          { addNullToken(); return firstToken;
          }
        case 28: break;
        case 13: 
          { addToken(Token.COMMENT_MULTILINE);
          }
        case 29: break;
        case 5: 
          { addToken(Token.SEPARATOR);
          }
        case 30: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 228: break;
            case MLC: {
              addToken(start,zzStartRead-1,Token.NULL); return firstToken;
            }
            case 229: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
