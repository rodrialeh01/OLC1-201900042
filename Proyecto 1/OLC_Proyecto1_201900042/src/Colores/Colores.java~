/* The following code was generated by JFlex 1.4.1 on 29/8/22 16:27 */
package Colores;
import java.io.*;   
import javax.swing.text.Segment;   
   
import org.fife.ui.rsyntaxtextarea.*;   
   

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 29/8/22 16:27 from the specification file
 * <tt>Color.jflex</tt>
 */
public class Colores extends AbstractJFlexCTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int MLC = 1;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\0\1\10\2\0\1\0\22\0\1\51\1\0\1\4\1\0"+
    "\1\15\2\0\1\6\2\0\1\12\1\56\1\0\1\57\1\3\1\11"+
    "\1\23\1\24\1\25\1\2\1\26\1\20\1\17\2\21\1\22\4\0"+
    "\1\60\1\56\1\0\32\1\1\0\1\5\2\0\1\13\1\0\1\35"+
    "\1\54\1\36\1\45\1\33\1\44\1\31\1\47\1\30\1\53\1\1"+
    "\1\42\1\40\1\7\1\37\1\50\1\52\1\32\1\34\1\43\1\46"+
    "\1\41\2\1\1\55\1\1\1\16\1\0\1\27\63\0\1\14\15\0"+
    "\1\62\2\0\1\61\1\14\u1f54\0\1\14\udfe7\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\3\1\1\3\2\4\16\1\1\4"+
    "\1\1\1\5\2\0\1\6\5\0\1\7\10\0\1\10"+
    "\17\0\1\2\1\11\2\0\1\7\1\0\1\12\20\0"+
    "\1\13\15\0\1\7\53\0\1\4\6\0\1\10\2\0"+
    "\1\14\1\13\42\0\1\10\35\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[217];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\314\0\377\0\u0132\0\146"+
    "\0\u0165\0\146\0\u0198\0\u01cb\0\u01fe\0\u0231\0\u0264\0\u0297"+
    "\0\u02ca\0\u02fd\0\u0330\0\u0363\0\u0396\0\u03c9\0\u03fc\0\u042f"+
    "\0\u0462\0\u0495\0\146\0\u04c8\0\314\0\146\0\u04fb\0\u052e"+
    "\0\u0561\0\u0594\0\u05c7\0\u05fa\0\u062d\0\u0660\0\u0693\0\u06c6"+
    "\0\u06f9\0\u072c\0\u075f\0\u0792\0\146\0\u07c5\0\u07f8\0\u082b"+
    "\0\u085e\0\u0891\0\u08c4\0\u08f7\0\u092a\0\u095d\0\u0990\0\u09c3"+
    "\0\u09f6\0\u0a29\0\u0a5c\0\u0a8f\0\u04c8\0\146\0\u0ac2\0\u0af5"+
    "\0\u0b28\0\u0b5b\0\146\0\u0b8e\0\u0bc1\0\u0bf4\0\u0c27\0\u0c5a"+
    "\0\u0c8d\0\u0cc0\0\u0cf3\0\u0d26\0\u0d59\0\u0d8c\0\u0dbf\0\u0df2"+
    "\0\u0e25\0\u0e58\0\u0e8b\0\u0ebe\0\u0ef1\0\u0f24\0\u0f57\0\u0f8a"+
    "\0\u0fbd\0\u0ff0\0\u1023\0\u1056\0\u1089\0\u10bc\0\u10ef\0\u1122"+
    "\0\u1155\0\146\0\u1188\0\u11bb\0\u11ee\0\u1221\0\u1254\0\u1287"+
    "\0\u12ba\0\u12ed\0\u1320\0\u1353\0\u1386\0\u13b9\0\u13ec\0\u141f"+
    "\0\u1452\0\u1485\0\u14b8\0\u14eb\0\u151e\0\u1551\0\u1584\0\u15b7"+
    "\0\u15ea\0\u161d\0\u1650\0\u1683\0\u16b6\0\u16e9\0\u171c\0\u174f"+
    "\0\u1782\0\u17b5\0\u17e8\0\u181b\0\u184e\0\u1881\0\u18b4\0\u18e7"+
    "\0\u191a\0\u194d\0\u1980\0\u19b3\0\u19e6\0\u1a19\0\u0264\0\u1a4c"+
    "\0\u1a7f\0\u1ab2\0\u1ae5\0\u1b18\0\u1b4b\0\u1b7e\0\u1bb1\0\146"+
    "\0\146\0\u1be4\0\u1c17\0\u1c4a\0\u1c7d\0\u1cb0\0\u1ce3\0\u1d16"+
    "\0\u1d49\0\u1d7c\0\u1daf\0\u1de2\0\u1e15\0\u1e48\0\u1e7b\0\u1eae"+
    "\0\u1ee1\0\u1f14\0\u1f47\0\u1f7a\0\u1fad\0\u1fe0\0\u2013\0\u2046"+
    "\0\u2079\0\u20ac\0\u20df\0\u2112\0\u2145\0\u2178\0\u21ab\0\u21de"+
    "\0\u2211\0\u2244\0\u2277\0\u22aa\0\u22dd\0\u2310\0\u2343\0\u2376"+
    "\0\u23a9\0\u23dc\0\u240f\0\u2442\0\u2475\0\u24a8\0\u24db\0\u250e"+
    "\0\u2541\0\u2574\0\u25a7\0\u25da\0\u260d\0\u2640\0\u2673\0\u26a6"+
    "\0\u26d9\0\u270c\0\u273f\0\u2772\0\u27a5\0\u27d8\0\u280b\0\u283e"+
    "\0\u2871";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[217];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\3\1\4\1\3\1\5\1\3\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\3\3\10\4\1\3\1\14\1\3"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\3\3"+
    "\1\24\1\25\1\3\1\26\1\27\3\3\1\30\1\3"+
    "\1\12\1\31\1\3\1\32\1\3\10\0\1\33\137\0"+
    "\1\4\1\34\13\0\10\4\34\0\4\35\1\36\1\37"+
    "\2\35\1\0\52\35\1\0\1\40\5\0\1\40\4\0"+
    "\1\40\1\41\12\0\21\40\1\0\4\40\44\0\1\42"+
    "\6\0\1\43\25\0\1\44\1\45\51\0\2\46\4\0"+
    "\1\46\7\0\10\46\1\0\21\46\1\0\4\46\14\0"+
    "\1\47\30\0\1\50\55\0\1\51\36\0\1\52\24\0"+
    "\1\53\16\0\1\54\37\0\1\55\2\0\1\56\36\0"+
    "\1\57\110\0\1\60\1\0\1\61\36\0\1\62\16\0"+
    "\1\12\60\0\1\63\2\0\1\64\1\0\1\65\1\0"+
    "\1\57\53\0\1\66\15\0\1\67\47\0\1\70\64\0"+
    "\1\71\62\0\1\72\1\0\1\73\62\0\1\74\103\0"+
    "\1\12\64\0\1\12\2\0\1\75\14\0\10\75\40\0"+
    "\1\35\1\0\2\35\61\0\1\76\72\0\1\77\107\0"+
    "\1\12\57\0\1\100\22\0\10\44\1\101\52\44\12\45"+
    "\1\102\50\45\1\0\2\46\4\0\1\46\3\0\1\103"+
    "\3\0\10\46\1\0\21\46\1\0\4\46\35\0\1\104"+
    "\1\105\101\0\1\106\55\0\1\107\4\0\1\110\55\0"+
    "\1\111\32\0\1\112\102\0\1\113\60\0\1\114\76\0"+
    "\1\12\47\0\1\115\12\0\1\116\24\0\1\117\107\0"+
    "\1\120\61\0\1\121\36\0\1\122\33\0\1\123\74\0"+
    "\1\122\14\0\1\124\62\0\1\125\66\0\1\126\103\0"+
    "\1\127\1\0\1\130\56\0\1\131\73\0\1\132\56\0"+
    "\1\133\25\0\1\134\14\0\1\135\1\0\1\136\1\137"+
    "\1\0\1\140\71\0\1\141\37\0\1\101\63\0\1\142"+
    "\107\0\1\143\56\0\1\144\62\0\1\145\67\0\1\146"+
    "\56\0\1\147\66\0\1\150\53\0\1\151\14\0\1\152"+
    "\53\0\1\153\72\0\1\154\51\0\1\155\60\0\1\156"+
    "\42\0\1\157\35\0\1\160\41\0\1\55\41\0\1\161"+
    "\112\0\1\162\62\0\1\163\36\0\1\164\105\0\1\165"+
    "\66\0\1\166\63\0\1\167\52\0\1\170\64\0\1\55"+
    "\60\0\1\171\71\0\1\172\45\0\1\173\54\0\4\173"+
    "\42\0\1\173\14\0\10\173\55\0\3\173\56\0\1\174"+
    "\3\0\2\136\1\175\67\0\1\176\60\0\1\177\65\0"+
    "\1\200\57\0\1\201\64\0\1\202\73\0\1\203\26\0"+
    "\1\204\104\0\1\205\61\0\1\206\100\0\1\207\23\0"+
    "\1\55\111\0\1\210\33\0\1\211\114\0\1\212\6\0"+
    "\1\213\42\0\1\214\75\0\1\215\51\0\1\216\75\0"+
    "\1\177\51\0\1\217\3\0\1\220\3\0\1\221\3\0"+
    "\1\222\42\0\1\223\71\0\1\224\60\0\1\225\57\0"+
    "\1\55\37\0\1\226\106\0\1\227\56\0\1\40\53\0"+
    "\1\173\5\0\1\173\57\0\3\173\74\0\1\230\62\0"+
    "\1\231\57\0\1\232\66\0\1\233\31\0\1\234\103\0"+
    "\1\170\70\0\1\235\72\0\1\236\60\0\1\237\61\0"+
    "\1\240\62\0\1\241\54\0\1\230\62\0\1\242\62\0"+
    "\1\243\34\0\1\244\105\0\1\245\43\0\1\246\77\0"+
    "\1\63\2\0\1\247\75\0\1\67\51\0\1\72\64\0"+
    "\1\250\36\0\1\251\62\0\1\252\105\0\1\253\61\0"+
    "\1\254\62\0\1\255\55\0\1\256\67\0\1\257\60\0"+
    "\1\260\64\0\1\261\60\0\1\262\64\0\1\170\60\0"+
    "\1\263\71\0\1\264\52\0\1\265\66\0\1\266\61\0"+
    "\1\260\64\0\1\267\66\0\1\123\26\0\1\231\111\0"+
    "\1\270\76\0\1\271\40\0\1\272\41\0\1\230\105\0"+
    "\1\273\62\0\1\274\62\0\1\231\64\0\1\55\70\0"+
    "\1\12\52\0\1\275\62\0\1\230\67\0\1\170\60\0"+
    "\1\276\57\0\1\277\43\0\1\300\106\0\1\301\71\0"+
    "\1\302\51\0\1\12\63\0\1\303\37\0\1\304\102\0"+
    "\1\305\67\0\1\306\55\0\1\307\57\0\1\151\41\0"+
    "\1\310\106\0\1\55\66\0\1\311\32\0\1\312\62\0"+
    "\1\313\106\0\1\314\67\0\1\315\65\0\1\316\57\0"+
    "\1\317\64\0\1\55\63\0\1\320\62\0\1\321\52\0"+
    "\1\322\61\0\1\323\67\0\1\55\56\0\1\12\61\0"+
    "\1\324\37\0\1\325\110\0\1\326\64\0\1\327\66\0"+
    "\1\330\51\0\1\331\64\0\1\231\63\0\1\312\55\0"+
    "\1\317\32\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10404];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\4\1\1\11\1\1\1\11\20\1\1\11"+
    "\2\0\1\11\5\0\1\1\10\0\1\11\17\0\1\1"+
    "\1\11\2\0\1\1\1\0\1\11\20\0\1\1\15\0"+
    "\1\11\53\0\1\1\6\0\1\1\2\0\2\11\42\0"+
    "\1\1\35\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[217];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
   
   /**   
    * Constructor.  This must be here because JFlex does not generate a   
    * no-parameter constructor.   
    */   
   public Colores() {   
   }   
   
   /**   
    * Adds the token specified to the current linked list of tokens.   
    *   
    * @param tokenType The token's type.   
    * @see #addToken(int, int, int)   
    */   
   private void addHyperlinkToken(int start, int end, int tokenType) {   
      int so = start + offsetShift;   
      addToken(zzBuffer, start,end, tokenType, so, true);   
   }   
   
   /**   
    * Adds the token specified to the current linked list of tokens.   
    *   
    * @param tokenType The token's type.   
    */   
   private void addToken(int tokenType) {   
      addToken(zzStartRead, zzMarkedPos-1, tokenType);   
   }   
   
   /**   
    * Adds the token specified to the current linked list of tokens.   
    *   
    * @param tokenType The token's type.   
    * @see #addHyperlinkToken(int, int, int)   
    */   
   private void addToken(int start, int end, int tokenType) {   
      int so = start + offsetShift;   
      addToken(zzBuffer, start,end, tokenType, so, false);   
   }   
   
   /**   
    * Adds the token specified to the current linked list of tokens.   
    *   
    * @param array The character array.   
    * @param start The starting offset in the array.   
    * @param end The ending offset in the array.   
    * @param tokenType The token's type.   
    * @param startOffset The offset in the document at which this token   
    *        occurs.   
    * @param hyperlink Whether this token is a hyperlink.   
    */   
   public void addToken(char[] array, int start, int end, int tokenType,   
                  int startOffset, boolean hyperlink) {   
      super.addToken(array, start,end, tokenType, startOffset, hyperlink);   
      zzStartRead = zzMarkedPos;   
   }   
   
   /**   
    * Returns the text to place at the beginning and end of a   
    * line to "comment" it in a this programming language.   
    *   
    * @return The start and end strings to add to a line to "comment"   
    *         it out.   
    */   
   public String[] getLineCommentStartAndEnd() {   
      return new String[] { "//", null };   
   }   
   
   /**   
    * Returns the first token in the linked list of tokens generated   
    * from <code>text</code>.  This method must be implemented by   
    * subclasses so they can correctly implement syntax highlighting.   
    *   
    * @param text The text from which to get tokens.   
    * @param initialTokenType The token type we should start with.   
    * @param startOffset The offset into the document at which   
    *        <code>text</code> starts.   
    * @return The first <code>Token</code> in a linked list representing   
    *         the syntax highlighted text.   
    */   
   public Token getTokenList(Segment text, int initialTokenType, int startOffset) {   
   
      resetTokenList();   
      this.offsetShift = -text.offset + startOffset;   
   
      // Start off in the proper state.   
      int state = Token.NULL;   
   
      s = text;   
      try {   
         yyreset(zzReader);   
         yybegin(state);   
         return yylex();   
      } catch (IOException ioe) {   
         ioe.printStackTrace();   
         return new TokenImpl();   
      }   
   
   }   
   
   /**   
    * Refills the input buffer.   
    *   
    * @return      <code>true</code> if EOF was reached, otherwise   
    *              <code>false</code>.   
    */   
   private boolean zzRefill() {   
      return zzCurrentPos>=s.offset+s.count;   
   }   
   
   /**   
    * Resets the scanner to read from a new input stream.   
    * Does not close the old reader.   
    *   
    * All internal variables are reset, the old input stream    
    * <b>cannot</b> be reused (internal buffer is discarded and lost).   
    * Lexical state is set to <tt>YY_INITIAL</tt>.   
    *   
    * @param reader   the new input stream    
    */   
   public final void yyreset(Reader reader) {   
      // 's' has been updated.   
      zzBuffer = s.array;   
      /*   
       * We replaced the line below with the two below it because zzRefill   
       * no longer "refills" the buffer (since the way we do it, it's always   
       * "full" the first time through, since it points to the segment's   
       * array).  So, we assign zzEndRead here.   
       */   
      //zzStartRead = zzEndRead = s.offset;   
      zzStartRead = s.offset;   
      zzEndRead = zzStartRead + s.count - 1;   
      zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;   
      zzLexicalState = YYINITIAL;   
      zzReader = reader;   
      zzAtBOL  = true;   
      zzAtEOF  = false;   
   }   
   


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Colores(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Colores(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 154) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */


    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 10: 
          { addToken(Token.IDENTIFIER);
          }
        case 13: break;
        case 8: 
          { addToken(Token.RESERVED_WORD);
          }
        case 14: break;
        case 11: 
          { addToken(Token.FUNCTION);
          }
        case 15: break;
        case 6: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 16: break;
        case 1: 
          { addToken(Token.ANNOTATION);
          }
        case 17: break;
        case 12: 
          { addToken(Token.DATA_TYPE);
          }
        case 18: break;
        case 4: 
          { addToken(Token.OPERATOR);
          }
        case 19: break;
        case 2: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 20: break;
        case 9: 
          { addToken(Token.LITERAL_CHAR);
          }
        case 21: break;
        case 3: 
          { addNullToken(); return firstToken;
          }
        case 22: break;
        case 7: 
          { addToken(Token.COMMENT_MULTILINE);
          }
        case 23: break;
        case 5: 
          { addToken(start,zzStartRead-1,Token.SEPARATOR); return firstToken;
          }
        case 24: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 218: break;
            case MLC: {
              addToken(start,zzStartRead-1,Token.SEPARATOR); return firstToken;
            }
            case 219: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
