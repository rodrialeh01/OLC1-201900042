/* The following code was generated by JFlex 1.4.1 on 31/8/22 3:08 */

package Colores;
import java.io.*;   
import javax.swing.text.Segment;   
   
import org.fife.ui.rsyntaxtextarea.*;   
   

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 31/8/22 3:08 from the specification file
 * <tt>Color.jflex</tt>
 */
public class Colores extends AbstractJFlexCTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int MLC = 1;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\0\1\10\2\0\1\0\22\0\1\52\1\0\1\4\1\0"+
    "\1\15\2\0\1\6\1\30\1\30\1\12\1\61\1\30\1\62\1\3"+
    "\1\11\1\23\1\24\1\25\1\2\1\26\1\20\1\17\2\21\1\22"+
    "\1\0\1\30\2\0\1\63\1\30\1\0\1\1\1\57\1\56\12\1"+
    "\1\55\14\1\1\30\1\5\1\30\1\0\1\13\1\0\1\36\1\57"+
    "\1\37\1\46\1\34\1\45\1\32\1\50\1\31\1\54\1\1\1\43"+
    "\1\41\1\7\1\40\1\51\1\53\1\33\1\35\1\44\1\47\1\42"+
    "\2\1\1\60\1\1\1\16\1\0\1\27\63\0\1\14\15\0\1\30"+
    "\2\0\1\30\1\14\u1f54\0\1\14\udfe7\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\3\1\1\3\2\4\1\1\1\5"+
    "\20\1\1\4\1\6\2\0\1\7\5\0\1\10\10\0"+
    "\1\11\21\0\1\2\1\12\2\0\1\10\1\0\1\13"+
    "\22\0\1\14\16\0\1\15\55\0\1\4\5\0\1\16"+
    "\2\0\1\11\2\0\1\17\1\14\41\0\1\11\32\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[225];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\320\0\u0104\0\u0138\0\150"+
    "\0\u016c\0\150\0\u01a0\0\150\0\u01d4\0\u0208\0\u023c\0\u0270"+
    "\0\u02a4\0\u02d8\0\u030c\0\u0340\0\u0374\0\u03a8\0\u03dc\0\u0410"+
    "\0\u0444\0\u0478\0\u04ac\0\u04e0\0\u0514\0\150\0\u0548\0\320"+
    "\0\150\0\u057c\0\u05b0\0\u05e4\0\u0618\0\u064c\0\u0680\0\u06b4"+
    "\0\u06e8\0\u071c\0\u0750\0\u0784\0\u07b8\0\u07ec\0\u0820\0\150"+
    "\0\u0854\0\u0888\0\u08bc\0\u08f0\0\u0924\0\u0958\0\u098c\0\u09c0"+
    "\0\u09f4\0\u0a28\0\u0a5c\0\u0a90\0\u0ac4\0\u0af8\0\u0b2c\0\u0b60"+
    "\0\u0b94\0\u0548\0\150\0\u0bc8\0\u0bfc\0\u0c30\0\u0c64\0\u06e8"+
    "\0\u0c98\0\u0ccc\0\u0d00\0\u0d34\0\u0d68\0\u0d9c\0\u0dd0\0\u0e04"+
    "\0\u0e38\0\u0e6c\0\u0ea0\0\u0ed4\0\u0f08\0\u0f3c\0\u0f70\0\u0fa4"+
    "\0\u0fd8\0\u100c\0\u1040\0\u1074\0\u10a8\0\u10dc\0\u1110\0\u1144"+
    "\0\u1178\0\u11ac\0\u11e0\0\u1214\0\u1248\0\u127c\0\u12b0\0\u12e4"+
    "\0\u1318\0\150\0\u134c\0\u1380\0\u13b4\0\u13e8\0\u141c\0\u1450"+
    "\0\u1484\0\u14b8\0\u14ec\0\u1520\0\u1554\0\u1588\0\u15bc\0\u15f0"+
    "\0\u1624\0\u1658\0\u168c\0\u16c0\0\u16f4\0\u1728\0\u175c\0\u1790"+
    "\0\u17c4\0\u17f8\0\u182c\0\u1860\0\u1894\0\u18c8\0\u18fc\0\u1930"+
    "\0\u1964\0\u1998\0\u19cc\0\u1a00\0\u1a34\0\u1a68\0\u1a9c\0\u1ad0"+
    "\0\u1b04\0\u1b38\0\u1b6c\0\u1ba0\0\u1bd4\0\u1c08\0\u1c3c\0\u1c70"+
    "\0\u1ca4\0\u0270\0\u1cd8\0\u1d0c\0\u1d40\0\150\0\u1d74\0\u1da8"+
    "\0\u1ddc\0\u1e10\0\u1e44\0\150\0\150\0\u1e78\0\u1eac\0\u1ee0"+
    "\0\u1f14\0\u1f48\0\u1f7c\0\u1fb0\0\u1fe4\0\u2018\0\u204c\0\u2080"+
    "\0\u20b4\0\u20e8\0\u211c\0\u2150\0\u2184\0\u21b8\0\u21ec\0\u2220"+
    "\0\u2254\0\u2288\0\u22bc\0\u22f0\0\u2324\0\u2358\0\u238c\0\u23c0"+
    "\0\u23f4\0\u2428\0\u245c\0\u2490\0\u24c4\0\u24f8\0\u252c\0\u2560"+
    "\0\u2594\0\u25c8\0\u25fc\0\u2630\0\u2664\0\u2698\0\u26cc\0\u2700"+
    "\0\u2734\0\u2768\0\u279c\0\u27d0\0\u2804\0\u2838\0\u286c\0\u28a0"+
    "\0\u28d4\0\u2908\0\u293c\0\u2970\0\u29a4\0\u29d8\0\u2a0c\0\u2a40"+
    "\0\u2a74";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[225];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\3\1\4\1\3\1\5\1\3\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\3\3\10\4\1\3\1\14\1\15"+
    "\1\3\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\2\3\1\26\1\27\1\3\1\30\1\31\3\3"+
    "\1\32\1\33\1\34\1\3\1\12\1\35\1\3\10\0"+
    "\1\36\141\0\1\4\1\37\13\0\10\4\35\0\4\40"+
    "\1\41\1\42\2\40\1\0\53\40\1\0\1\43\5\0"+
    "\1\43\4\0\1\43\1\44\13\0\21\43\1\0\6\43"+
    "\43\0\1\45\6\0\1\46\25\0\1\47\1\50\52\0"+
    "\2\51\4\0\1\51\3\0\1\51\3\0\10\51\2\0"+
    "\21\51\1\0\6\51\12\0\1\52\31\0\1\53\56\0"+
    "\1\54\36\0\1\55\25\0\1\56\16\0\1\57\40\0"+
    "\1\60\2\0\1\61\36\0\1\62\112\0\1\63\1\0"+
    "\1\64\36\0\1\65\17\0\1\12\61\0\1\66\2\0"+
    "\1\67\1\0\1\70\1\0\1\62\57\0\1\71\60\0"+
    "\1\72\4\0\1\73\10\0\1\74\50\0\1\75\65\0"+
    "\1\76\63\0\1\77\1\0\1\100\72\0\1\46\52\0"+
    "\1\63\65\0\1\101\106\0\1\12\2\0\1\102\14\0"+
    "\10\102\41\0\1\40\1\0\2\40\62\0\1\103\73\0"+
    "\1\104\111\0\1\12\60\0\1\105\22\0\10\47\1\106"+
    "\53\47\11\50\1\0\1\107\51\50\1\0\2\51\4\0"+
    "\1\51\3\0\1\110\3\0\10\51\2\0\21\51\1\0"+
    "\6\51\34\0\1\111\1\112\102\0\1\113\56\0\1\114"+
    "\4\0\1\115\56\0\1\116\32\0\1\117\104\0\1\120"+
    "\61\0\1\121\77\0\1\12\50\0\1\122\12\0\1\123"+
    "\24\0\1\124\31\0\1\125\57\0\1\126\62\0\1\127"+
    "\36\0\1\130\34\0\1\131\77\0\1\130\36\0\1\132"+
    "\37\0\1\133\117\0\1\134\27\0\1\135\67\0\1\136"+
    "\105\0\1\137\1\0\1\140\57\0\1\141\74\0\1\142"+
    "\57\0\1\143\25\0\1\144\14\0\1\145\1\0\1\146"+
    "\1\147\1\0\1\150\73\0\1\151\37\0\1\106\64\0"+
    "\1\152\111\0\1\153\57\0\1\154\63\0\1\155\70\0"+
    "\1\156\57\0\1\157\67\0\1\160\54\0\1\161\14\0"+
    "\1\162\54\0\1\163\73\0\1\164\52\0\1\165\61\0"+
    "\1\166\42\0\1\167\36\0\1\170\51\0\1\60\54\0"+
    "\1\60\41\0\1\171\114\0\1\172\63\0\1\173\71\0"+
    "\1\174\30\0\1\175\105\0\1\176\65\0\1\177\67\0"+
    "\1\200\64\0\1\201\53\0\1\202\65\0\1\60\61\0"+
    "\1\203\72\0\1\204\45\0\1\205\55\0\4\205\43\0"+
    "\1\205\14\0\10\205\56\0\3\205\57\0\1\206\3\0"+
    "\2\146\1\207\71\0\1\210\61\0\1\211\66\0\1\212"+
    "\60\0\1\213\65\0\1\214\74\0\1\215\26\0\1\216"+
    "\106\0\1\217\62\0\1\220\101\0\1\221\23\0\1\60"+
    "\113\0\1\222\33\0\1\223\116\0\1\224\6\0\1\225"+
    "\43\0\1\226\76\0\1\227\52\0\1\230\76\0\1\211"+
    "\53\0\1\231\62\0\1\232\3\0\1\233\3\0\1\234"+
    "\3\0\1\235\52\0\1\236\54\0\1\237\72\0\1\240"+
    "\61\0\1\241\60\0\1\60\37\0\1\242\110\0\1\243"+
    "\56\0\1\43\54\0\1\205\5\0\1\205\60\0\3\205"+
    "\76\0\1\244\63\0\1\245\60\0\1\246\67\0\1\247"+
    "\31\0\1\250\105\0\1\202\71\0\1\251\73\0\1\252"+
    "\61\0\1\253\62\0\1\246\63\0\1\254\55\0\1\244"+
    "\63\0\1\255\63\0\1\256\34\0\1\257\107\0\1\260"+
    "\43\0\1\261\116\0\1\262\46\0\1\66\2\0\1\263"+
    "\76\0\1\74\52\0\1\77\65\0\1\264\36\0\1\265"+
    "\63\0\1\266\107\0\1\267\62\0\1\270\63\0\1\202"+
    "\56\0\1\271\70\0\1\272\61\0\1\273\65\0\1\274"+
    "\61\0\1\275\63\0\1\276\72\0\1\277\53\0\1\300"+
    "\67\0\1\301\62\0\1\273\65\0\1\302\57\0\1\303"+
    "\73\0\1\131\26\0\1\245\113\0\1\304\77\0\1\305"+
    "\41\0\1\306\41\0\1\244\107\0\1\307\63\0\1\245"+
    "\65\0\1\60\71\0\1\12\53\0\1\310\63\0\1\244"+
    "\70\0\1\202\61\0\1\311\60\0\1\312\43\0\1\313"+
    "\103\0\1\176\70\0\1\314\72\0\1\315\52\0\1\12"+
    "\40\0\1\316\104\0\1\317\70\0\1\320\56\0\1\321"+
    "\60\0\1\161\41\0\1\322\110\0\1\60\36\0\1\323"+
    "\63\0\1\324\110\0\1\325\70\0\1\326\66\0\1\327"+
    "\62\0\1\60\64\0\1\330\63\0\1\331\53\0\1\332"+
    "\62\0\1\333\64\0\1\12\62\0\1\334\37\0\1\335"+
    "\112\0\1\336\65\0\1\337\67\0\1\340\52\0\1\341"+
    "\65\0\1\245\64\0\1\323\56\0\1\125\32\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10920];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\4\1\1\11\1\1\1\11\1\1\1\11"+
    "\21\1\1\11\2\0\1\11\5\0\1\1\10\0\1\11"+
    "\21\0\1\1\1\11\2\0\1\1\1\0\1\1\22\0"+
    "\1\1\16\0\1\11\55\0\1\1\5\0\1\11\2\0"+
    "\1\1\2\0\2\11\41\0\1\1\32\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[225];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
   
   /**   
    * Constructor.  This must be here because JFlex does not generate a   
    * no-parameter constructor.   
    */   
   public Colores() {   
   }   
   
   /**   
    * Adds the token specified to the current linked list of tokens.   
    *   
    * @param tokenType The token's type.   
    * @see #addToken(int, int, int)   
    */   
   private void addHyperlinkToken(int start, int end, int tokenType) {   
      int so = start + offsetShift;   
      addToken(zzBuffer, start,end, tokenType, so, true);   
   }   
   
   /**   
    * Adds the token specified to the current linked list of tokens.   
    *   
    * @param tokenType The token's type.   
    */   
   private void addToken(int tokenType) {   
      addToken(zzStartRead, zzMarkedPos-1, tokenType);   
   }   
   
   /**   
    * Adds the token specified to the current linked list of tokens.   
    *   
    * @param tokenType The token's type.   
    * @see #addHyperlinkToken(int, int, int)   
    */   
   private void addToken(int start, int end, int tokenType) {   
      int so = start + offsetShift;   
      addToken(zzBuffer, start,end, tokenType, so, false);   
   }   
   
   /**   
    * Adds the token specified to the current linked list of tokens.   
    *   
    * @param array The character array.   
    * @param start The starting offset in the array.   
    * @param end The ending offset in the array.   
    * @param tokenType The token's type.   
    * @param startOffset The offset in the document at which this token   
    *        occurs.   
    * @param hyperlink Whether this token is a hyperlink.   
    */   
   public void addToken(char[] array, int start, int end, int tokenType,   
                  int startOffset, boolean hyperlink) {   
      super.addToken(array, start,end, tokenType, startOffset, hyperlink);   
      zzStartRead = zzMarkedPos;   
   }   
   
   /**   
    * Returns the text to place at the beginning and end of a   
    * line to "comment" it in a this programming language.   
    *   
    * @return The start and end strings to add to a line to "comment"   
    *         it out.   
    */   
   public String[] getLineCommentStartAndEnd() {   
      return new String[] { "//", null };   
   }   
   
   /**   
    * Returns the first token in the linked list of tokens generated   
    * from <code>text</code>.  This method must be implemented by   
    * subclasses so they can correctly implement syntax highlighting.   
    *   
    * @param text The text from which to get tokens.   
    * @param initialTokenType The token type we should start with.   
    * @param startOffset The offset into the document at which   
    *        <code>text</code> starts.   
    * @return The first <code>Token</code> in a linked list representing   
    *         the syntax highlighted text.   
    */   
   public Token getTokenList(Segment text, int initialTokenType, int startOffset) {   
   
      resetTokenList();   
      this.offsetShift = -text.offset + startOffset;   
   
      // Start off in the proper state.   
      int state = Token.NULL;   
   
      s = text;   
      try {   
         yyreset(zzReader);   
         yybegin(state);   
         return yylex();   
      } catch (IOException ioe) {   
         ioe.printStackTrace();   
         return new TokenImpl();   
      }   
   
   }   
   
   /**   
    * Refills the input buffer.   
    *   
    * @return      <code>true</code> if EOF was reached, otherwise   
    *              <code>false</code>.   
    */   
   private boolean zzRefill() {   
      return zzCurrentPos>=s.offset+s.count;   
   }   
   
   /**   
    * Resets the scanner to read from a new input stream.   
    * Does not close the old reader.   
    *   
    * All internal variables are reset, the old input stream    
    * <b>cannot</b> be reused (internal buffer is discarded and lost).   
    * Lexical state is set to <tt>YY_INITIAL</tt>.   
    *   
    * @param reader   the new input stream    
    */   
   public final void yyreset(Reader reader) {   
      // 's' has been updated.   
      zzBuffer = s.array;   
      /*   
       * We replaced the line below with the two below it because zzRefill   
       * no longer "refills" the buffer (since the way we do it, it's always   
       * "full" the first time through, since it points to the segment's   
       * array).  So, we assign zzEndRead here.   
       */   
      //zzStartRead = zzEndRead = s.offset;   
      zzStartRead = s.offset;   
      zzEndRead = zzStartRead + s.count - 1;   
      zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;   
      zzLexicalState = YYINITIAL;   
      zzReader = reader;   
      zzAtBOL  = true;   
      zzAtEOF  = false;   
   }   
   


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Colores(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Colores(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 172) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 6: 
          { addToken(start,zzStartRead-1,Token.NULL); return firstToken;
          }
        case 16: break;
        case 11: 
          { addToken(Token.IDENTIFIER);
          }
        case 17: break;
        case 9: 
          { addToken(Token.RESERVED_WORD);
          }
        case 18: break;
        case 12: 
          { addToken(Token.FUNCTION);
          }
        case 19: break;
        case 7: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 20: break;
        case 1: 
          { addToken(Token.ANNOTATION);
          }
        case 21: break;
        case 15: 
          { addToken(Token.DATA_TYPE);
          }
        case 22: break;
        case 8: 
          { addToken(Token.COMMENT_EOL);
          }
        case 23: break;
        case 4: 
          { addToken(Token.OPERATOR);
          }
        case 24: break;
        case 2: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 25: break;
        case 14: 
          { addToken(Token.LITERAL_BOOLEAN);
          }
        case 26: break;
        case 10: 
          { addToken(Token.LITERAL_CHAR);
          }
        case 27: break;
        case 3: 
          { addNullToken(); return firstToken;
          }
        case 28: break;
        case 13: 
          { addToken(Token.COMMENT_MULTILINE);
          }
        case 29: break;
        case 5: 
          { addToken(Token.SEPARATOR);
          }
        case 30: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 226: break;
            case MLC: {
              addToken(start,zzStartRead-1,Token.NULL); return firstToken;
            }
            case 227: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
